
STM32L433CCU6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004230  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  080043c0  080043c0  000143c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044c0  080044c0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080044c0  080044c0  000144c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080044c8  080044c8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044c8  080044c8  000144c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080044cc  080044cc  000144cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080044d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  20000070  08004540  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000013c  08004540  0002013c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000109bc  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002543  00000000  00000000  00030a5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e28  00000000  00000000  00032fa0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d00  00000000  00000000  00033dc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00027f25  00000000  00000000  00034ac8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b33d  00000000  00000000  0005c9ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ead19  00000000  00000000  00067d2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00152a43  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004214  00000000  00000000  00152ac0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080043a8 	.word	0x080043a8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080043a8 	.word	0x080043a8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000574:	4b04      	ldr	r3, [pc, #16]	; (8000588 <__NVIC_GetPriorityGrouping+0x18>)
 8000576:	68db      	ldr	r3, [r3, #12]
 8000578:	0a1b      	lsrs	r3, r3, #8
 800057a:	f003 0307 	and.w	r3, r3, #7
}
 800057e:	4618      	mov	r0, r3
 8000580:	46bd      	mov	sp, r7
 8000582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000586:	4770      	bx	lr
 8000588:	e000ed00 	.word	0xe000ed00

0800058c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800058c:	b480      	push	{r7}
 800058e:	b083      	sub	sp, #12
 8000590:	af00      	add	r7, sp, #0
 8000592:	4603      	mov	r3, r0
 8000594:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800059a:	2b00      	cmp	r3, #0
 800059c:	db0b      	blt.n	80005b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800059e:	79fb      	ldrb	r3, [r7, #7]
 80005a0:	f003 021f 	and.w	r2, r3, #31
 80005a4:	4907      	ldr	r1, [pc, #28]	; (80005c4 <__NVIC_EnableIRQ+0x38>)
 80005a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005aa:	095b      	lsrs	r3, r3, #5
 80005ac:	2001      	movs	r0, #1
 80005ae:	fa00 f202 	lsl.w	r2, r0, r2
 80005b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80005b6:	bf00      	nop
 80005b8:	370c      	adds	r7, #12
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	e000e100 	.word	0xe000e100

080005c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	4603      	mov	r3, r0
 80005d0:	6039      	str	r1, [r7, #0]
 80005d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	db0a      	blt.n	80005f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005dc:	683b      	ldr	r3, [r7, #0]
 80005de:	b2da      	uxtb	r2, r3
 80005e0:	490c      	ldr	r1, [pc, #48]	; (8000614 <__NVIC_SetPriority+0x4c>)
 80005e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005e6:	0112      	lsls	r2, r2, #4
 80005e8:	b2d2      	uxtb	r2, r2
 80005ea:	440b      	add	r3, r1
 80005ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005f0:	e00a      	b.n	8000608 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005f2:	683b      	ldr	r3, [r7, #0]
 80005f4:	b2da      	uxtb	r2, r3
 80005f6:	4908      	ldr	r1, [pc, #32]	; (8000618 <__NVIC_SetPriority+0x50>)
 80005f8:	79fb      	ldrb	r3, [r7, #7]
 80005fa:	f003 030f 	and.w	r3, r3, #15
 80005fe:	3b04      	subs	r3, #4
 8000600:	0112      	lsls	r2, r2, #4
 8000602:	b2d2      	uxtb	r2, r2
 8000604:	440b      	add	r3, r1
 8000606:	761a      	strb	r2, [r3, #24]
}
 8000608:	bf00      	nop
 800060a:	370c      	adds	r7, #12
 800060c:	46bd      	mov	sp, r7
 800060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000612:	4770      	bx	lr
 8000614:	e000e100 	.word	0xe000e100
 8000618:	e000ed00 	.word	0xe000ed00

0800061c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800061c:	b480      	push	{r7}
 800061e:	b089      	sub	sp, #36	; 0x24
 8000620:	af00      	add	r7, sp, #0
 8000622:	60f8      	str	r0, [r7, #12]
 8000624:	60b9      	str	r1, [r7, #8]
 8000626:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	f003 0307 	and.w	r3, r3, #7
 800062e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000630:	69fb      	ldr	r3, [r7, #28]
 8000632:	f1c3 0307 	rsb	r3, r3, #7
 8000636:	2b04      	cmp	r3, #4
 8000638:	bf28      	it	cs
 800063a:	2304      	movcs	r3, #4
 800063c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800063e:	69fb      	ldr	r3, [r7, #28]
 8000640:	3304      	adds	r3, #4
 8000642:	2b06      	cmp	r3, #6
 8000644:	d902      	bls.n	800064c <NVIC_EncodePriority+0x30>
 8000646:	69fb      	ldr	r3, [r7, #28]
 8000648:	3b03      	subs	r3, #3
 800064a:	e000      	b.n	800064e <NVIC_EncodePriority+0x32>
 800064c:	2300      	movs	r3, #0
 800064e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000650:	f04f 32ff 	mov.w	r2, #4294967295
 8000654:	69bb      	ldr	r3, [r7, #24]
 8000656:	fa02 f303 	lsl.w	r3, r2, r3
 800065a:	43da      	mvns	r2, r3
 800065c:	68bb      	ldr	r3, [r7, #8]
 800065e:	401a      	ands	r2, r3
 8000660:	697b      	ldr	r3, [r7, #20]
 8000662:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000664:	f04f 31ff 	mov.w	r1, #4294967295
 8000668:	697b      	ldr	r3, [r7, #20]
 800066a:	fa01 f303 	lsl.w	r3, r1, r3
 800066e:	43d9      	mvns	r1, r3
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000674:	4313      	orrs	r3, r2
         );
}
 8000676:	4618      	mov	r0, r3
 8000678:	3724      	adds	r7, #36	; 0x24
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr

08000682 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000682:	b480      	push	{r7}
 8000684:	b083      	sub	sp, #12
 8000686:	af00      	add	r7, sp, #0
 8000688:	6078      	str	r0, [r7, #4]
 800068a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	689b      	ldr	r3, [r3, #8]
 8000690:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000694:	683b      	ldr	r3, [r7, #0]
 8000696:	431a      	orrs	r2, r3
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	609a      	str	r2, [r3, #8]
}
 800069c:	bf00      	nop
 800069e:	370c      	adds	r7, #12
 80006a0:	46bd      	mov	sp, r7
 80006a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a6:	4770      	bx	lr

080006a8 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80006a8:	b490      	push	{r4, r7}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	60f8      	str	r0, [r7, #12]
 80006b0:	60b9      	str	r1, [r7, #8]
 80006b2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	3330      	adds	r3, #48	; 0x30
 80006b8:	461a      	mov	r2, r3
 80006ba:	68bb      	ldr	r3, [r7, #8]
 80006bc:	0a1b      	lsrs	r3, r3, #8
 80006be:	009b      	lsls	r3, r3, #2
 80006c0:	f003 030c 	and.w	r3, r3, #12
 80006c4:	4413      	add	r3, r2
 80006c6:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80006c8:	6822      	ldr	r2, [r4, #0]
 80006ca:	68bb      	ldr	r3, [r7, #8]
 80006cc:	f003 031f 	and.w	r3, r3, #31
 80006d0:	211f      	movs	r1, #31
 80006d2:	fa01 f303 	lsl.w	r3, r1, r3
 80006d6:	43db      	mvns	r3, r3
 80006d8:	401a      	ands	r2, r3
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	0e9b      	lsrs	r3, r3, #26
 80006de:	f003 011f 	and.w	r1, r3, #31
 80006e2:	68bb      	ldr	r3, [r7, #8]
 80006e4:	f003 031f 	and.w	r3, r3, #31
 80006e8:	fa01 f303 	lsl.w	r3, r1, r3
 80006ec:	4313      	orrs	r3, r2
 80006ee:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80006f0:	bf00      	nop
 80006f2:	3710      	adds	r7, #16
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bc90      	pop	{r4, r7}
 80006f8:	4770      	bx	lr

080006fa <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80006fa:	b490      	push	{r4, r7}
 80006fc:	b084      	sub	sp, #16
 80006fe:	af00      	add	r7, sp, #0
 8000700:	60f8      	str	r0, [r7, #12]
 8000702:	60b9      	str	r1, [r7, #8]
 8000704:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	3314      	adds	r3, #20
 800070a:	461a      	mov	r2, r3
 800070c:	68bb      	ldr	r3, [r7, #8]
 800070e:	0e5b      	lsrs	r3, r3, #25
 8000710:	009b      	lsls	r3, r3, #2
 8000712:	f003 0304 	and.w	r3, r3, #4
 8000716:	4413      	add	r3, r2
 8000718:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800071a:	6822      	ldr	r2, [r4, #0]
 800071c:	68bb      	ldr	r3, [r7, #8]
 800071e:	0d1b      	lsrs	r3, r3, #20
 8000720:	f003 031f 	and.w	r3, r3, #31
 8000724:	2107      	movs	r1, #7
 8000726:	fa01 f303 	lsl.w	r3, r1, r3
 800072a:	43db      	mvns	r3, r3
 800072c:	401a      	ands	r2, r3
 800072e:	68bb      	ldr	r3, [r7, #8]
 8000730:	0d1b      	lsrs	r3, r3, #20
 8000732:	f003 031f 	and.w	r3, r3, #31
 8000736:	6879      	ldr	r1, [r7, #4]
 8000738:	fa01 f303 	lsl.w	r3, r1, r3
 800073c:	4313      	orrs	r3, r2
 800073e:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000740:	bf00      	nop
 8000742:	3710      	adds	r7, #16
 8000744:	46bd      	mov	sp, r7
 8000746:	bc90      	pop	{r4, r7}
 8000748:	4770      	bx	lr
	...

0800074c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800074c:	b480      	push	{r7}
 800074e:	b085      	sub	sp, #20
 8000750:	af00      	add	r7, sp, #0
 8000752:	60f8      	str	r0, [r7, #12]
 8000754:	60b9      	str	r1, [r7, #8]
 8000756:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800075e:	68bb      	ldr	r3, [r7, #8]
 8000760:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000764:	43db      	mvns	r3, r3
 8000766:	401a      	ands	r2, r3
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	f003 0318 	and.w	r3, r3, #24
 800076e:	4908      	ldr	r1, [pc, #32]	; (8000790 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000770:	40d9      	lsrs	r1, r3
 8000772:	68bb      	ldr	r3, [r7, #8]
 8000774:	400b      	ands	r3, r1
 8000776:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800077a:	431a      	orrs	r2, r3
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000782:	bf00      	nop
 8000784:	3714      	adds	r7, #20
 8000786:	46bd      	mov	sp, r7
 8000788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop
 8000790:	0007ffff 	.word	0x0007ffff

08000794 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000794:	b480      	push	{r7}
 8000796:	b083      	sub	sp, #12
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	689b      	ldr	r3, [r3, #8]
 80007a0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80007a4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80007a8:	687a      	ldr	r2, [r7, #4]
 80007aa:	6093      	str	r3, [r2, #8]
}
 80007ac:	bf00      	nop
 80007ae:	370c      	adds	r7, #12
 80007b0:	46bd      	mov	sp, r7
 80007b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b6:	4770      	bx	lr

080007b8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	689b      	ldr	r3, [r3, #8]
 80007c4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80007c8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80007cc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80007d4:	bf00      	nop
 80007d6:	370c      	adds	r7, #12
 80007d8:	46bd      	mov	sp, r7
 80007da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007de:	4770      	bx	lr

080007e0 <LL_ADC_DisableIT_EOC>:
  * @rmtoll IER      EOCIE          LL_ADC_DisableIT_EOC
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b083      	sub	sp, #12
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	685b      	ldr	r3, [r3, #4]
 80007ec:	f023 0204 	bic.w	r2, r3, #4
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	605a      	str	r2, [r3, #4]
}
 80007f4:	bf00      	nop
 80007f6:	370c      	adds	r7, #12
 80007f8:	46bd      	mov	sp, r7
 80007fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fe:	4770      	bx	lr

08000800 <LL_ADC_DisableIT_EOS>:
  * @rmtoll IER      EOSIE          LL_ADC_DisableIT_EOS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOS(ADC_TypeDef *ADCx)
{
 8000800:	b480      	push	{r7}
 8000802:	b083      	sub	sp, #12
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOS);
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	685b      	ldr	r3, [r3, #4]
 800080c:	f023 0208 	bic.w	r2, r3, #8
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	605a      	str	r2, [r3, #4]
}
 8000814:	bf00      	nop
 8000816:	370c      	adds	r7, #12
 8000818:	46bd      	mov	sp, r7
 800081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081e:	4770      	bx	lr

08000820 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000824:	4b05      	ldr	r3, [pc, #20]	; (800083c <LL_RCC_HSI_Enable+0x1c>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a04      	ldr	r2, [pc, #16]	; (800083c <LL_RCC_HSI_Enable+0x1c>)
 800082a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800082e:	6013      	str	r3, [r2, #0]
}
 8000830:	bf00      	nop
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	40021000 	.word	0x40021000

08000840 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8000844:	4b07      	ldr	r3, [pc, #28]	; (8000864 <LL_RCC_HSI_IsReady+0x24>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800084c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000850:	d101      	bne.n	8000856 <LL_RCC_HSI_IsReady+0x16>
 8000852:	2301      	movs	r3, #1
 8000854:	e000      	b.n	8000858 <LL_RCC_HSI_IsReady+0x18>
 8000856:	2300      	movs	r3, #0
}
 8000858:	4618      	mov	r0, r3
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	40021000 	.word	0x40021000

08000868 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 31
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000868:	b480      	push	{r7}
 800086a:	b083      	sub	sp, #12
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8000870:	4b07      	ldr	r3, [pc, #28]	; (8000890 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000872:	685b      	ldr	r3, [r3, #4]
 8000874:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	061b      	lsls	r3, r3, #24
 800087c:	4904      	ldr	r1, [pc, #16]	; (8000890 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800087e:	4313      	orrs	r3, r2
 8000880:	604b      	str	r3, [r1, #4]
}
 8000882:	bf00      	nop
 8000884:	370c      	adds	r7, #12
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr
 800088e:	bf00      	nop
 8000890:	40021000 	.word	0x40021000

08000894 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000894:	b480      	push	{r7}
 8000896:	b083      	sub	sp, #12
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800089c:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <LL_RCC_SetSysClkSource+0x24>)
 800089e:	689b      	ldr	r3, [r3, #8]
 80008a0:	f023 0203 	bic.w	r2, r3, #3
 80008a4:	4904      	ldr	r1, [pc, #16]	; (80008b8 <LL_RCC_SetSysClkSource+0x24>)
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	4313      	orrs	r3, r2
 80008aa:	608b      	str	r3, [r1, #8]
}
 80008ac:	bf00      	nop
 80008ae:	370c      	adds	r7, #12
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr
 80008b8:	40021000 	.word	0x40021000

080008bc <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80008c0:	4b04      	ldr	r3, [pc, #16]	; (80008d4 <LL_RCC_GetSysClkSource+0x18>)
 80008c2:	689b      	ldr	r3, [r3, #8]
 80008c4:	f003 030c 	and.w	r3, r3, #12
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop
 80008d4:	40021000 	.word	0x40021000

080008d8 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80008d8:	b480      	push	{r7}
 80008da:	b083      	sub	sp, #12
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80008e0:	4b06      	ldr	r3, [pc, #24]	; (80008fc <LL_RCC_SetAHBPrescaler+0x24>)
 80008e2:	689b      	ldr	r3, [r3, #8]
 80008e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80008e8:	4904      	ldr	r1, [pc, #16]	; (80008fc <LL_RCC_SetAHBPrescaler+0x24>)
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	4313      	orrs	r3, r2
 80008ee:	608b      	str	r3, [r1, #8]
}
 80008f0:	bf00      	nop
 80008f2:	370c      	adds	r7, #12
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr
 80008fc:	40021000 	.word	0x40021000

08000900 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000900:	b480      	push	{r7}
 8000902:	b083      	sub	sp, #12
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000908:	4b06      	ldr	r3, [pc, #24]	; (8000924 <LL_RCC_SetAPB1Prescaler+0x24>)
 800090a:	689b      	ldr	r3, [r3, #8]
 800090c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000910:	4904      	ldr	r1, [pc, #16]	; (8000924 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	4313      	orrs	r3, r2
 8000916:	608b      	str	r3, [r1, #8]
}
 8000918:	bf00      	nop
 800091a:	370c      	adds	r7, #12
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr
 8000924:	40021000 	.word	0x40021000

08000928 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000930:	4b06      	ldr	r3, [pc, #24]	; (800094c <LL_RCC_SetAPB2Prescaler+0x24>)
 8000932:	689b      	ldr	r3, [r3, #8]
 8000934:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000938:	4904      	ldr	r1, [pc, #16]	; (800094c <LL_RCC_SetAPB2Prescaler+0x24>)
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	4313      	orrs	r3, r2
 800093e:	608b      	str	r3, [r1, #8]
}
 8000940:	bf00      	nop
 8000942:	370c      	adds	r7, #12
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr
 800094c:	40021000 	.word	0x40021000

08000950 <LL_RCC_SetUSARTClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSARTClockSource(uint32_t USARTxSource)
{
 8000950:	b480      	push	{r7}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 8000958:	4b09      	ldr	r3, [pc, #36]	; (8000980 <LL_RCC_SetUSARTClockSource+0x30>)
 800095a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	0c1b      	lsrs	r3, r3, #16
 8000962:	43db      	mvns	r3, r3
 8000964:	401a      	ands	r2, r3
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	b29b      	uxth	r3, r3
 800096a:	4905      	ldr	r1, [pc, #20]	; (8000980 <LL_RCC_SetUSARTClockSource+0x30>)
 800096c:	4313      	orrs	r3, r2
 800096e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8000972:	bf00      	nop
 8000974:	370c      	adds	r7, #12
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	40021000 	.word	0x40021000

08000984 <LL_RCC_SetADCClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetADCClockSource(uint32_t ADCxSource)
{
 8000984:	b480      	push	{r7}
 8000986:	b083      	sub	sp, #12
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800098c:	4b07      	ldr	r3, [pc, #28]	; (80009ac <LL_RCC_SetADCClockSource+0x28>)
 800098e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000992:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8000996:	4905      	ldr	r1, [pc, #20]	; (80009ac <LL_RCC_SetADCClockSource+0x28>)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	4313      	orrs	r3, r2
 800099c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80009a0:	bf00      	nop
 80009a2:	370c      	adds	r7, #12
 80009a4:	46bd      	mov	sp, r7
 80009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009aa:	4770      	bx	lr
 80009ac:	40021000 	.word	0x40021000

080009b0 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80009b4:	4b05      	ldr	r3, [pc, #20]	; (80009cc <LL_RCC_PLL_Enable+0x1c>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a04      	ldr	r2, [pc, #16]	; (80009cc <LL_RCC_PLL_Enable+0x1c>)
 80009ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80009be:	6013      	str	r3, [r2, #0]
}
 80009c0:	bf00      	nop
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	40021000 	.word	0x40021000

080009d0 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 80009d4:	4b07      	ldr	r3, [pc, #28]	; (80009f4 <LL_RCC_PLL_IsReady+0x24>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80009dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80009e0:	d101      	bne.n	80009e6 <LL_RCC_PLL_IsReady+0x16>
 80009e2:	2301      	movs	r3, #1
 80009e4:	e000      	b.n	80009e8 <LL_RCC_PLL_IsReady+0x18>
 80009e6:	2300      	movs	r3, #0
}
 80009e8:	4618      	mov	r0, r3
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	40021000 	.word	0x40021000

080009f8 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b085      	sub	sp, #20
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	60f8      	str	r0, [r7, #12]
 8000a00:	60b9      	str	r1, [r7, #8]
 8000a02:	607a      	str	r2, [r7, #4]
 8000a04:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 8000a06:	4b0a      	ldr	r3, [pc, #40]	; (8000a30 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8000a08:	68da      	ldr	r2, [r3, #12]
 8000a0a:	4b0a      	ldr	r3, [pc, #40]	; (8000a34 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 8000a0c:	4013      	ands	r3, r2
 8000a0e:	68f9      	ldr	r1, [r7, #12]
 8000a10:	68ba      	ldr	r2, [r7, #8]
 8000a12:	4311      	orrs	r1, r2
 8000a14:	687a      	ldr	r2, [r7, #4]
 8000a16:	0212      	lsls	r2, r2, #8
 8000a18:	4311      	orrs	r1, r2
 8000a1a:	683a      	ldr	r2, [r7, #0]
 8000a1c:	430a      	orrs	r2, r1
 8000a1e:	4904      	ldr	r1, [pc, #16]	; (8000a30 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8000a20:	4313      	orrs	r3, r2
 8000a22:	60cb      	str	r3, [r1, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 8000a24:	bf00      	nop
 8000a26:	3714      	adds	r7, #20
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr
 8000a30:	40021000 	.word	0x40021000
 8000a34:	f9ff808c 	.word	0xf9ff808c

08000a38 <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8000a3c:	4b05      	ldr	r3, [pc, #20]	; (8000a54 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8000a3e:	68db      	ldr	r3, [r3, #12]
 8000a40:	4a04      	ldr	r2, [pc, #16]	; (8000a54 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8000a42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000a46:	60d3      	str	r3, [r2, #12]
}
 8000a48:	bf00      	nop
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	40021000 	.word	0x40021000

08000a58 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b085      	sub	sp, #20
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000a60:	4b08      	ldr	r3, [pc, #32]	; (8000a84 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000a62:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000a64:	4907      	ldr	r1, [pc, #28]	; (8000a84 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	4313      	orrs	r3, r2
 8000a6a:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000a6c:	4b05      	ldr	r3, [pc, #20]	; (8000a84 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000a6e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	4013      	ands	r3, r2
 8000a74:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a76:	68fb      	ldr	r3, [r7, #12]
}
 8000a78:	bf00      	nop
 8000a7a:	3714      	adds	r7, #20
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr
 8000a84:	40021000 	.word	0x40021000

08000a88 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b085      	sub	sp, #20
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000a90:	4b08      	ldr	r3, [pc, #32]	; (8000ab4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000a92:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000a94:	4907      	ldr	r1, [pc, #28]	; (8000ab4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	4313      	orrs	r3, r2
 8000a9a:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000a9c:	4b05      	ldr	r3, [pc, #20]	; (8000ab4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000a9e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	4013      	ands	r3, r2
 8000aa4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000aa6:	68fb      	ldr	r3, [r7, #12]
}
 8000aa8:	bf00      	nop
 8000aaa:	3714      	adds	r7, #20
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr
 8000ab4:	40021000 	.word	0x40021000

08000ab8 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b085      	sub	sp, #20
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000ac0:	4b08      	ldr	r3, [pc, #32]	; (8000ae4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000ac2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000ac4:	4907      	ldr	r1, [pc, #28]	; (8000ae4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	4313      	orrs	r3, r2
 8000aca:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000acc:	4b05      	ldr	r3, [pc, #20]	; (8000ae4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000ace:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	4013      	ands	r3, r2
 8000ad4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ad6:	68fb      	ldr	r3, [r7, #12]
}
 8000ad8:	bf00      	nop
 8000ada:	3714      	adds	r7, #20
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr
 8000ae4:	40021000 	.word	0x40021000

08000ae8 <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000af0:	4b06      	ldr	r3, [pc, #24]	; (8000b0c <LL_FLASH_SetLatency+0x24>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	f023 0207 	bic.w	r2, r3, #7
 8000af8:	4904      	ldr	r1, [pc, #16]	; (8000b0c <LL_FLASH_SetLatency+0x24>)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	4313      	orrs	r3, r2
 8000afe:	600b      	str	r3, [r1, #0]
}
 8000b00:	bf00      	nop
 8000b02:	370c      	adds	r7, #12
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr
 8000b0c:	40022000 	.word	0x40022000

08000b10 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_15 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000b14:	4b04      	ldr	r3, [pc, #16]	; (8000b28 <LL_FLASH_GetLatency+0x18>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	f003 0307 	and.w	r3, r3, #7
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	40022000 	.word	0x40022000

08000b2c <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000b34:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8000b3c:	4904      	ldr	r1, [pc, #16]	; (8000b50 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	4313      	orrs	r3, r2
 8000b42:	600b      	str	r3, [r1, #0]
}
 8000b44:	bf00      	nop
 8000b46:	370c      	adds	r7, #12
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr
 8000b50:	40007000 	.word	0x40007000

08000b54 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b083      	sub	sp, #12
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
 8000b5c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	f023 0210 	bic.w	r2, r3, #16
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	431a      	orrs	r2, r3
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	605a      	str	r2, [r3, #4]
}
 8000b6e:	bf00      	nop
 8000b70:	370c      	adds	r7, #12
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr

08000b7a <LL_SPI_EnableNSSPulseMgt>:
  * @rmtoll CR2          NSSP          LL_SPI_EnableNSSPulseMgt
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_EnableNSSPulseMgt(SPI_TypeDef *SPIx)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	b083      	sub	sp, #12
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_NSSP);
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	685b      	ldr	r3, [r3, #4]
 8000b86:	f043 0208 	orr.w	r2, r3, #8
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	605a      	str	r2, [r3, #4]
}
 8000b8e:	bf00      	nop
 8000b90:	370c      	adds	r7, #12
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr

08000b9a <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8000b9a:	b480      	push	{r7}
 8000b9c:	b083      	sub	sp, #12
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	f043 0201 	orr.w	r2, r3, #1
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	601a      	str	r2, [r3, #0]
}
 8000bae:	bf00      	nop
 8000bb0:	370c      	adds	r7, #12
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr

08000bba <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 8000bba:	b480      	push	{r7}
 8000bbc:	b083      	sub	sp, #12
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	601a      	str	r2, [r3, #0]
}
 8000bce:	bf00      	nop
 8000bd0:	370c      	adds	r7, #12
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
	...

08000bdc <LL_TIM_IC_SetActiveInput>:
  *         @arg @ref LL_TIM_ACTIVEINPUT_INDIRECTTI
  *         @arg @ref LL_TIM_ACTIVEINPUT_TRC
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetActiveInput(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICActiveInput)
{
 8000bdc:	b4b0      	push	{r4, r5, r7}
 8000bde:	b085      	sub	sp, #20
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	60f8      	str	r0, [r7, #12]
 8000be4:	60b9      	str	r1, [r7, #8]
 8000be6:	607a      	str	r2, [r7, #4]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	2b01      	cmp	r3, #1
 8000bec:	d028      	beq.n	8000c40 <LL_TIM_IC_SetActiveInput+0x64>
 8000bee:	68bb      	ldr	r3, [r7, #8]
 8000bf0:	2b04      	cmp	r3, #4
 8000bf2:	d023      	beq.n	8000c3c <LL_TIM_IC_SetActiveInput+0x60>
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	2b10      	cmp	r3, #16
 8000bf8:	d01e      	beq.n	8000c38 <LL_TIM_IC_SetActiveInput+0x5c>
 8000bfa:	68bb      	ldr	r3, [r7, #8]
 8000bfc:	2b40      	cmp	r3, #64	; 0x40
 8000bfe:	d019      	beq.n	8000c34 <LL_TIM_IC_SetActiveInput+0x58>
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c06:	d013      	beq.n	8000c30 <LL_TIM_IC_SetActiveInput+0x54>
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c0e:	d00d      	beq.n	8000c2c <LL_TIM_IC_SetActiveInput+0x50>
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000c16:	d007      	beq.n	8000c28 <LL_TIM_IC_SetActiveInput+0x4c>
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c1e:	d101      	bne.n	8000c24 <LL_TIM_IC_SetActiveInput+0x48>
 8000c20:	2307      	movs	r3, #7
 8000c22:	e00e      	b.n	8000c42 <LL_TIM_IC_SetActiveInput+0x66>
 8000c24:	2308      	movs	r3, #8
 8000c26:	e00c      	b.n	8000c42 <LL_TIM_IC_SetActiveInput+0x66>
 8000c28:	2306      	movs	r3, #6
 8000c2a:	e00a      	b.n	8000c42 <LL_TIM_IC_SetActiveInput+0x66>
 8000c2c:	2305      	movs	r3, #5
 8000c2e:	e008      	b.n	8000c42 <LL_TIM_IC_SetActiveInput+0x66>
 8000c30:	2304      	movs	r3, #4
 8000c32:	e006      	b.n	8000c42 <LL_TIM_IC_SetActiveInput+0x66>
 8000c34:	2303      	movs	r3, #3
 8000c36:	e004      	b.n	8000c42 <LL_TIM_IC_SetActiveInput+0x66>
 8000c38:	2302      	movs	r3, #2
 8000c3a:	e002      	b.n	8000c42 <LL_TIM_IC_SetActiveInput+0x66>
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	e000      	b.n	8000c42 <LL_TIM_IC_SetActiveInput+0x66>
 8000c40:	2300      	movs	r3, #0
 8000c42:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	3318      	adds	r3, #24
 8000c48:	461a      	mov	r2, r3
 8000c4a:	4629      	mov	r1, r5
 8000c4c:	4b0c      	ldr	r3, [pc, #48]	; (8000c80 <LL_TIM_IC_SetActiveInput+0xa4>)
 8000c4e:	5c5b      	ldrb	r3, [r3, r1]
 8000c50:	4413      	add	r3, r2
 8000c52:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChannel]), (ICActiveInput >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8000c54:	6822      	ldr	r2, [r4, #0]
 8000c56:	4629      	mov	r1, r5
 8000c58:	4b0a      	ldr	r3, [pc, #40]	; (8000c84 <LL_TIM_IC_SetActiveInput+0xa8>)
 8000c5a:	5c5b      	ldrb	r3, [r3, r1]
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	2303      	movs	r3, #3
 8000c60:	408b      	lsls	r3, r1
 8000c62:	43db      	mvns	r3, r3
 8000c64:	401a      	ands	r2, r3
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	0c1b      	lsrs	r3, r3, #16
 8000c6a:	4628      	mov	r0, r5
 8000c6c:	4905      	ldr	r1, [pc, #20]	; (8000c84 <LL_TIM_IC_SetActiveInput+0xa8>)
 8000c6e:	5c09      	ldrb	r1, [r1, r0]
 8000c70:	408b      	lsls	r3, r1
 8000c72:	4313      	orrs	r3, r2
 8000c74:	6023      	str	r3, [r4, #0]
}
 8000c76:	bf00      	nop
 8000c78:	3714      	adds	r7, #20
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bcb0      	pop	{r4, r5, r7}
 8000c7e:	4770      	bx	lr
 8000c80:	080043cc 	.word	0x080043cc
 8000c84:	080043d8 	.word	0x080043d8

08000c88 <LL_TIM_IC_SetPrescaler>:
  *         @arg @ref LL_TIM_ICPSC_DIV4
  *         @arg @ref LL_TIM_ICPSC_DIV8
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICPrescaler)
{
 8000c88:	b4b0      	push	{r4, r5, r7}
 8000c8a:	b085      	sub	sp, #20
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	60f8      	str	r0, [r7, #12]
 8000c90:	60b9      	str	r1, [r7, #8]
 8000c92:	607a      	str	r2, [r7, #4]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	2b01      	cmp	r3, #1
 8000c98:	d028      	beq.n	8000cec <LL_TIM_IC_SetPrescaler+0x64>
 8000c9a:	68bb      	ldr	r3, [r7, #8]
 8000c9c:	2b04      	cmp	r3, #4
 8000c9e:	d023      	beq.n	8000ce8 <LL_TIM_IC_SetPrescaler+0x60>
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	2b10      	cmp	r3, #16
 8000ca4:	d01e      	beq.n	8000ce4 <LL_TIM_IC_SetPrescaler+0x5c>
 8000ca6:	68bb      	ldr	r3, [r7, #8]
 8000ca8:	2b40      	cmp	r3, #64	; 0x40
 8000caa:	d019      	beq.n	8000ce0 <LL_TIM_IC_SetPrescaler+0x58>
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000cb2:	d013      	beq.n	8000cdc <LL_TIM_IC_SetPrescaler+0x54>
 8000cb4:	68bb      	ldr	r3, [r7, #8]
 8000cb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000cba:	d00d      	beq.n	8000cd8 <LL_TIM_IC_SetPrescaler+0x50>
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000cc2:	d007      	beq.n	8000cd4 <LL_TIM_IC_SetPrescaler+0x4c>
 8000cc4:	68bb      	ldr	r3, [r7, #8]
 8000cc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cca:	d101      	bne.n	8000cd0 <LL_TIM_IC_SetPrescaler+0x48>
 8000ccc:	2307      	movs	r3, #7
 8000cce:	e00e      	b.n	8000cee <LL_TIM_IC_SetPrescaler+0x66>
 8000cd0:	2308      	movs	r3, #8
 8000cd2:	e00c      	b.n	8000cee <LL_TIM_IC_SetPrescaler+0x66>
 8000cd4:	2306      	movs	r3, #6
 8000cd6:	e00a      	b.n	8000cee <LL_TIM_IC_SetPrescaler+0x66>
 8000cd8:	2305      	movs	r3, #5
 8000cda:	e008      	b.n	8000cee <LL_TIM_IC_SetPrescaler+0x66>
 8000cdc:	2304      	movs	r3, #4
 8000cde:	e006      	b.n	8000cee <LL_TIM_IC_SetPrescaler+0x66>
 8000ce0:	2303      	movs	r3, #3
 8000ce2:	e004      	b.n	8000cee <LL_TIM_IC_SetPrescaler+0x66>
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	e002      	b.n	8000cee <LL_TIM_IC_SetPrescaler+0x66>
 8000ce8:	2301      	movs	r3, #1
 8000cea:	e000      	b.n	8000cee <LL_TIM_IC_SetPrescaler+0x66>
 8000cec:	2300      	movs	r3, #0
 8000cee:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	3318      	adds	r3, #24
 8000cf4:	461a      	mov	r2, r3
 8000cf6:	4629      	mov	r1, r5
 8000cf8:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <LL_TIM_IC_SetPrescaler+0xa4>)
 8000cfa:	5c5b      	ldrb	r3, [r3, r1]
 8000cfc:	4413      	add	r3, r2
 8000cfe:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1PSC) << SHIFT_TAB_ICxx[iChannel]), (ICPrescaler >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8000d00:	6822      	ldr	r2, [r4, #0]
 8000d02:	4629      	mov	r1, r5
 8000d04:	4b0a      	ldr	r3, [pc, #40]	; (8000d30 <LL_TIM_IC_SetPrescaler+0xa8>)
 8000d06:	5c5b      	ldrb	r3, [r3, r1]
 8000d08:	4619      	mov	r1, r3
 8000d0a:	230c      	movs	r3, #12
 8000d0c:	408b      	lsls	r3, r1
 8000d0e:	43db      	mvns	r3, r3
 8000d10:	401a      	ands	r2, r3
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	0c1b      	lsrs	r3, r3, #16
 8000d16:	4628      	mov	r0, r5
 8000d18:	4905      	ldr	r1, [pc, #20]	; (8000d30 <LL_TIM_IC_SetPrescaler+0xa8>)
 8000d1a:	5c09      	ldrb	r1, [r1, r0]
 8000d1c:	408b      	lsls	r3, r1
 8000d1e:	4313      	orrs	r3, r2
 8000d20:	6023      	str	r3, [r4, #0]
}
 8000d22:	bf00      	nop
 8000d24:	3714      	adds	r7, #20
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bcb0      	pop	{r4, r5, r7}
 8000d2a:	4770      	bx	lr
 8000d2c:	080043cc 	.word	0x080043cc
 8000d30:	080043d8 	.word	0x080043d8

08000d34 <LL_TIM_IC_SetFilter>:
  *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N6
  *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N8
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetFilter(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICFilter)
{
 8000d34:	b4b0      	push	{r4, r5, r7}
 8000d36:	b085      	sub	sp, #20
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	60f8      	str	r0, [r7, #12]
 8000d3c:	60b9      	str	r1, [r7, #8]
 8000d3e:	607a      	str	r2, [r7, #4]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	2b01      	cmp	r3, #1
 8000d44:	d028      	beq.n	8000d98 <LL_TIM_IC_SetFilter+0x64>
 8000d46:	68bb      	ldr	r3, [r7, #8]
 8000d48:	2b04      	cmp	r3, #4
 8000d4a:	d023      	beq.n	8000d94 <LL_TIM_IC_SetFilter+0x60>
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	2b10      	cmp	r3, #16
 8000d50:	d01e      	beq.n	8000d90 <LL_TIM_IC_SetFilter+0x5c>
 8000d52:	68bb      	ldr	r3, [r7, #8]
 8000d54:	2b40      	cmp	r3, #64	; 0x40
 8000d56:	d019      	beq.n	8000d8c <LL_TIM_IC_SetFilter+0x58>
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d5e:	d013      	beq.n	8000d88 <LL_TIM_IC_SetFilter+0x54>
 8000d60:	68bb      	ldr	r3, [r7, #8]
 8000d62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d66:	d00d      	beq.n	8000d84 <LL_TIM_IC_SetFilter+0x50>
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000d6e:	d007      	beq.n	8000d80 <LL_TIM_IC_SetFilter+0x4c>
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d76:	d101      	bne.n	8000d7c <LL_TIM_IC_SetFilter+0x48>
 8000d78:	2307      	movs	r3, #7
 8000d7a:	e00e      	b.n	8000d9a <LL_TIM_IC_SetFilter+0x66>
 8000d7c:	2308      	movs	r3, #8
 8000d7e:	e00c      	b.n	8000d9a <LL_TIM_IC_SetFilter+0x66>
 8000d80:	2306      	movs	r3, #6
 8000d82:	e00a      	b.n	8000d9a <LL_TIM_IC_SetFilter+0x66>
 8000d84:	2305      	movs	r3, #5
 8000d86:	e008      	b.n	8000d9a <LL_TIM_IC_SetFilter+0x66>
 8000d88:	2304      	movs	r3, #4
 8000d8a:	e006      	b.n	8000d9a <LL_TIM_IC_SetFilter+0x66>
 8000d8c:	2303      	movs	r3, #3
 8000d8e:	e004      	b.n	8000d9a <LL_TIM_IC_SetFilter+0x66>
 8000d90:	2302      	movs	r3, #2
 8000d92:	e002      	b.n	8000d9a <LL_TIM_IC_SetFilter+0x66>
 8000d94:	2301      	movs	r3, #1
 8000d96:	e000      	b.n	8000d9a <LL_TIM_IC_SetFilter+0x66>
 8000d98:	2300      	movs	r3, #0
 8000d9a:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	3318      	adds	r3, #24
 8000da0:	461a      	mov	r2, r3
 8000da2:	4629      	mov	r1, r5
 8000da4:	4b0c      	ldr	r3, [pc, #48]	; (8000dd8 <LL_TIM_IC_SetFilter+0xa4>)
 8000da6:	5c5b      	ldrb	r3, [r3, r1]
 8000da8:	4413      	add	r3, r2
 8000daa:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8000dac:	6822      	ldr	r2, [r4, #0]
 8000dae:	4629      	mov	r1, r5
 8000db0:	4b0a      	ldr	r3, [pc, #40]	; (8000ddc <LL_TIM_IC_SetFilter+0xa8>)
 8000db2:	5c5b      	ldrb	r3, [r3, r1]
 8000db4:	4619      	mov	r1, r3
 8000db6:	23f0      	movs	r3, #240	; 0xf0
 8000db8:	408b      	lsls	r3, r1
 8000dba:	43db      	mvns	r3, r3
 8000dbc:	401a      	ands	r2, r3
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	0c1b      	lsrs	r3, r3, #16
 8000dc2:	4628      	mov	r0, r5
 8000dc4:	4905      	ldr	r1, [pc, #20]	; (8000ddc <LL_TIM_IC_SetFilter+0xa8>)
 8000dc6:	5c09      	ldrb	r1, [r1, r0]
 8000dc8:	408b      	lsls	r3, r1
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	6023      	str	r3, [r4, #0]
}
 8000dce:	bf00      	nop
 8000dd0:	3714      	adds	r7, #20
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bcb0      	pop	{r4, r5, r7}
 8000dd6:	4770      	bx	lr
 8000dd8:	080043cc 	.word	0x080043cc
 8000ddc:	080043d8 	.word	0x080043d8

08000de0 <LL_TIM_IC_SetPolarity>:
  *         @arg @ref LL_TIM_IC_POLARITY_FALLING
  *         @arg @ref LL_TIM_IC_POLARITY_BOTHEDGE
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetPolarity(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICPolarity)
{
 8000de0:	b490      	push	{r4, r7}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	60f8      	str	r0, [r7, #12]
 8000de8:	60b9      	str	r1, [r7, #8]
 8000dea:	607a      	str	r2, [r7, #4]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	2b01      	cmp	r3, #1
 8000df0:	d028      	beq.n	8000e44 <LL_TIM_IC_SetPolarity+0x64>
 8000df2:	68bb      	ldr	r3, [r7, #8]
 8000df4:	2b04      	cmp	r3, #4
 8000df6:	d023      	beq.n	8000e40 <LL_TIM_IC_SetPolarity+0x60>
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	2b10      	cmp	r3, #16
 8000dfc:	d01e      	beq.n	8000e3c <LL_TIM_IC_SetPolarity+0x5c>
 8000dfe:	68bb      	ldr	r3, [r7, #8]
 8000e00:	2b40      	cmp	r3, #64	; 0x40
 8000e02:	d019      	beq.n	8000e38 <LL_TIM_IC_SetPolarity+0x58>
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000e0a:	d013      	beq.n	8000e34 <LL_TIM_IC_SetPolarity+0x54>
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e12:	d00d      	beq.n	8000e30 <LL_TIM_IC_SetPolarity+0x50>
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000e1a:	d007      	beq.n	8000e2c <LL_TIM_IC_SetPolarity+0x4c>
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e22:	d101      	bne.n	8000e28 <LL_TIM_IC_SetPolarity+0x48>
 8000e24:	2307      	movs	r3, #7
 8000e26:	e00e      	b.n	8000e46 <LL_TIM_IC_SetPolarity+0x66>
 8000e28:	2308      	movs	r3, #8
 8000e2a:	e00c      	b.n	8000e46 <LL_TIM_IC_SetPolarity+0x66>
 8000e2c:	2306      	movs	r3, #6
 8000e2e:	e00a      	b.n	8000e46 <LL_TIM_IC_SetPolarity+0x66>
 8000e30:	2305      	movs	r3, #5
 8000e32:	e008      	b.n	8000e46 <LL_TIM_IC_SetPolarity+0x66>
 8000e34:	2304      	movs	r3, #4
 8000e36:	e006      	b.n	8000e46 <LL_TIM_IC_SetPolarity+0x66>
 8000e38:	2303      	movs	r3, #3
 8000e3a:	e004      	b.n	8000e46 <LL_TIM_IC_SetPolarity+0x66>
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	e002      	b.n	8000e46 <LL_TIM_IC_SetPolarity+0x66>
 8000e40:	2301      	movs	r3, #1
 8000e42:	e000      	b.n	8000e46 <LL_TIM_IC_SetPolarity+0x66>
 8000e44:	2300      	movs	r3, #0
 8000e46:	461c      	mov	r4, r3
  MODIFY_REG(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel]),
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	6a1a      	ldr	r2, [r3, #32]
 8000e4c:	4621      	mov	r1, r4
 8000e4e:	4b0a      	ldr	r3, [pc, #40]	; (8000e78 <LL_TIM_IC_SetPolarity+0x98>)
 8000e50:	5c5b      	ldrb	r3, [r3, r1]
 8000e52:	4619      	mov	r1, r3
 8000e54:	230a      	movs	r3, #10
 8000e56:	408b      	lsls	r3, r1
 8000e58:	43db      	mvns	r3, r3
 8000e5a:	401a      	ands	r2, r3
 8000e5c:	4621      	mov	r1, r4
 8000e5e:	4b06      	ldr	r3, [pc, #24]	; (8000e78 <LL_TIM_IC_SetPolarity+0x98>)
 8000e60:	5c5b      	ldrb	r3, [r3, r1]
 8000e62:	4619      	mov	r1, r3
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	408b      	lsls	r3, r1
 8000e68:	431a      	orrs	r2, r3
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	621a      	str	r2, [r3, #32]
             ICPolarity << SHIFT_TAB_CCxP[iChannel]);
}
 8000e6e:	bf00      	nop
 8000e70:	3710      	adds	r7, #16
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bc90      	pop	{r4, r7}
 8000e76:	4770      	bx	lr
 8000e78:	080043e4 	.word	0x080043e4

08000e7c <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	689b      	ldr	r3, [r3, #8]
 8000e8a:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8000e8e:	f023 0307 	bic.w	r3, r3, #7
 8000e92:	683a      	ldr	r2, [r7, #0]
 8000e94:	431a      	orrs	r2, r3
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	609a      	str	r2, [r3, #8]
}
 8000e9a:	bf00      	nop
 8000e9c:	370c      	adds	r7, #12
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr

08000ea6 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8000ea6:	b480      	push	{r7}
 8000ea8:	b083      	sub	sp, #12
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	6078      	str	r0, [r7, #4]
 8000eae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	431a      	orrs	r2, r3
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	605a      	str	r2, [r3, #4]
}
 8000ec0:	bf00      	nop
 8000ec2:	370c      	adds	r7, #12
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr

08000ecc <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	689b      	ldr	r3, [r3, #8]
 8000ed8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	609a      	str	r2, [r3, #8]
}
 8000ee0:	bf00      	nop
 8000ee2:	370c      	adds	r7, #12
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr

08000eec <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
 8000ef4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	683a      	ldr	r2, [r7, #0]
 8000efa:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000efc:	bf00      	nop
 8000efe:	370c      	adds	r7, #12
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr

08000f08 <__io_putchar>:
#define INC_PRINTF_RETARGET_H_

#endif /* INC_PRINTF_RETARGET_H_ */

/* (Re)Define stdio functionality, so printf would output to USART1 */
int __io_putchar(int ch) {
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
 uint8_t c[1];
 c[0] = ch & 0x00FF;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	733b      	strb	r3, [r7, #12]
 HAL_UART_Transmit(&huart2, &c[0], 1, 10);
 8000f16:	f107 010c 	add.w	r1, r7, #12
 8000f1a:	230a      	movs	r3, #10
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	4804      	ldr	r0, [pc, #16]	; (8000f30 <__io_putchar+0x28>)
 8000f20:	f001 f8d8 	bl	80020d4 <HAL_UART_Transmit>
 return ch;
 8000f24:	687b      	ldr	r3, [r7, #4]
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3710      	adds	r7, #16
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	200000b4 	.word	0x200000b4

08000f34 <_write>:

int _write(int file,char *ptr, int len) {
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b086      	sub	sp, #24
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	60f8      	str	r0, [r7, #12]
 8000f3c:	60b9      	str	r1, [r7, #8]
 8000f3e:	607a      	str	r2, [r7, #4]
 int DataIdx;
 for(DataIdx= 0; DataIdx< len; DataIdx++) {
 8000f40:	2300      	movs	r3, #0
 8000f42:	617b      	str	r3, [r7, #20]
 8000f44:	e009      	b.n	8000f5a <_write+0x26>
  __io_putchar(*ptr++);
 8000f46:	68bb      	ldr	r3, [r7, #8]
 8000f48:	1c5a      	adds	r2, r3, #1
 8000f4a:	60ba      	str	r2, [r7, #8]
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f7ff ffda 	bl	8000f08 <__io_putchar>
 for(DataIdx= 0; DataIdx< len; DataIdx++) {
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	3301      	adds	r3, #1
 8000f58:	617b      	str	r3, [r7, #20]
 8000f5a:	697a      	ldr	r2, [r7, #20]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	429a      	cmp	r2, r3
 8000f60:	dbf1      	blt.n	8000f46 <_write+0x12>
 }
 return len;
 8000f62:	687b      	ldr	r3, [r7, #4]
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3718      	adds	r7, #24
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}

08000f6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f70:	f000 fc63 	bl	800183a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f74:	f000 f826 	bl	8000fc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f78:	f000 f9ee 	bl	8001358 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000f7c:	f000 f894 	bl	80010a8 <MX_ADC1_Init>
  MX_SPI1_Init();
 8000f80:	f000 f8f8 	bl	8001174 <MX_SPI1_Init>
  MX_TIM2_Init();
 8000f84:	f000 f94c 	bl	8001220 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000f88:	f000 f9b6 	bl	80012f8 <MX_USART2_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000f8c:	f000 f870 	bl	8001070 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
//  HAL_UART_Receive_IT(&huart2, &R_data, 1);
//  while(!(R_data=='A'));
  LL_TIM_EnableCounter(TIM2);
 8000f90:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000f94:	f7ff fe01 	bl	8000b9a <LL_TIM_EnableCounter>
  SET_BIT(TIM2->CCER,TIM_CCER_CC1E);
 8000f98:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f9c:	6a1b      	ldr	r3, [r3, #32]
 8000f9e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fa2:	f043 0301 	orr.w	r3, r3, #1
 8000fa6:	6213      	str	r3, [r2, #32]
  SET_BIT(TIM2->DIER,TIM_DIER_CC1IE);
 8000fa8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fac:	68db      	ldr	r3, [r3, #12]
 8000fae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fb2:	f043 0302 	orr.w	r3, r3, #2
 8000fb6:	60d3      	str	r3, [r2, #12]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  printf("Hello world");
 8000fb8:	4801      	ldr	r0, [pc, #4]	; (8000fc0 <main+0x54>)
 8000fba:	f002 fb77 	bl	80036ac <iprintf>
 8000fbe:	e7fb      	b.n	8000fb8 <main+0x4c>
 8000fc0:	080043c0 	.word	0x080043c0

08000fc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_3);
 8000fc8:	2003      	movs	r0, #3
 8000fca:	f7ff fd8d 	bl	8000ae8 <LL_FLASH_SetLatency>

  if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_3)
 8000fce:	f7ff fd9f 	bl	8000b10 <LL_FLASH_GetLatency>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b03      	cmp	r3, #3
 8000fd6:	d001      	beq.n	8000fdc <SystemClock_Config+0x18>
  {
  Error_Handler();  
 8000fd8:	f000 fa14 	bl	8001404 <Error_Handler>
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8000fdc:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000fe0:	f7ff fda4 	bl	8000b2c <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSI_Enable();
 8000fe4:	f7ff fc1c 	bl	8000820 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8000fe8:	bf00      	nop
 8000fea:	f7ff fc29 	bl	8000840 <LL_RCC_HSI_IsReady>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	d1fa      	bne.n	8000fea <SystemClock_Config+0x26>
  {
    
  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8000ff4:	2010      	movs	r0, #16
 8000ff6:	f7ff fc37 	bl	8000868 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_1, 8, LL_RCC_PLLR_DIV_2);
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	2208      	movs	r2, #8
 8000ffe:	2100      	movs	r1, #0
 8001000:	2002      	movs	r0, #2
 8001002:	f7ff fcf9 	bl	80009f8 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_EnableDomain_SYS();
 8001006:	f7ff fd17 	bl	8000a38 <LL_RCC_PLL_EnableDomain_SYS>
  LL_RCC_PLL_Enable();
 800100a:	f7ff fcd1 	bl	80009b0 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 800100e:	bf00      	nop
 8001010:	f7ff fcde 	bl	80009d0 <LL_RCC_PLL_IsReady>
 8001014:	4603      	mov	r3, r0
 8001016:	2b01      	cmp	r3, #1
 8001018:	d1fa      	bne.n	8001010 <SystemClock_Config+0x4c>
  {
    
  }
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 800101a:	2003      	movs	r0, #3
 800101c:	f7ff fc3a 	bl	8000894 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001020:	bf00      	nop
 8001022:	f7ff fc4b 	bl	80008bc <LL_RCC_GetSysClkSource>
 8001026:	4603      	mov	r3, r0
 8001028:	2b0c      	cmp	r3, #12
 800102a:	d1fa      	bne.n	8001022 <SystemClock_Config+0x5e>
  {
  
  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 800102c:	2000      	movs	r0, #0
 800102e:	f7ff fc53 	bl	80008d8 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8001032:	2000      	movs	r0, #0
 8001034:	f7ff fc64 	bl	8000900 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8001038:	2000      	movs	r0, #0
 800103a:	f7ff fc75 	bl	8000928 <LL_RCC_SetAPB2Prescaler>
  LL_SetSystemCoreClock(64000000);
 800103e:	480a      	ldr	r0, [pc, #40]	; (8001068 <SystemClock_Config+0xa4>)
 8001040:	f002 fa4a 	bl	80034d8 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8001044:	2000      	movs	r0, #0
 8001046:	f000 fc11 	bl	800186c <HAL_InitTick>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <SystemClock_Config+0x90>
  {
    Error_Handler();  
 8001050:	f000 f9d8 	bl	8001404 <Error_Handler>
  };
  LL_RCC_SetUSARTClockSource(LL_RCC_USART2_CLKSOURCE_SYSCLK);
 8001054:	4805      	ldr	r0, [pc, #20]	; (800106c <SystemClock_Config+0xa8>)
 8001056:	f7ff fc7b 	bl	8000950 <LL_RCC_SetUSARTClockSource>
  LL_RCC_SetADCClockSource(LL_RCC_ADC_CLKSOURCE_SYSCLK);
 800105a:	f04f 5040 	mov.w	r0, #805306368	; 0x30000000
 800105e:	f7ff fc91 	bl	8000984 <LL_RCC_SetADCClockSource>
}
 8001062:	bf00      	nop
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	03d09000 	.word	0x03d09000
 800106c:	000c0004 	.word	0x000c0004

08001070 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* TIM2_IRQn interrupt configuration */
  NVIC_SetPriority(TIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 0));
 8001074:	f7ff fa7c 	bl	8000570 <__NVIC_GetPriorityGrouping>
 8001078:	4603      	mov	r3, r0
 800107a:	2200      	movs	r2, #0
 800107c:	2102      	movs	r1, #2
 800107e:	4618      	mov	r0, r3
 8001080:	f7ff facc 	bl	800061c <NVIC_EncodePriority>
 8001084:	4603      	mov	r3, r0
 8001086:	4619      	mov	r1, r3
 8001088:	201c      	movs	r0, #28
 800108a:	f7ff fa9d 	bl	80005c8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 800108e:	201c      	movs	r0, #28
 8001090:	f7ff fa7c 	bl	800058c <__NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001094:	2200      	movs	r2, #0
 8001096:	2105      	movs	r1, #5
 8001098:	2026      	movs	r0, #38	; 0x26
 800109a:	f000 fd1a 	bl	8001ad2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 800109e:	2026      	movs	r0, #38	; 0x26
 80010a0:	f000 fd33 	bl	8001b0a <HAL_NVIC_EnableIRQ>
}
 80010a4:	bf00      	nop
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b08a      	sub	sp, #40	; 0x28
 80010ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 80010ae:	f107 031c 	add.w	r3, r7, #28
 80010b2:	2200      	movs	r2, #0
 80010b4:	601a      	str	r2, [r3, #0]
 80010b6:	605a      	str	r2, [r3, #4]
 80010b8:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 80010ba:	1d3b      	adds	r3, r7, #4
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	605a      	str	r2, [r3, #4]
 80010c2:	609a      	str	r2, [r3, #8]
 80010c4:	60da      	str	r2, [r3, #12]
 80010c6:	611a      	str	r2, [r3, #16]
 80010c8:	615a      	str	r2, [r3, #20]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 80010ca:	2300      	movs	r3, #0
 80010cc:	603b      	str	r3, [r7, #0]

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_ADC);
 80010ce:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80010d2:	f7ff fcc1 	bl	8000a58 <LL_AHB2_GRP1_EnableClock>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 80010d6:	2300      	movs	r3, #0
 80010d8:	61fb      	str	r3, [r7, #28]
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 80010da:	2300      	movs	r3, #0
 80010dc:	623b      	str	r3, [r7, #32]
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 80010de:	2300      	movs	r3, #0
 80010e0:	627b      	str	r3, [r7, #36]	; 0x24
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 80010e2:	f107 031c 	add.w	r3, r7, #28
 80010e6:	4619      	mov	r1, r3
 80010e8:	481f      	ldr	r0, [pc, #124]	; (8001168 <MX_ADC1_Init+0xc0>)
 80010ea:	f001 ff07 	bl	8002efc <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 80010ee:	2300      	movs	r3, #0
 80010f0:	607b      	str	r3, [r7, #4]
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 80010f2:	2300      	movs	r3, #0
 80010f4:	60bb      	str	r3, [r7, #8]
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 80010f6:	2300      	movs	r3, #0
 80010f8:	60fb      	str	r3, [r7, #12]
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 80010fa:	2300      	movs	r3, #0
 80010fc:	613b      	str	r3, [r7, #16]
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 80010fe:	2300      	movs	r3, #0
 8001100:	617b      	str	r3, [r7, #20]
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 8001102:	2300      	movs	r3, #0
 8001104:	61bb      	str	r3, [r7, #24]
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8001106:	1d3b      	adds	r3, r7, #4
 8001108:	4619      	mov	r1, r3
 800110a:	4817      	ldr	r0, [pc, #92]	; (8001168 <MX_ADC1_Init+0xc0>)
 800110c:	f001 ff1c 	bl	8002f48 <LL_ADC_REG_Init>
  LL_ADC_DisableIT_EOC(ADC1);
 8001110:	4815      	ldr	r0, [pc, #84]	; (8001168 <MX_ADC1_Init+0xc0>)
 8001112:	f7ff fb65 	bl	80007e0 <LL_ADC_DisableIT_EOC>
  LL_ADC_DisableIT_EOS(ADC1);
 8001116:	4814      	ldr	r0, [pc, #80]	; (8001168 <MX_ADC1_Init+0xc0>)
 8001118:	f7ff fb72 	bl	8000800 <LL_ADC_DisableIT_EOS>
  LL_ADC_DisableDeepPowerDown(ADC1);
 800111c:	4812      	ldr	r0, [pc, #72]	; (8001168 <MX_ADC1_Init+0xc0>)
 800111e:	f7ff fb39 	bl	8000794 <LL_ADC_DisableDeepPowerDown>
  LL_ADC_EnableInternalRegulator(ADC1);
 8001122:	4811      	ldr	r0, [pc, #68]	; (8001168 <MX_ADC1_Init+0xc0>)
 8001124:	f7ff fb48 	bl	80007b8 <LL_ADC_EnableInternalRegulator>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_ASYNC_DIV1;
 8001128:	2300      	movs	r3, #0
 800112a:	603b      	str	r3, [r7, #0]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 800112c:	463b      	mov	r3, r7
 800112e:	4619      	mov	r1, r3
 8001130:	480e      	ldr	r0, [pc, #56]	; (800116c <MX_ADC1_Init+0xc4>)
 8001132:	f001 fec5 	bl	8002ec0 <LL_ADC_CommonInit>
  /** Configure Regular Channel 
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_VREFINT);
 8001136:	4a0e      	ldr	r2, [pc, #56]	; (8001170 <MX_ADC1_Init+0xc8>)
 8001138:	2106      	movs	r1, #6
 800113a:	480b      	ldr	r0, [pc, #44]	; (8001168 <MX_ADC1_Init+0xc0>)
 800113c:	f7ff fab4 	bl	80006a8 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_VREFINT, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001140:	2200      	movs	r2, #0
 8001142:	490b      	ldr	r1, [pc, #44]	; (8001170 <MX_ADC1_Init+0xc8>)
 8001144:	4808      	ldr	r0, [pc, #32]	; (8001168 <MX_ADC1_Init+0xc0>)
 8001146:	f7ff fad8 	bl	80006fa <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_VREFINT, LL_ADC_SINGLE_ENDED);
 800114a:	227f      	movs	r2, #127	; 0x7f
 800114c:	4908      	ldr	r1, [pc, #32]	; (8001170 <MX_ADC1_Init+0xc8>)
 800114e:	4806      	ldr	r0, [pc, #24]	; (8001168 <MX_ADC1_Init+0xc0>)
 8001150:	f7ff fafc 	bl	800074c <LL_ADC_SetChannelSingleDiff>
  LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(ADC1), LL_ADC_PATH_INTERNAL_VREFINT);
 8001154:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8001158:	4804      	ldr	r0, [pc, #16]	; (800116c <MX_ADC1_Init+0xc4>)
 800115a:	f7ff fa92 	bl	8000682 <LL_ADC_SetCommonPathInternalCh>
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800115e:	bf00      	nop
 8001160:	3728      	adds	r7, #40	; 0x28
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	50040000 	.word	0x50040000
 800116c:	50040300 	.word	0x50040300
 8001170:	80000001 	.word	0x80000001

08001174 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b090      	sub	sp, #64	; 0x40
 8001178:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800117a:	f107 0318 	add.w	r3, r7, #24
 800117e:	2228      	movs	r2, #40	; 0x28
 8001180:	2100      	movs	r1, #0
 8001182:	4618      	mov	r0, r3
 8001184:	f002 f9e2 	bl	800354c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001188:	463b      	mov	r3, r7
 800118a:	2200      	movs	r2, #0
 800118c:	601a      	str	r2, [r3, #0]
 800118e:	605a      	str	r2, [r3, #4]
 8001190:	609a      	str	r2, [r3, #8]
 8001192:	60da      	str	r2, [r3, #12]
 8001194:	611a      	str	r2, [r3, #16]
 8001196:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8001198:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800119c:	f7ff fc8c 	bl	8000ab8 <LL_APB2_GRP1_EnableClock>
  
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80011a0:	2001      	movs	r0, #1
 80011a2:	f7ff fc59 	bl	8000a58 <LL_AHB2_GRP1_EnableClock>
  /**SPI1 GPIO Configuration  
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 80011a6:	23e0      	movs	r3, #224	; 0xe0
 80011a8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80011aa:	2302      	movs	r3, #2
 80011ac:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80011ae:	2303      	movs	r3, #3
 80011b0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80011b2:	2300      	movs	r3, #0
 80011b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80011b6:	2300      	movs	r3, #0
 80011b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80011ba:	2305      	movs	r3, #5
 80011bc:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011be:	463b      	mov	r3, r7
 80011c0:	4619      	mov	r1, r3
 80011c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011c6:	f002 f80e 	bl	80031e6 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80011ca:	2300      	movs	r3, #0
 80011cc:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80011ce:	f44f 7382 	mov.w	r3, #260	; 0x104
 80011d2:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_4BIT;
 80011d4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011d8:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 80011da:	2300      	movs	r3, #0
 80011dc:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 80011de:	2300      	movs	r3, #0
 80011e0:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80011e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV2;
 80011e8:	2300      	movs	r3, #0
 80011ea:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80011ec:	2300      	movs	r3, #0
 80011ee:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80011f0:	2300      	movs	r3, #0
 80011f2:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 7;
 80011f4:	2307      	movs	r3, #7
 80011f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 80011f8:	f107 0318 	add.w	r3, r7, #24
 80011fc:	4619      	mov	r1, r3
 80011fe:	4807      	ldr	r0, [pc, #28]	; (800121c <MX_SPI1_Init+0xa8>)
 8001200:	f002 f883 	bl	800330a <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 8001204:	2100      	movs	r1, #0
 8001206:	4805      	ldr	r0, [pc, #20]	; (800121c <MX_SPI1_Init+0xa8>)
 8001208:	f7ff fca4 	bl	8000b54 <LL_SPI_SetStandard>
  LL_SPI_EnableNSSPulseMgt(SPI1);
 800120c:	4803      	ldr	r0, [pc, #12]	; (800121c <MX_SPI1_Init+0xa8>)
 800120e:	f7ff fcb4 	bl	8000b7a <LL_SPI_EnableNSSPulseMgt>
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001212:	bf00      	nop
 8001214:	3740      	adds	r7, #64	; 0x40
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	40013000 	.word	0x40013000

08001220 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b08c      	sub	sp, #48	; 0x30
 8001224:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001226:	f107 031c 	add.w	r3, r7, #28
 800122a:	2200      	movs	r2, #0
 800122c:	601a      	str	r2, [r3, #0]
 800122e:	605a      	str	r2, [r3, #4]
 8001230:	609a      	str	r2, [r3, #8]
 8001232:	60da      	str	r2, [r3, #12]
 8001234:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001236:	1d3b      	adds	r3, r7, #4
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	605a      	str	r2, [r3, #4]
 800123e:	609a      	str	r2, [r3, #8]
 8001240:	60da      	str	r2, [r3, #12]
 8001242:	611a      	str	r2, [r3, #16]
 8001244:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8001246:	2001      	movs	r0, #1
 8001248:	f7ff fc1e 	bl	8000a88 <LL_APB1_GRP1_EnableClock>
  
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 800124c:	2001      	movs	r0, #1
 800124e:	f7ff fc03 	bl	8000a58 <LL_AHB2_GRP1_EnableClock>
  /**TIM2 GPIO Configuration  
  PA0   ------> TIM2_CH1 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8001252:	2301      	movs	r3, #1
 8001254:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001256:	2302      	movs	r3, #2
 8001258:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800125a:	2300      	movs	r3, #0
 800125c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800125e:	2300      	movs	r3, #0
 8001260:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001262:	2300      	movs	r3, #0
 8001264:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8001266:	2301      	movs	r3, #1
 8001268:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800126a:	1d3b      	adds	r3, r7, #4
 800126c:	4619      	mov	r1, r3
 800126e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001272:	f001 ffb8 	bl	80031e6 <LL_GPIO_Init>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 6400;
 8001276:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800127a:	83bb      	strh	r3, [r7, #28]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800127c:	2300      	movs	r3, #0
 800127e:	623b      	str	r3, [r7, #32]
  TIM_InitStruct.Autoreload = 0xffff;
 8001280:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001284:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001286:	2300      	movs	r3, #0
 8001288:	62bb      	str	r3, [r7, #40]	; 0x28
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 800128a:	f107 031c 	add.w	r3, r7, #28
 800128e:	4619      	mov	r1, r3
 8001290:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001294:	f002 f8c2 	bl	800341c <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 8001298:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800129c:	f7ff fc8d 	bl	8000bba <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 80012a0:	2100      	movs	r1, #0
 80012a2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80012a6:	f7ff fde9 	bl	8000e7c <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 80012aa:	2100      	movs	r1, #0
 80012ac:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80012b0:	f7ff fdf9 	bl	8000ea6 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 80012b4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80012b8:	f7ff fe08 	bl	8000ecc <LL_TIM_DisableMasterSlaveMode>
  LL_TIM_IC_SetActiveInput(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_ACTIVEINPUT_DIRECTTI);
 80012bc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80012c0:	2101      	movs	r1, #1
 80012c2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80012c6:	f7ff fc89 	bl	8000bdc <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_ICPSC_DIV1);
 80012ca:	2200      	movs	r2, #0
 80012cc:	2101      	movs	r1, #1
 80012ce:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80012d2:	f7ff fcd9 	bl	8000c88 <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_IC_FILTER_FDIV1);
 80012d6:	2200      	movs	r2, #0
 80012d8:	2101      	movs	r1, #1
 80012da:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80012de:	f7ff fd29 	bl	8000d34 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_IC_POLARITY_RISING);
 80012e2:	2200      	movs	r2, #0
 80012e4:	2101      	movs	r1, #1
 80012e6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80012ea:	f7ff fd79 	bl	8000de0 <LL_TIM_IC_SetPolarity>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012ee:	bf00      	nop
 80012f0:	3730      	adds	r7, #48	; 0x30
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
	...

080012f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012fc:	4b14      	ldr	r3, [pc, #80]	; (8001350 <MX_USART2_UART_Init+0x58>)
 80012fe:	4a15      	ldr	r2, [pc, #84]	; (8001354 <MX_USART2_UART_Init+0x5c>)
 8001300:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001302:	4b13      	ldr	r3, [pc, #76]	; (8001350 <MX_USART2_UART_Init+0x58>)
 8001304:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001308:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800130a:	4b11      	ldr	r3, [pc, #68]	; (8001350 <MX_USART2_UART_Init+0x58>)
 800130c:	2200      	movs	r2, #0
 800130e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001310:	4b0f      	ldr	r3, [pc, #60]	; (8001350 <MX_USART2_UART_Init+0x58>)
 8001312:	2200      	movs	r2, #0
 8001314:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001316:	4b0e      	ldr	r3, [pc, #56]	; (8001350 <MX_USART2_UART_Init+0x58>)
 8001318:	2200      	movs	r2, #0
 800131a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800131c:	4b0c      	ldr	r3, [pc, #48]	; (8001350 <MX_USART2_UART_Init+0x58>)
 800131e:	220c      	movs	r2, #12
 8001320:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001322:	4b0b      	ldr	r3, [pc, #44]	; (8001350 <MX_USART2_UART_Init+0x58>)
 8001324:	2200      	movs	r2, #0
 8001326:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001328:	4b09      	ldr	r3, [pc, #36]	; (8001350 <MX_USART2_UART_Init+0x58>)
 800132a:	2200      	movs	r2, #0
 800132c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800132e:	4b08      	ldr	r3, [pc, #32]	; (8001350 <MX_USART2_UART_Init+0x58>)
 8001330:	2200      	movs	r2, #0
 8001332:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001334:	4b06      	ldr	r3, [pc, #24]	; (8001350 <MX_USART2_UART_Init+0x58>)
 8001336:	2200      	movs	r2, #0
 8001338:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800133a:	4805      	ldr	r0, [pc, #20]	; (8001350 <MX_USART2_UART_Init+0x58>)
 800133c:	f000 fe7c 	bl	8002038 <HAL_UART_Init>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001346:	f000 f85d 	bl	8001404 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800134a:	bf00      	nop
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	200000b4 	.word	0x200000b4
 8001354:	40004400 	.word	0x40004400

08001358 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b086      	sub	sp, #24
 800135c:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135e:	463b      	mov	r3, r7
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	605a      	str	r2, [r3, #4]
 8001366:	609a      	str	r2, [r3, #8]
 8001368:	60da      	str	r2, [r3, #12]
 800136a:	611a      	str	r2, [r3, #16]
 800136c:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 800136e:	2004      	movs	r0, #4
 8001370:	f7ff fb72 	bl	8000a58 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8001374:	2001      	movs	r0, #1
 8001376:	f7ff fb6f 	bl	8000a58 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 800137a:	2002      	movs	r0, #2
 800137c:	f7ff fb6c 	bl	8000a58 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_14|LL_GPIO_PIN_15);
 8001380:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8001384:	481d      	ldr	r0, [pc, #116]	; (80013fc <MX_GPIO_Init+0xa4>)
 8001386:	f7ff fdb1 	bl	8000eec <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13;
 800138a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800138e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001390:	2300      	movs	r3, #0
 8001392:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001394:	2300      	movs	r3, #0
 8001396:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001398:	463b      	mov	r3, r7
 800139a:	4619      	mov	r1, r3
 800139c:	4817      	ldr	r0, [pc, #92]	; (80013fc <MX_GPIO_Init+0xa4>)
 800139e:	f001 ff22 	bl	80031e6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 80013a2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80013a6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80013a8:	2301      	movs	r3, #1
 80013aa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80013ac:	2300      	movs	r3, #0
 80013ae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80013b0:	2300      	movs	r3, #0
 80013b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80013b4:	2300      	movs	r3, #0
 80013b6:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013b8:	463b      	mov	r3, r7
 80013ba:	4619      	mov	r1, r3
 80013bc:	480f      	ldr	r0, [pc, #60]	; (80013fc <MX_GPIO_Init+0xa4>)
 80013be:	f001 ff12 	bl	80031e6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 80013c2:	2302      	movs	r3, #2
 80013c4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80013c6:	2300      	movs	r3, #0
 80013c8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80013ca:	2300      	movs	r3, #0
 80013cc:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ce:	463b      	mov	r3, r7
 80013d0:	4619      	mov	r1, r3
 80013d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013d6:	f001 ff06 	bl	80031e6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12;
 80013da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013de:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80013e0:	2303      	movs	r3, #3
 80013e2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80013e4:	2300      	movs	r3, #0
 80013e6:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013e8:	463b      	mov	r3, r7
 80013ea:	4619      	mov	r1, r3
 80013ec:	4804      	ldr	r0, [pc, #16]	; (8001400 <MX_GPIO_Init+0xa8>)
 80013ee:	f001 fefa 	bl	80031e6 <LL_GPIO_Init>

}
 80013f2:	bf00      	nop
 80013f4:	3718      	adds	r7, #24
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	48000800 	.word	0x48000800
 8001400:	48000400 	.word	0x48000400

08001404 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001408:	bf00      	nop
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
	...

08001414 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800141a:	4b0f      	ldr	r3, [pc, #60]	; (8001458 <HAL_MspInit+0x44>)
 800141c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800141e:	4a0e      	ldr	r2, [pc, #56]	; (8001458 <HAL_MspInit+0x44>)
 8001420:	f043 0301 	orr.w	r3, r3, #1
 8001424:	6613      	str	r3, [r2, #96]	; 0x60
 8001426:	4b0c      	ldr	r3, [pc, #48]	; (8001458 <HAL_MspInit+0x44>)
 8001428:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800142a:	f003 0301 	and.w	r3, r3, #1
 800142e:	607b      	str	r3, [r7, #4]
 8001430:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001432:	4b09      	ldr	r3, [pc, #36]	; (8001458 <HAL_MspInit+0x44>)
 8001434:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001436:	4a08      	ldr	r2, [pc, #32]	; (8001458 <HAL_MspInit+0x44>)
 8001438:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800143c:	6593      	str	r3, [r2, #88]	; 0x58
 800143e:	4b06      	ldr	r3, [pc, #24]	; (8001458 <HAL_MspInit+0x44>)
 8001440:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001442:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001446:	603b      	str	r3, [r7, #0]
 8001448:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800144a:	bf00      	nop
 800144c:	370c      	adds	r7, #12
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	40021000 	.word	0x40021000

0800145c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b08a      	sub	sp, #40	; 0x28
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001464:	f107 0314 	add.w	r3, r7, #20
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]
 800146c:	605a      	str	r2, [r3, #4]
 800146e:	609a      	str	r2, [r3, #8]
 8001470:	60da      	str	r2, [r3, #12]
 8001472:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a17      	ldr	r2, [pc, #92]	; (80014d8 <HAL_UART_MspInit+0x7c>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d128      	bne.n	80014d0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800147e:	4b17      	ldr	r3, [pc, #92]	; (80014dc <HAL_UART_MspInit+0x80>)
 8001480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001482:	4a16      	ldr	r2, [pc, #88]	; (80014dc <HAL_UART_MspInit+0x80>)
 8001484:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001488:	6593      	str	r3, [r2, #88]	; 0x58
 800148a:	4b14      	ldr	r3, [pc, #80]	; (80014dc <HAL_UART_MspInit+0x80>)
 800148c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800148e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001492:	613b      	str	r3, [r7, #16]
 8001494:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001496:	4b11      	ldr	r3, [pc, #68]	; (80014dc <HAL_UART_MspInit+0x80>)
 8001498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800149a:	4a10      	ldr	r2, [pc, #64]	; (80014dc <HAL_UART_MspInit+0x80>)
 800149c:	f043 0301 	orr.w	r3, r3, #1
 80014a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014a2:	4b0e      	ldr	r3, [pc, #56]	; (80014dc <HAL_UART_MspInit+0x80>)
 80014a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014a6:	f003 0301 	and.w	r3, r3, #1
 80014aa:	60fb      	str	r3, [r7, #12]
 80014ac:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80014ae:	230c      	movs	r3, #12
 80014b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b2:	2302      	movs	r3, #2
 80014b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b6:	2300      	movs	r3, #0
 80014b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ba:	2303      	movs	r3, #3
 80014bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014be:	2307      	movs	r3, #7
 80014c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c2:	f107 0314 	add.w	r3, r7, #20
 80014c6:	4619      	mov	r1, r3
 80014c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014cc:	f000 fb78 	bl	8001bc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80014d0:	bf00      	nop
 80014d2:	3728      	adds	r7, #40	; 0x28
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	40004400 	.word	0x40004400
 80014dc:	40021000 	.word	0x40021000

080014e0 <LL_TIM_IC_GetCaptureCH1>:
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(TIMx->CCR1));
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	370c      	adds	r7, #12
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr

080014f8 <LL_GPIO_IsInputPinSet>:
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(GPIOx->IDR, PinMask) == (PinMask)) ? 1UL : 0UL);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	691a      	ldr	r2, [r3, #16]
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	4013      	ands	r3, r2
 800150a:	683a      	ldr	r2, [r7, #0]
 800150c:	429a      	cmp	r2, r3
 800150e:	d101      	bne.n	8001514 <LL_GPIO_IsInputPinSet+0x1c>
 8001510:	2301      	movs	r3, #1
 8001512:	e000      	b.n	8001516 <LL_GPIO_IsInputPinSet+0x1e>
 8001514:	2300      	movs	r3, #0
}
 8001516:	4618      	mov	r0, r3
 8001518:	370c      	adds	r7, #12
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr

08001522 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001522:	b480      	push	{r7}
 8001524:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001526:	bf00      	nop
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr

08001530 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001534:	e7fe      	b.n	8001534 <HardFault_Handler+0x4>

08001536 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001536:	b480      	push	{r7}
 8001538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800153a:	e7fe      	b.n	800153a <MemManage_Handler+0x4>

0800153c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001540:	e7fe      	b.n	8001540 <BusFault_Handler+0x4>

08001542 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001542:	b480      	push	{r7}
 8001544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001546:	e7fe      	b.n	8001546 <UsageFault_Handler+0x4>

08001548 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800154c:	bf00      	nop
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr

08001556 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001556:	b480      	push	{r7}
 8001558:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800155a:	bf00      	nop
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr

08001564 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001568:	bf00      	nop
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr

08001572 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001572:	b580      	push	{r7, lr}
 8001574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001576:	f000 f9b3 	bl	80018e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800157a:	bf00      	nop
 800157c:	bd80      	pop	{r7, pc}
	...

08001580 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	// Clear the Ready Send Flag to save the Data
  //ready_send_flag = 0;
  flash_index = flash_index + 1;
 8001584:	4b32      	ldr	r3, [pc, #200]	; (8001650 <TIM2_IRQHandler+0xd0>)
 8001586:	881b      	ldrh	r3, [r3, #0]
 8001588:	b21b      	sxth	r3, r3
 800158a:	b29b      	uxth	r3, r3
 800158c:	3301      	adds	r3, #1
 800158e:	b29b      	uxth	r3, r3
 8001590:	b21a      	sxth	r2, r3
 8001592:	4b2f      	ldr	r3, [pc, #188]	; (8001650 <TIM2_IRQHandler+0xd0>)
 8001594:	801a      	strh	r2, [r3, #0]
	/* USER CODE BEGIN TIM2_IRQn 0 */
	if(LL_GPIO_IsInputPinSet(GPIOA,LL_GPIO_PIN_1))
 8001596:	2102      	movs	r1, #2
 8001598:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800159c:	f7ff ffac 	bl	80014f8 <LL_GPIO_IsInputPinSet>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d008      	beq.n	80015b8 <TIM2_IRQHandler+0x38>
	{
		count_tmp =(int16_t) LL_TIM_IC_GetCaptureCH1(TIM2); // quay thuan
 80015a6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80015aa:	f7ff ff99 	bl	80014e0 <LL_TIM_IC_GetCaptureCH1>
 80015ae:	4603      	mov	r3, r0
 80015b0:	b21a      	sxth	r2, r3
 80015b2:	4b28      	ldr	r3, [pc, #160]	; (8001654 <TIM2_IRQHandler+0xd4>)
 80015b4:	801a      	strh	r2, [r3, #0]
 80015b6:	e010      	b.n	80015da <TIM2_IRQHandler+0x5a>
	}
	else
	{
		count_tmp =(int16_t) LL_TIM_IC_GetCaptureCH1(TIM2); // quay nghich
 80015b8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80015bc:	f7ff ff90 	bl	80014e0 <LL_TIM_IC_GetCaptureCH1>
 80015c0:	4603      	mov	r3, r0
 80015c2:	b21a      	sxth	r2, r3
 80015c4:	4b23      	ldr	r3, [pc, #140]	; (8001654 <TIM2_IRQHandler+0xd4>)
 80015c6:	801a      	strh	r2, [r3, #0]
		count_tmp =  0 - count_tmp;
 80015c8:	4b22      	ldr	r3, [pc, #136]	; (8001654 <TIM2_IRQHandler+0xd4>)
 80015ca:	881b      	ldrh	r3, [r3, #0]
 80015cc:	b21b      	sxth	r3, r3
 80015ce:	b29b      	uxth	r3, r3
 80015d0:	425b      	negs	r3, r3
 80015d2:	b29b      	uxth	r3, r3
 80015d4:	b21a      	sxth	r2, r3
 80015d6:	4b1f      	ldr	r3, [pc, #124]	; (8001654 <TIM2_IRQHandler+0xd4>)
 80015d8:	801a      	strh	r2, [r3, #0]
	}
	TIM2->CNT=0; // set cnt  = 0
 80015da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015de:	2200      	movs	r2, #0
 80015e0:	625a      	str	r2, [r3, #36]	; 0x24

  // Buffer is full, Extend the Memory of Buffer
  if (save_index >= buff_length )
 80015e2:	4b1d      	ldr	r3, [pc, #116]	; (8001658 <TIM2_IRQHandler+0xd8>)
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	4b1d      	ldr	r3, [pc, #116]	; (800165c <TIM2_IRQHandler+0xdc>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	429a      	cmp	r2, r3
 80015ec:	db1c      	blt.n	8001628 <TIM2_IRQHandler+0xa8>
  {
    buff_length += Length_buffer;
 80015ee:	4b1b      	ldr	r3, [pc, #108]	; (800165c <TIM2_IRQHandler+0xdc>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	3364      	adds	r3, #100	; 0x64
 80015f4:	4a19      	ldr	r2, [pc, #100]	; (800165c <TIM2_IRQHandler+0xdc>)
 80015f6:	6013      	str	r3, [r2, #0]
    buff_T = (int16_t *)realloc(buff_T, buff_length*sizeof(int16_t));
 80015f8:	4b19      	ldr	r3, [pc, #100]	; (8001660 <TIM2_IRQHandler+0xe0>)
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	4b17      	ldr	r3, [pc, #92]	; (800165c <TIM2_IRQHandler+0xdc>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	005b      	lsls	r3, r3, #1
 8001602:	4619      	mov	r1, r3
 8001604:	4610      	mov	r0, r2
 8001606:	f002 f869 	bl	80036dc <realloc>
 800160a:	4602      	mov	r2, r0
 800160c:	4b14      	ldr	r3, [pc, #80]	; (8001660 <TIM2_IRQHandler+0xe0>)
 800160e:	601a      	str	r2, [r3, #0]

    if (buff_T == NULL)
 8001610:	4b13      	ldr	r3, [pc, #76]	; (8001660 <TIM2_IRQHandler+0xe0>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d119      	bne.n	800164c <TIM2_IRQHandler+0xcc>
    {
      // Allocate the New Memory to Buffer Fail
      error_flag = error_flag + 1;
 8001618:	4b12      	ldr	r3, [pc, #72]	; (8001664 <TIM2_IRQHandler+0xe4>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	b2db      	uxtb	r3, r3
 800161e:	3301      	adds	r3, #1
 8001620:	b2da      	uxtb	r2, r3
 8001622:	4b10      	ldr	r3, [pc, #64]	; (8001664 <TIM2_IRQHandler+0xe4>)
 8001624:	701a      	strb	r2, [r3, #0]

  /* USER CODE END TIM2_IRQn 0 */
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001626:	e011      	b.n	800164c <TIM2_IRQHandler+0xcc>
    *(buff_T + save_index) = count_tmp; // buf_T[save_index] = count_tmp;
 8001628:	4b0d      	ldr	r3, [pc, #52]	; (8001660 <TIM2_IRQHandler+0xe0>)
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	4b0a      	ldr	r3, [pc, #40]	; (8001658 <TIM2_IRQHandler+0xd8>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	005b      	lsls	r3, r3, #1
 8001632:	4413      	add	r3, r2
 8001634:	4a07      	ldr	r2, [pc, #28]	; (8001654 <TIM2_IRQHandler+0xd4>)
 8001636:	8812      	ldrh	r2, [r2, #0]
 8001638:	b212      	sxth	r2, r2
 800163a:	801a      	strh	r2, [r3, #0]
    save_index ++;
 800163c:	4b06      	ldr	r3, [pc, #24]	; (8001658 <TIM2_IRQHandler+0xd8>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	3301      	adds	r3, #1
 8001642:	4a05      	ldr	r2, [pc, #20]	; (8001658 <TIM2_IRQHandler+0xd8>)
 8001644:	6013      	str	r3, [r2, #0]
    ready_send_flag = 1;
 8001646:	4b08      	ldr	r3, [pc, #32]	; (8001668 <TIM2_IRQHandler+0xe8>)
 8001648:	2201      	movs	r2, #1
 800164a:	701a      	strb	r2, [r3, #0]
}
 800164c:	bf00      	nop
 800164e:	bd80      	pop	{r7, pc}
 8001650:	20000098 	.word	0x20000098
 8001654:	2000008c 	.word	0x2000008c
 8001658:	20000090 	.word	0x20000090
 800165c:	20000094 	.word	0x20000094
 8001660:	200000ac 	.word	0x200000ac
 8001664:	2000009a 	.word	0x2000009a
 8001668:	2000009b 	.word	0x2000009b

0800166c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001670:	4802      	ldr	r0, [pc, #8]	; (800167c <USART2_IRQHandler+0x10>)
 8001672:	f000 fdc3 	bl	80021fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001676:	bf00      	nop
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	200000b4 	.word	0x200000b4

08001680 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b086      	sub	sp, #24
 8001684:	af00      	add	r7, sp, #0
 8001686:	60f8      	str	r0, [r7, #12]
 8001688:	60b9      	str	r1, [r7, #8]
 800168a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800168c:	2300      	movs	r3, #0
 800168e:	617b      	str	r3, [r7, #20]
 8001690:	e00a      	b.n	80016a8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001692:	f3af 8000 	nop.w
 8001696:	4601      	mov	r1, r0
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	1c5a      	adds	r2, r3, #1
 800169c:	60ba      	str	r2, [r7, #8]
 800169e:	b2ca      	uxtb	r2, r1
 80016a0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	3301      	adds	r3, #1
 80016a6:	617b      	str	r3, [r7, #20]
 80016a8:	697a      	ldr	r2, [r7, #20]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	429a      	cmp	r2, r3
 80016ae:	dbf0      	blt.n	8001692 <_read+0x12>
	}

return len;
 80016b0:	687b      	ldr	r3, [r7, #4]
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3718      	adds	r7, #24
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}

080016ba <_close>:
	}
	return len;
}

int _close(int file)
{
 80016ba:	b480      	push	{r7}
 80016bc:	b083      	sub	sp, #12
 80016be:	af00      	add	r7, sp, #0
 80016c0:	6078      	str	r0, [r7, #4]
	return -1;
 80016c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	370c      	adds	r7, #12
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr

080016d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016d2:	b480      	push	{r7}
 80016d4:	b083      	sub	sp, #12
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	6078      	str	r0, [r7, #4]
 80016da:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016e2:	605a      	str	r2, [r3, #4]
	return 0;
 80016e4:	2300      	movs	r3, #0
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	370c      	adds	r7, #12
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr

080016f2 <_isatty>:

int _isatty(int file)
{
 80016f2:	b480      	push	{r7}
 80016f4:	b083      	sub	sp, #12
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	6078      	str	r0, [r7, #4]
	return 1;
 80016fa:	2301      	movs	r3, #1
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	370c      	adds	r7, #12
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr

08001708 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001708:	b480      	push	{r7}
 800170a:	b085      	sub	sp, #20
 800170c:	af00      	add	r7, sp, #0
 800170e:	60f8      	str	r0, [r7, #12]
 8001710:	60b9      	str	r1, [r7, #8]
 8001712:	607a      	str	r2, [r7, #4]
	return 0;
 8001714:	2300      	movs	r3, #0
}
 8001716:	4618      	mov	r0, r3
 8001718:	3714      	adds	r7, #20
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
	...

08001724 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800172c:	4b11      	ldr	r3, [pc, #68]	; (8001774 <_sbrk+0x50>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d102      	bne.n	800173a <_sbrk+0x16>
		heap_end = &end;
 8001734:	4b0f      	ldr	r3, [pc, #60]	; (8001774 <_sbrk+0x50>)
 8001736:	4a10      	ldr	r2, [pc, #64]	; (8001778 <_sbrk+0x54>)
 8001738:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800173a:	4b0e      	ldr	r3, [pc, #56]	; (8001774 <_sbrk+0x50>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001740:	4b0c      	ldr	r3, [pc, #48]	; (8001774 <_sbrk+0x50>)
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	4413      	add	r3, r2
 8001748:	466a      	mov	r2, sp
 800174a:	4293      	cmp	r3, r2
 800174c:	d907      	bls.n	800175e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800174e:	f001 fed3 	bl	80034f8 <__errno>
 8001752:	4602      	mov	r2, r0
 8001754:	230c      	movs	r3, #12
 8001756:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001758:	f04f 33ff 	mov.w	r3, #4294967295
 800175c:	e006      	b.n	800176c <_sbrk+0x48>
	}

	heap_end += incr;
 800175e:	4b05      	ldr	r3, [pc, #20]	; (8001774 <_sbrk+0x50>)
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4413      	add	r3, r2
 8001766:	4a03      	ldr	r2, [pc, #12]	; (8001774 <_sbrk+0x50>)
 8001768:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800176a:	68fb      	ldr	r3, [r7, #12]
}
 800176c:	4618      	mov	r0, r3
 800176e:	3710      	adds	r7, #16
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	2000009c 	.word	0x2000009c
 8001778:	20000140 	.word	0x20000140

0800177c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001780:	4b17      	ldr	r3, [pc, #92]	; (80017e0 <SystemInit+0x64>)
 8001782:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001786:	4a16      	ldr	r2, [pc, #88]	; (80017e0 <SystemInit+0x64>)
 8001788:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800178c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001790:	4b14      	ldr	r3, [pc, #80]	; (80017e4 <SystemInit+0x68>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a13      	ldr	r2, [pc, #76]	; (80017e4 <SystemInit+0x68>)
 8001796:	f043 0301 	orr.w	r3, r3, #1
 800179a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800179c:	4b11      	ldr	r3, [pc, #68]	; (80017e4 <SystemInit+0x68>)
 800179e:	2200      	movs	r2, #0
 80017a0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80017a2:	4b10      	ldr	r3, [pc, #64]	; (80017e4 <SystemInit+0x68>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a0f      	ldr	r2, [pc, #60]	; (80017e4 <SystemInit+0x68>)
 80017a8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80017ac:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80017b0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80017b2:	4b0c      	ldr	r3, [pc, #48]	; (80017e4 <SystemInit+0x68>)
 80017b4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80017b8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80017ba:	4b0a      	ldr	r3, [pc, #40]	; (80017e4 <SystemInit+0x68>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a09      	ldr	r2, [pc, #36]	; (80017e4 <SystemInit+0x68>)
 80017c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017c4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80017c6:	4b07      	ldr	r3, [pc, #28]	; (80017e4 <SystemInit+0x68>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80017cc:	4b04      	ldr	r3, [pc, #16]	; (80017e0 <SystemInit+0x64>)
 80017ce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80017d2:	609a      	str	r2, [r3, #8]
#endif
}
 80017d4:	bf00      	nop
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	e000ed00 	.word	0xe000ed00
 80017e4:	40021000 	.word	0x40021000

080017e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80017e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001820 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80017ec:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80017ee:	e003      	b.n	80017f8 <LoopCopyDataInit>

080017f0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80017f0:	4b0c      	ldr	r3, [pc, #48]	; (8001824 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80017f2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80017f4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80017f6:	3104      	adds	r1, #4

080017f8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80017f8:	480b      	ldr	r0, [pc, #44]	; (8001828 <LoopForever+0xa>)
	ldr	r3, =_edata
 80017fa:	4b0c      	ldr	r3, [pc, #48]	; (800182c <LoopForever+0xe>)
	adds	r2, r0, r1
 80017fc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80017fe:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001800:	d3f6      	bcc.n	80017f0 <CopyDataInit>
	ldr	r2, =_sbss
 8001802:	4a0b      	ldr	r2, [pc, #44]	; (8001830 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001804:	e002      	b.n	800180c <LoopFillZerobss>

08001806 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001806:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001808:	f842 3b04 	str.w	r3, [r2], #4

0800180c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800180c:	4b09      	ldr	r3, [pc, #36]	; (8001834 <LoopForever+0x16>)
	cmp	r2, r3
 800180e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001810:	d3f9      	bcc.n	8001806 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001812:	f7ff ffb3 	bl	800177c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001816:	f001 fe75 	bl	8003504 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800181a:	f7ff fba7 	bl	8000f6c <main>

0800181e <LoopForever>:

LoopForever:
    b LoopForever
 800181e:	e7fe      	b.n	800181e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001820:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8001824:	080044d0 	.word	0x080044d0
	ldr	r0, =_sdata
 8001828:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800182c:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8001830:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8001834:	2000013c 	.word	0x2000013c

08001838 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001838:	e7fe      	b.n	8001838 <ADC1_IRQHandler>

0800183a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800183a:	b580      	push	{r7, lr}
 800183c:	b082      	sub	sp, #8
 800183e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001840:	2300      	movs	r3, #0
 8001842:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001844:	2003      	movs	r0, #3
 8001846:	f000 f939 	bl	8001abc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800184a:	2000      	movs	r0, #0
 800184c:	f000 f80e 	bl	800186c <HAL_InitTick>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d002      	beq.n	800185c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	71fb      	strb	r3, [r7, #7]
 800185a:	e001      	b.n	8001860 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800185c:	f7ff fdda 	bl	8001414 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001860:	79fb      	ldrb	r3, [r7, #7]
}
 8001862:	4618      	mov	r0, r3
 8001864:	3708      	adds	r7, #8
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
	...

0800186c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b084      	sub	sp, #16
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001874:	2300      	movs	r3, #0
 8001876:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001878:	4b16      	ldr	r3, [pc, #88]	; (80018d4 <HAL_InitTick+0x68>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d022      	beq.n	80018c6 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001880:	4b15      	ldr	r3, [pc, #84]	; (80018d8 <HAL_InitTick+0x6c>)
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	4b13      	ldr	r3, [pc, #76]	; (80018d4 <HAL_InitTick+0x68>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800188c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001890:	fbb2 f3f3 	udiv	r3, r2, r3
 8001894:	4618      	mov	r0, r3
 8001896:	f000 f946 	bl	8001b26 <HAL_SYSTICK_Config>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d10f      	bne.n	80018c0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2b0f      	cmp	r3, #15
 80018a4:	d809      	bhi.n	80018ba <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018a6:	2200      	movs	r2, #0
 80018a8:	6879      	ldr	r1, [r7, #4]
 80018aa:	f04f 30ff 	mov.w	r0, #4294967295
 80018ae:	f000 f910 	bl	8001ad2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018b2:	4a0a      	ldr	r2, [pc, #40]	; (80018dc <HAL_InitTick+0x70>)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6013      	str	r3, [r2, #0]
 80018b8:	e007      	b.n	80018ca <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	73fb      	strb	r3, [r7, #15]
 80018be:	e004      	b.n	80018ca <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	73fb      	strb	r3, [r7, #15]
 80018c4:	e001      	b.n	80018ca <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80018ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3710      	adds	r7, #16
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	20000008 	.word	0x20000008
 80018d8:	20000000 	.word	0x20000000
 80018dc:	20000004 	.word	0x20000004

080018e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018e4:	4b05      	ldr	r3, [pc, #20]	; (80018fc <HAL_IncTick+0x1c>)
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	4b05      	ldr	r3, [pc, #20]	; (8001900 <HAL_IncTick+0x20>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4413      	add	r3, r2
 80018ee:	4a03      	ldr	r2, [pc, #12]	; (80018fc <HAL_IncTick+0x1c>)
 80018f0:	6013      	str	r3, [r2, #0]
}
 80018f2:	bf00      	nop
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr
 80018fc:	20000134 	.word	0x20000134
 8001900:	20000008 	.word	0x20000008

08001904 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  return uwTick;
 8001908:	4b03      	ldr	r3, [pc, #12]	; (8001918 <HAL_GetTick+0x14>)
 800190a:	681b      	ldr	r3, [r3, #0]
}
 800190c:	4618      	mov	r0, r3
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	20000134 	.word	0x20000134

0800191c <__NVIC_SetPriorityGrouping>:
{
 800191c:	b480      	push	{r7}
 800191e:	b085      	sub	sp, #20
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	f003 0307 	and.w	r3, r3, #7
 800192a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800192c:	4b0c      	ldr	r3, [pc, #48]	; (8001960 <__NVIC_SetPriorityGrouping+0x44>)
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001932:	68ba      	ldr	r2, [r7, #8]
 8001934:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001938:	4013      	ands	r3, r2
 800193a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001944:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001948:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800194c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800194e:	4a04      	ldr	r2, [pc, #16]	; (8001960 <__NVIC_SetPriorityGrouping+0x44>)
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	60d3      	str	r3, [r2, #12]
}
 8001954:	bf00      	nop
 8001956:	3714      	adds	r7, #20
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr
 8001960:	e000ed00 	.word	0xe000ed00

08001964 <__NVIC_GetPriorityGrouping>:
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001968:	4b04      	ldr	r3, [pc, #16]	; (800197c <__NVIC_GetPriorityGrouping+0x18>)
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	0a1b      	lsrs	r3, r3, #8
 800196e:	f003 0307 	and.w	r3, r3, #7
}
 8001972:	4618      	mov	r0, r3
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr
 800197c:	e000ed00 	.word	0xe000ed00

08001980 <__NVIC_EnableIRQ>:
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	4603      	mov	r3, r0
 8001988:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800198a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198e:	2b00      	cmp	r3, #0
 8001990:	db0b      	blt.n	80019aa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001992:	79fb      	ldrb	r3, [r7, #7]
 8001994:	f003 021f 	and.w	r2, r3, #31
 8001998:	4907      	ldr	r1, [pc, #28]	; (80019b8 <__NVIC_EnableIRQ+0x38>)
 800199a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800199e:	095b      	lsrs	r3, r3, #5
 80019a0:	2001      	movs	r0, #1
 80019a2:	fa00 f202 	lsl.w	r2, r0, r2
 80019a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80019aa:	bf00      	nop
 80019ac:	370c      	adds	r7, #12
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	e000e100 	.word	0xe000e100

080019bc <__NVIC_SetPriority>:
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	4603      	mov	r3, r0
 80019c4:	6039      	str	r1, [r7, #0]
 80019c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	db0a      	blt.n	80019e6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	b2da      	uxtb	r2, r3
 80019d4:	490c      	ldr	r1, [pc, #48]	; (8001a08 <__NVIC_SetPriority+0x4c>)
 80019d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019da:	0112      	lsls	r2, r2, #4
 80019dc:	b2d2      	uxtb	r2, r2
 80019de:	440b      	add	r3, r1
 80019e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80019e4:	e00a      	b.n	80019fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	b2da      	uxtb	r2, r3
 80019ea:	4908      	ldr	r1, [pc, #32]	; (8001a0c <__NVIC_SetPriority+0x50>)
 80019ec:	79fb      	ldrb	r3, [r7, #7]
 80019ee:	f003 030f 	and.w	r3, r3, #15
 80019f2:	3b04      	subs	r3, #4
 80019f4:	0112      	lsls	r2, r2, #4
 80019f6:	b2d2      	uxtb	r2, r2
 80019f8:	440b      	add	r3, r1
 80019fa:	761a      	strb	r2, [r3, #24]
}
 80019fc:	bf00      	nop
 80019fe:	370c      	adds	r7, #12
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr
 8001a08:	e000e100 	.word	0xe000e100
 8001a0c:	e000ed00 	.word	0xe000ed00

08001a10 <NVIC_EncodePriority>:
{
 8001a10:	b480      	push	{r7}
 8001a12:	b089      	sub	sp, #36	; 0x24
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	60f8      	str	r0, [r7, #12]
 8001a18:	60b9      	str	r1, [r7, #8]
 8001a1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	f003 0307 	and.w	r3, r3, #7
 8001a22:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	f1c3 0307 	rsb	r3, r3, #7
 8001a2a:	2b04      	cmp	r3, #4
 8001a2c:	bf28      	it	cs
 8001a2e:	2304      	movcs	r3, #4
 8001a30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	3304      	adds	r3, #4
 8001a36:	2b06      	cmp	r3, #6
 8001a38:	d902      	bls.n	8001a40 <NVIC_EncodePriority+0x30>
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	3b03      	subs	r3, #3
 8001a3e:	e000      	b.n	8001a42 <NVIC_EncodePriority+0x32>
 8001a40:	2300      	movs	r3, #0
 8001a42:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a44:	f04f 32ff 	mov.w	r2, #4294967295
 8001a48:	69bb      	ldr	r3, [r7, #24]
 8001a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4e:	43da      	mvns	r2, r3
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	401a      	ands	r2, r3
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a58:	f04f 31ff 	mov.w	r1, #4294967295
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a62:	43d9      	mvns	r1, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a68:	4313      	orrs	r3, r2
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3724      	adds	r7, #36	; 0x24
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
	...

08001a78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	3b01      	subs	r3, #1
 8001a84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a88:	d301      	bcc.n	8001a8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e00f      	b.n	8001aae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a8e:	4a0a      	ldr	r2, [pc, #40]	; (8001ab8 <SysTick_Config+0x40>)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	3b01      	subs	r3, #1
 8001a94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a96:	210f      	movs	r1, #15
 8001a98:	f04f 30ff 	mov.w	r0, #4294967295
 8001a9c:	f7ff ff8e 	bl	80019bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001aa0:	4b05      	ldr	r3, [pc, #20]	; (8001ab8 <SysTick_Config+0x40>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001aa6:	4b04      	ldr	r3, [pc, #16]	; (8001ab8 <SysTick_Config+0x40>)
 8001aa8:	2207      	movs	r2, #7
 8001aaa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	e000e010 	.word	0xe000e010

08001abc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	f7ff ff29 	bl	800191c <__NVIC_SetPriorityGrouping>
}
 8001aca:	bf00      	nop
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}

08001ad2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	b086      	sub	sp, #24
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	4603      	mov	r3, r0
 8001ada:	60b9      	str	r1, [r7, #8]
 8001adc:	607a      	str	r2, [r7, #4]
 8001ade:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ae4:	f7ff ff3e 	bl	8001964 <__NVIC_GetPriorityGrouping>
 8001ae8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	68b9      	ldr	r1, [r7, #8]
 8001aee:	6978      	ldr	r0, [r7, #20]
 8001af0:	f7ff ff8e 	bl	8001a10 <NVIC_EncodePriority>
 8001af4:	4602      	mov	r2, r0
 8001af6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001afa:	4611      	mov	r1, r2
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff ff5d 	bl	80019bc <__NVIC_SetPriority>
}
 8001b02:	bf00      	nop
 8001b04:	3718      	adds	r7, #24
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	b082      	sub	sp, #8
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	4603      	mov	r3, r0
 8001b12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7ff ff31 	bl	8001980 <__NVIC_EnableIRQ>
}
 8001b1e:	bf00      	nop
 8001b20:	3708      	adds	r7, #8
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}

08001b26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b26:	b580      	push	{r7, lr}
 8001b28:	b082      	sub	sp, #8
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f7ff ffa2 	bl	8001a78 <SysTick_Config>
 8001b34:	4603      	mov	r3, r0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}

08001b3e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	b084      	sub	sp, #16
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b46:	2300      	movs	r3, #0
 8001b48:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	d005      	beq.n	8001b62 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2204      	movs	r2, #4
 8001b5a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	73fb      	strb	r3, [r7, #15]
 8001b60:	e029      	b.n	8001bb6 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f022 020e 	bic.w	r2, r2, #14
 8001b70:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f022 0201 	bic.w	r2, r2, #1
 8001b80:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b86:	f003 021c 	and.w	r2, r3, #28
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8e:	2101      	movs	r1, #1
 8001b90:	fa01 f202 	lsl.w	r2, r1, r2
 8001b94:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2201      	movs	r2, #1
 8001b9a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d003      	beq.n	8001bb6 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	4798      	blx	r3
    }
  }
  return status;
 8001bb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3710      	adds	r7, #16
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b087      	sub	sp, #28
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bce:	e154      	b.n	8001e7a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	2101      	movs	r1, #1
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bdc:	4013      	ands	r3, r2
 8001bde:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	f000 8146 	beq.w	8001e74 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d00b      	beq.n	8001c08 <HAL_GPIO_Init+0x48>
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	2b02      	cmp	r3, #2
 8001bf6:	d007      	beq.n	8001c08 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001bfc:	2b11      	cmp	r3, #17
 8001bfe:	d003      	beq.n	8001c08 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	2b12      	cmp	r3, #18
 8001c06:	d130      	bne.n	8001c6a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	005b      	lsls	r3, r3, #1
 8001c12:	2203      	movs	r2, #3
 8001c14:	fa02 f303 	lsl.w	r3, r2, r3
 8001c18:	43db      	mvns	r3, r3
 8001c1a:	693a      	ldr	r2, [r7, #16]
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	68da      	ldr	r2, [r3, #12]
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	005b      	lsls	r3, r3, #1
 8001c28:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2c:	693a      	ldr	r2, [r7, #16]
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	693a      	ldr	r2, [r7, #16]
 8001c36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c3e:	2201      	movs	r2, #1
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	fa02 f303 	lsl.w	r3, r2, r3
 8001c46:	43db      	mvns	r3, r3
 8001c48:	693a      	ldr	r2, [r7, #16]
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	091b      	lsrs	r3, r3, #4
 8001c54:	f003 0201 	and.w	r2, r3, #1
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5e:	693a      	ldr	r2, [r7, #16]
 8001c60:	4313      	orrs	r3, r2
 8001c62:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	693a      	ldr	r2, [r7, #16]
 8001c68:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	68db      	ldr	r3, [r3, #12]
 8001c6e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	005b      	lsls	r3, r3, #1
 8001c74:	2203      	movs	r2, #3
 8001c76:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7a:	43db      	mvns	r3, r3
 8001c7c:	693a      	ldr	r2, [r7, #16]
 8001c7e:	4013      	ands	r3, r2
 8001c80:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	689a      	ldr	r2, [r3, #8]
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	005b      	lsls	r3, r3, #1
 8001c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8e:	693a      	ldr	r2, [r7, #16]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	693a      	ldr	r2, [r7, #16]
 8001c98:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d003      	beq.n	8001caa <HAL_GPIO_Init+0xea>
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	2b12      	cmp	r3, #18
 8001ca8:	d123      	bne.n	8001cf2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	08da      	lsrs	r2, r3, #3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	3208      	adds	r2, #8
 8001cb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cb6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	f003 0307 	and.w	r3, r3, #7
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	220f      	movs	r2, #15
 8001cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc6:	43db      	mvns	r3, r3
 8001cc8:	693a      	ldr	r2, [r7, #16]
 8001cca:	4013      	ands	r3, r2
 8001ccc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	691a      	ldr	r2, [r3, #16]
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	f003 0307 	and.w	r3, r3, #7
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	fa02 f303 	lsl.w	r3, r2, r3
 8001cde:	693a      	ldr	r2, [r7, #16]
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	08da      	lsrs	r2, r3, #3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	3208      	adds	r2, #8
 8001cec:	6939      	ldr	r1, [r7, #16]
 8001cee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	005b      	lsls	r3, r3, #1
 8001cfc:	2203      	movs	r2, #3
 8001cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001d02:	43db      	mvns	r3, r3
 8001d04:	693a      	ldr	r2, [r7, #16]
 8001d06:	4013      	ands	r3, r2
 8001d08:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	f003 0203 	and.w	r2, r3, #3
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	005b      	lsls	r3, r3, #1
 8001d16:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1a:	693a      	ldr	r2, [r7, #16]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	693a      	ldr	r2, [r7, #16]
 8001d24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	f000 80a0 	beq.w	8001e74 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d34:	4b58      	ldr	r3, [pc, #352]	; (8001e98 <HAL_GPIO_Init+0x2d8>)
 8001d36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d38:	4a57      	ldr	r2, [pc, #348]	; (8001e98 <HAL_GPIO_Init+0x2d8>)
 8001d3a:	f043 0301 	orr.w	r3, r3, #1
 8001d3e:	6613      	str	r3, [r2, #96]	; 0x60
 8001d40:	4b55      	ldr	r3, [pc, #340]	; (8001e98 <HAL_GPIO_Init+0x2d8>)
 8001d42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d44:	f003 0301 	and.w	r3, r3, #1
 8001d48:	60bb      	str	r3, [r7, #8]
 8001d4a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d4c:	4a53      	ldr	r2, [pc, #332]	; (8001e9c <HAL_GPIO_Init+0x2dc>)
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	089b      	lsrs	r3, r3, #2
 8001d52:	3302      	adds	r3, #2
 8001d54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d58:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	f003 0303 	and.w	r3, r3, #3
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	220f      	movs	r2, #15
 8001d64:	fa02 f303 	lsl.w	r3, r2, r3
 8001d68:	43db      	mvns	r3, r3
 8001d6a:	693a      	ldr	r2, [r7, #16]
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001d76:	d019      	beq.n	8001dac <HAL_GPIO_Init+0x1ec>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	4a49      	ldr	r2, [pc, #292]	; (8001ea0 <HAL_GPIO_Init+0x2e0>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d013      	beq.n	8001da8 <HAL_GPIO_Init+0x1e8>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	4a48      	ldr	r2, [pc, #288]	; (8001ea4 <HAL_GPIO_Init+0x2e4>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d00d      	beq.n	8001da4 <HAL_GPIO_Init+0x1e4>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	4a47      	ldr	r2, [pc, #284]	; (8001ea8 <HAL_GPIO_Init+0x2e8>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d007      	beq.n	8001da0 <HAL_GPIO_Init+0x1e0>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	4a46      	ldr	r2, [pc, #280]	; (8001eac <HAL_GPIO_Init+0x2ec>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d101      	bne.n	8001d9c <HAL_GPIO_Init+0x1dc>
 8001d98:	2304      	movs	r3, #4
 8001d9a:	e008      	b.n	8001dae <HAL_GPIO_Init+0x1ee>
 8001d9c:	2307      	movs	r3, #7
 8001d9e:	e006      	b.n	8001dae <HAL_GPIO_Init+0x1ee>
 8001da0:	2303      	movs	r3, #3
 8001da2:	e004      	b.n	8001dae <HAL_GPIO_Init+0x1ee>
 8001da4:	2302      	movs	r3, #2
 8001da6:	e002      	b.n	8001dae <HAL_GPIO_Init+0x1ee>
 8001da8:	2301      	movs	r3, #1
 8001daa:	e000      	b.n	8001dae <HAL_GPIO_Init+0x1ee>
 8001dac:	2300      	movs	r3, #0
 8001dae:	697a      	ldr	r2, [r7, #20]
 8001db0:	f002 0203 	and.w	r2, r2, #3
 8001db4:	0092      	lsls	r2, r2, #2
 8001db6:	4093      	lsls	r3, r2
 8001db8:	693a      	ldr	r2, [r7, #16]
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001dbe:	4937      	ldr	r1, [pc, #220]	; (8001e9c <HAL_GPIO_Init+0x2dc>)
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	089b      	lsrs	r3, r3, #2
 8001dc4:	3302      	adds	r3, #2
 8001dc6:	693a      	ldr	r2, [r7, #16]
 8001dc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001dcc:	4b38      	ldr	r3, [pc, #224]	; (8001eb0 <HAL_GPIO_Init+0x2f0>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	43db      	mvns	r3, r3
 8001dd6:	693a      	ldr	r2, [r7, #16]
 8001dd8:	4013      	ands	r3, r2
 8001dda:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d003      	beq.n	8001df0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001de8:	693a      	ldr	r2, [r7, #16]
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001df0:	4a2f      	ldr	r2, [pc, #188]	; (8001eb0 <HAL_GPIO_Init+0x2f0>)
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001df6:	4b2e      	ldr	r3, [pc, #184]	; (8001eb0 <HAL_GPIO_Init+0x2f0>)
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	43db      	mvns	r3, r3
 8001e00:	693a      	ldr	r2, [r7, #16]
 8001e02:	4013      	ands	r3, r2
 8001e04:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d003      	beq.n	8001e1a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001e12:	693a      	ldr	r2, [r7, #16]
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e1a:	4a25      	ldr	r2, [pc, #148]	; (8001eb0 <HAL_GPIO_Init+0x2f0>)
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e20:	4b23      	ldr	r3, [pc, #140]	; (8001eb0 <HAL_GPIO_Init+0x2f0>)
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	43db      	mvns	r3, r3
 8001e2a:	693a      	ldr	r2, [r7, #16]
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d003      	beq.n	8001e44 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001e3c:	693a      	ldr	r2, [r7, #16]
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e44:	4a1a      	ldr	r2, [pc, #104]	; (8001eb0 <HAL_GPIO_Init+0x2f0>)
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001e4a:	4b19      	ldr	r3, [pc, #100]	; (8001eb0 <HAL_GPIO_Init+0x2f0>)
 8001e4c:	68db      	ldr	r3, [r3, #12]
 8001e4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	43db      	mvns	r3, r3
 8001e54:	693a      	ldr	r2, [r7, #16]
 8001e56:	4013      	ands	r3, r2
 8001e58:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d003      	beq.n	8001e6e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001e66:	693a      	ldr	r2, [r7, #16]
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e6e:	4a10      	ldr	r2, [pc, #64]	; (8001eb0 <HAL_GPIO_Init+0x2f0>)
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	3301      	adds	r3, #1
 8001e78:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	fa22 f303 	lsr.w	r3, r2, r3
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	f47f aea3 	bne.w	8001bd0 <HAL_GPIO_Init+0x10>
  }
}
 8001e8a:	bf00      	nop
 8001e8c:	371c      	adds	r7, #28
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	40021000 	.word	0x40021000
 8001e9c:	40010000 	.word	0x40010000
 8001ea0:	48000400 	.word	0x48000400
 8001ea4:	48000800 	.word	0x48000800
 8001ea8:	48000c00 	.word	0x48000c00
 8001eac:	48001000 	.word	0x48001000
 8001eb0:	40010400 	.word	0x40010400

08001eb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b089      	sub	sp, #36	; 0x24
 8001eb8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	61fb      	str	r3, [r7, #28]
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ec2:	4b3d      	ldr	r3, [pc, #244]	; (8001fb8 <HAL_RCC_GetSysClockFreq+0x104>)
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	f003 030c 	and.w	r3, r3, #12
 8001eca:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ecc:	4b3a      	ldr	r3, [pc, #232]	; (8001fb8 <HAL_RCC_GetSysClockFreq+0x104>)
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	f003 0303 	and.w	r3, r3, #3
 8001ed4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d005      	beq.n	8001ee8 <HAL_RCC_GetSysClockFreq+0x34>
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	2b0c      	cmp	r3, #12
 8001ee0:	d121      	bne.n	8001f26 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d11e      	bne.n	8001f26 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001ee8:	4b33      	ldr	r3, [pc, #204]	; (8001fb8 <HAL_RCC_GetSysClockFreq+0x104>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0308 	and.w	r3, r3, #8
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d107      	bne.n	8001f04 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001ef4:	4b30      	ldr	r3, [pc, #192]	; (8001fb8 <HAL_RCC_GetSysClockFreq+0x104>)
 8001ef6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001efa:	0a1b      	lsrs	r3, r3, #8
 8001efc:	f003 030f 	and.w	r3, r3, #15
 8001f00:	61fb      	str	r3, [r7, #28]
 8001f02:	e005      	b.n	8001f10 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001f04:	4b2c      	ldr	r3, [pc, #176]	; (8001fb8 <HAL_RCC_GetSysClockFreq+0x104>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	091b      	lsrs	r3, r3, #4
 8001f0a:	f003 030f 	and.w	r3, r3, #15
 8001f0e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001f10:	4a2a      	ldr	r2, [pc, #168]	; (8001fbc <HAL_RCC_GetSysClockFreq+0x108>)
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f18:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d10d      	bne.n	8001f3c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f24:	e00a      	b.n	8001f3c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	2b04      	cmp	r3, #4
 8001f2a:	d102      	bne.n	8001f32 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001f2c:	4b24      	ldr	r3, [pc, #144]	; (8001fc0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001f2e:	61bb      	str	r3, [r7, #24]
 8001f30:	e004      	b.n	8001f3c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	2b08      	cmp	r3, #8
 8001f36:	d101      	bne.n	8001f3c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f38:	4b22      	ldr	r3, [pc, #136]	; (8001fc4 <HAL_RCC_GetSysClockFreq+0x110>)
 8001f3a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	2b0c      	cmp	r3, #12
 8001f40:	d133      	bne.n	8001faa <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f42:	4b1d      	ldr	r3, [pc, #116]	; (8001fb8 <HAL_RCC_GetSysClockFreq+0x104>)
 8001f44:	68db      	ldr	r3, [r3, #12]
 8001f46:	f003 0303 	and.w	r3, r3, #3
 8001f4a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d002      	beq.n	8001f58 <HAL_RCC_GetSysClockFreq+0xa4>
 8001f52:	2b03      	cmp	r3, #3
 8001f54:	d003      	beq.n	8001f5e <HAL_RCC_GetSysClockFreq+0xaa>
 8001f56:	e005      	b.n	8001f64 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001f58:	4b19      	ldr	r3, [pc, #100]	; (8001fc0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001f5a:	617b      	str	r3, [r7, #20]
      break;
 8001f5c:	e005      	b.n	8001f6a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001f5e:	4b19      	ldr	r3, [pc, #100]	; (8001fc4 <HAL_RCC_GetSysClockFreq+0x110>)
 8001f60:	617b      	str	r3, [r7, #20]
      break;
 8001f62:	e002      	b.n	8001f6a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	617b      	str	r3, [r7, #20]
      break;
 8001f68:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f6a:	4b13      	ldr	r3, [pc, #76]	; (8001fb8 <HAL_RCC_GetSysClockFreq+0x104>)
 8001f6c:	68db      	ldr	r3, [r3, #12]
 8001f6e:	091b      	lsrs	r3, r3, #4
 8001f70:	f003 0307 	and.w	r3, r3, #7
 8001f74:	3301      	adds	r3, #1
 8001f76:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001f78:	4b0f      	ldr	r3, [pc, #60]	; (8001fb8 <HAL_RCC_GetSysClockFreq+0x104>)
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	0a1b      	lsrs	r3, r3, #8
 8001f7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f82:	697a      	ldr	r2, [r7, #20]
 8001f84:	fb02 f203 	mul.w	r2, r2, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f8e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f90:	4b09      	ldr	r3, [pc, #36]	; (8001fb8 <HAL_RCC_GetSysClockFreq+0x104>)
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	0e5b      	lsrs	r3, r3, #25
 8001f96:	f003 0303 	and.w	r3, r3, #3
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	005b      	lsls	r3, r3, #1
 8001f9e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001fa0:	697a      	ldr	r2, [r7, #20]
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fa8:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001faa:	69bb      	ldr	r3, [r7, #24]
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3724      	adds	r7, #36	; 0x24
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr
 8001fb8:	40021000 	.word	0x40021000
 8001fbc:	080043f8 	.word	0x080043f8
 8001fc0:	00f42400 	.word	0x00f42400
 8001fc4:	007a1200 	.word	0x007a1200

08001fc8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fcc:	4b03      	ldr	r3, [pc, #12]	; (8001fdc <HAL_RCC_GetHCLKFreq+0x14>)
 8001fce:	681b      	ldr	r3, [r3, #0]
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	20000000 	.word	0x20000000

08001fe0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001fe4:	f7ff fff0 	bl	8001fc8 <HAL_RCC_GetHCLKFreq>
 8001fe8:	4601      	mov	r1, r0
 8001fea:	4b06      	ldr	r3, [pc, #24]	; (8002004 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	0a1b      	lsrs	r3, r3, #8
 8001ff0:	f003 0307 	and.w	r3, r3, #7
 8001ff4:	4a04      	ldr	r2, [pc, #16]	; (8002008 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001ff6:	5cd3      	ldrb	r3, [r2, r3]
 8001ff8:	f003 031f 	and.w	r3, r3, #31
 8001ffc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002000:	4618      	mov	r0, r3
 8002002:	bd80      	pop	{r7, pc}
 8002004:	40021000 	.word	0x40021000
 8002008:	080043f0 	.word	0x080043f0

0800200c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002010:	f7ff ffda 	bl	8001fc8 <HAL_RCC_GetHCLKFreq>
 8002014:	4601      	mov	r1, r0
 8002016:	4b06      	ldr	r3, [pc, #24]	; (8002030 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	0adb      	lsrs	r3, r3, #11
 800201c:	f003 0307 	and.w	r3, r3, #7
 8002020:	4a04      	ldr	r2, [pc, #16]	; (8002034 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002022:	5cd3      	ldrb	r3, [r2, r3]
 8002024:	f003 031f 	and.w	r3, r3, #31
 8002028:	fa21 f303 	lsr.w	r3, r1, r3
}
 800202c:	4618      	mov	r0, r3
 800202e:	bd80      	pop	{r7, pc}
 8002030:	40021000 	.word	0x40021000
 8002034:	080043f0 	.word	0x080043f0

08002038 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d101      	bne.n	800204a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e040      	b.n	80020cc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800204e:	2b00      	cmp	r3, #0
 8002050:	d106      	bne.n	8002060 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f7ff f9fe 	bl	800145c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2224      	movs	r2, #36	; 0x24
 8002064:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f022 0201 	bic.w	r2, r2, #1
 8002074:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f000 fa1a 	bl	80024b0 <UART_SetConfig>
 800207c:	4603      	mov	r3, r0
 800207e:	2b01      	cmp	r3, #1
 8002080:	d101      	bne.n	8002086 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e022      	b.n	80020cc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208a:	2b00      	cmp	r3, #0
 800208c:	d002      	beq.n	8002094 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f000 fd22 	bl	8002ad8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	685a      	ldr	r2, [r3, #4]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80020a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	689a      	ldr	r2, [r3, #8]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80020b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f042 0201 	orr.w	r2, r2, #1
 80020c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f000 fda9 	bl	8002c1c <UART_CheckIdleState>
 80020ca:	4603      	mov	r3, r0
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3708      	adds	r7, #8
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b08a      	sub	sp, #40	; 0x28
 80020d8:	af02      	add	r7, sp, #8
 80020da:	60f8      	str	r0, [r7, #12]
 80020dc:	60b9      	str	r1, [r7, #8]
 80020de:	603b      	str	r3, [r7, #0]
 80020e0:	4613      	mov	r3, r2
 80020e2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020e8:	2b20      	cmp	r3, #32
 80020ea:	f040 8081 	bne.w	80021f0 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d002      	beq.n	80020fa <HAL_UART_Transmit+0x26>
 80020f4:	88fb      	ldrh	r3, [r7, #6]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d101      	bne.n	80020fe <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e079      	b.n	80021f2 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002104:	2b01      	cmp	r3, #1
 8002106:	d101      	bne.n	800210c <HAL_UART_Transmit+0x38>
 8002108:	2302      	movs	r3, #2
 800210a:	e072      	b.n	80021f2 <HAL_UART_Transmit+0x11e>
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	2201      	movs	r2, #1
 8002110:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2200      	movs	r2, #0
 8002118:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2221      	movs	r2, #33	; 0x21
 800211e:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002120:	f7ff fbf0 	bl	8001904 <HAL_GetTick>
 8002124:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	88fa      	ldrh	r2, [r7, #6]
 800212a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	88fa      	ldrh	r2, [r7, #6]
 8002132:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800213e:	d108      	bne.n	8002152 <HAL_UART_Transmit+0x7e>
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	691b      	ldr	r3, [r3, #16]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d104      	bne.n	8002152 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8002148:	2300      	movs	r3, #0
 800214a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	61bb      	str	r3, [r7, #24]
 8002150:	e003      	b.n	800215a <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002156:	2300      	movs	r3, #0
 8002158:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	2200      	movs	r2, #0
 800215e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8002162:	e02d      	b.n	80021c0 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	9300      	str	r3, [sp, #0]
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	2200      	movs	r2, #0
 800216c:	2180      	movs	r1, #128	; 0x80
 800216e:	68f8      	ldr	r0, [r7, #12]
 8002170:	f000 fd99 	bl	8002ca6 <UART_WaitOnFlagUntilTimeout>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d001      	beq.n	800217e <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 800217a:	2303      	movs	r3, #3
 800217c:	e039      	b.n	80021f2 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d10b      	bne.n	800219c <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002184:	69bb      	ldr	r3, [r7, #24]
 8002186:	881a      	ldrh	r2, [r3, #0]
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002190:	b292      	uxth	r2, r2
 8002192:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002194:	69bb      	ldr	r3, [r7, #24]
 8002196:	3302      	adds	r3, #2
 8002198:	61bb      	str	r3, [r7, #24]
 800219a:	e008      	b.n	80021ae <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	781a      	ldrb	r2, [r3, #0]
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	b292      	uxth	r2, r2
 80021a6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	3301      	adds	r3, #1
 80021ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80021b4:	b29b      	uxth	r3, r3
 80021b6:	3b01      	subs	r3, #1
 80021b8:	b29a      	uxth	r2, r3
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80021c6:	b29b      	uxth	r3, r3
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d1cb      	bne.n	8002164 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	9300      	str	r3, [sp, #0]
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	2200      	movs	r2, #0
 80021d4:	2140      	movs	r1, #64	; 0x40
 80021d6:	68f8      	ldr	r0, [r7, #12]
 80021d8:	f000 fd65 	bl	8002ca6 <UART_WaitOnFlagUntilTimeout>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d001      	beq.n	80021e6 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e005      	b.n	80021f2 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	2220      	movs	r2, #32
 80021ea:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 80021ec:	2300      	movs	r3, #0
 80021ee:	e000      	b.n	80021f2 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80021f0:	2302      	movs	r3, #2
  }
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3720      	adds	r7, #32
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
	...

080021fc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b088      	sub	sp, #32
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	69db      	ldr	r3, [r3, #28]
 800220a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800221c:	69fa      	ldr	r2, [r7, #28]
 800221e:	f640 030f 	movw	r3, #2063	; 0x80f
 8002222:	4013      	ands	r3, r2
 8002224:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d113      	bne.n	8002254 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	f003 0320 	and.w	r3, r3, #32
 8002232:	2b00      	cmp	r3, #0
 8002234:	d00e      	beq.n	8002254 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	f003 0320 	and.w	r3, r3, #32
 800223c:	2b00      	cmp	r3, #0
 800223e:	d009      	beq.n	8002254 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002244:	2b00      	cmp	r3, #0
 8002246:	f000 8114 	beq.w	8002472 <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	4798      	blx	r3
      }
      return;
 8002252:	e10e      	b.n	8002472 <HAL_UART_IRQHandler+0x276>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	2b00      	cmp	r3, #0
 8002258:	f000 80d6 	beq.w	8002408 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	f003 0301 	and.w	r3, r3, #1
 8002262:	2b00      	cmp	r3, #0
 8002264:	d105      	bne.n	8002272 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8002266:	69bb      	ldr	r3, [r7, #24]
 8002268:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800226c:	2b00      	cmp	r3, #0
 800226e:	f000 80cb 	beq.w	8002408 <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	f003 0301 	and.w	r3, r3, #1
 8002278:	2b00      	cmp	r3, #0
 800227a:	d00e      	beq.n	800229a <HAL_UART_IRQHandler+0x9e>
 800227c:	69bb      	ldr	r3, [r7, #24]
 800227e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002282:	2b00      	cmp	r3, #0
 8002284:	d009      	beq.n	800229a <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	2201      	movs	r2, #1
 800228c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002292:	f043 0201 	orr.w	r2, r3, #1
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	f003 0302 	and.w	r3, r3, #2
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d00e      	beq.n	80022c2 <HAL_UART_IRQHandler+0xc6>
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	f003 0301 	and.w	r3, r3, #1
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d009      	beq.n	80022c2 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	2202      	movs	r2, #2
 80022b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80022ba:	f043 0204 	orr.w	r2, r3, #4
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	f003 0304 	and.w	r3, r3, #4
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d00e      	beq.n	80022ea <HAL_UART_IRQHandler+0xee>
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	f003 0301 	and.w	r3, r3, #1
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d009      	beq.n	80022ea <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	2204      	movs	r2, #4
 80022dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80022e2:	f043 0202 	orr.w	r2, r3, #2
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	f003 0308 	and.w	r3, r3, #8
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d013      	beq.n	800231c <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80022f4:	69bb      	ldr	r3, [r7, #24]
 80022f6:	f003 0320 	and.w	r3, r3, #32
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d104      	bne.n	8002308 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002304:	2b00      	cmp	r3, #0
 8002306:	d009      	beq.n	800231c <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2208      	movs	r2, #8
 800230e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002314:	f043 0208 	orr.w	r2, r3, #8
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002322:	2b00      	cmp	r3, #0
 8002324:	d00f      	beq.n	8002346 <HAL_UART_IRQHandler+0x14a>
 8002326:	69bb      	ldr	r3, [r7, #24]
 8002328:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d00a      	beq.n	8002346 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002338:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800233e:	f043 0220 	orr.w	r2, r3, #32
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800234a:	2b00      	cmp	r3, #0
 800234c:	f000 8093 	beq.w	8002476 <HAL_UART_IRQHandler+0x27a>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	f003 0320 	and.w	r3, r3, #32
 8002356:	2b00      	cmp	r3, #0
 8002358:	d00c      	beq.n	8002374 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	f003 0320 	and.w	r3, r3, #32
 8002360:	2b00      	cmp	r3, #0
 8002362:	d007      	beq.n	8002374 <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002368:	2b00      	cmp	r3, #0
 800236a:	d003      	beq.n	8002374 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002378:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002384:	2b40      	cmp	r3, #64	; 0x40
 8002386:	d004      	beq.n	8002392 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800238e:	2b00      	cmp	r3, #0
 8002390:	d031      	beq.n	80023f6 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f000 fd02 	bl	8002d9c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023a2:	2b40      	cmp	r3, #64	; 0x40
 80023a4:	d123      	bne.n	80023ee <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	689a      	ldr	r2, [r3, #8]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023b4:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d013      	beq.n	80023e6 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023c2:	4a30      	ldr	r2, [pc, #192]	; (8002484 <HAL_UART_IRQHandler+0x288>)
 80023c4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023ca:	4618      	mov	r0, r3
 80023cc:	f7ff fbb7 	bl	8001b3e <HAL_DMA_Abort_IT>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d016      	beq.n	8002404 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80023e0:	4610      	mov	r0, r2
 80023e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023e4:	e00e      	b.n	8002404 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f000 f858 	bl	800249c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023ec:	e00a      	b.n	8002404 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f000 f854 	bl	800249c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023f4:	e006      	b.n	8002404 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f000 f850 	bl	800249c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2200      	movs	r2, #0
 8002400:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8002402:	e038      	b.n	8002476 <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002404:	bf00      	nop
    return;
 8002406:	e036      	b.n	8002476 <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d00d      	beq.n	800242e <HAL_UART_IRQHandler+0x232>
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d008      	beq.n	800242e <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002424:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f000 fd07 	bl	8002e3a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800242c:	e026      	b.n	800247c <HAL_UART_IRQHandler+0x280>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002434:	2b00      	cmp	r3, #0
 8002436:	d00d      	beq.n	8002454 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002438:	69bb      	ldr	r3, [r7, #24]
 800243a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800243e:	2b00      	cmp	r3, #0
 8002440:	d008      	beq.n	8002454 <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002446:	2b00      	cmp	r3, #0
 8002448:	d017      	beq.n	800247a <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	4798      	blx	r3
    }
    return;
 8002452:	e012      	b.n	800247a <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800245a:	2b00      	cmp	r3, #0
 800245c:	d00e      	beq.n	800247c <HAL_UART_IRQHandler+0x280>
 800245e:	69bb      	ldr	r3, [r7, #24]
 8002460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002464:	2b00      	cmp	r3, #0
 8002466:	d009      	beq.n	800247c <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	f000 fccd 	bl	8002e08 <UART_EndTransmit_IT>
    return;
 800246e:	bf00      	nop
 8002470:	e004      	b.n	800247c <HAL_UART_IRQHandler+0x280>
      return;
 8002472:	bf00      	nop
 8002474:	e002      	b.n	800247c <HAL_UART_IRQHandler+0x280>
    return;
 8002476:	bf00      	nop
 8002478:	e000      	b.n	800247c <HAL_UART_IRQHandler+0x280>
    return;
 800247a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800247c:	3720      	adds	r7, #32
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	08002ddd 	.word	0x08002ddd

08002488 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002490:	bf00      	nop
 8002492:	370c      	adds	r7, #12
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr

0800249c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80024a4:	bf00      	nop
 80024a6:	370c      	adds	r7, #12
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr

080024b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80024b0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80024b4:	b08a      	sub	sp, #40	; 0x28
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80024ba:	2300      	movs	r3, #0
 80024bc:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 80024be:	2300      	movs	r3, #0
 80024c0:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80024c2:	2300      	movs	r3, #0
 80024c4:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	689a      	ldr	r2, [r3, #8]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	691b      	ldr	r3, [r3, #16]
 80024ce:	431a      	orrs	r2, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	695b      	ldr	r3, [r3, #20]
 80024d4:	431a      	orrs	r2, r3
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	69db      	ldr	r3, [r3, #28]
 80024da:	4313      	orrs	r3, r2
 80024dc:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	4bbc      	ldr	r3, [pc, #752]	; (80027d8 <UART_SetConfig+0x328>)
 80024e6:	4013      	ands	r3, r2
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	6812      	ldr	r2, [r2, #0]
 80024ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024ee:	430b      	orrs	r3, r1
 80024f0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	68da      	ldr	r2, [r3, #12]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	430a      	orrs	r2, r1
 8002506:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	699b      	ldr	r3, [r3, #24]
 800250c:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4ab2      	ldr	r2, [pc, #712]	; (80027dc <UART_SetConfig+0x32c>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d004      	beq.n	8002522 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6a1b      	ldr	r3, [r3, #32]
 800251c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800251e:	4313      	orrs	r3, r2
 8002520:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002532:	430a      	orrs	r2, r1
 8002534:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4aa9      	ldr	r2, [pc, #676]	; (80027e0 <UART_SetConfig+0x330>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d126      	bne.n	800258e <UART_SetConfig+0xde>
 8002540:	4ba8      	ldr	r3, [pc, #672]	; (80027e4 <UART_SetConfig+0x334>)
 8002542:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002546:	f003 0303 	and.w	r3, r3, #3
 800254a:	2b03      	cmp	r3, #3
 800254c:	d81a      	bhi.n	8002584 <UART_SetConfig+0xd4>
 800254e:	a201      	add	r2, pc, #4	; (adr r2, 8002554 <UART_SetConfig+0xa4>)
 8002550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002554:	08002565 	.word	0x08002565
 8002558:	08002575 	.word	0x08002575
 800255c:	0800256d 	.word	0x0800256d
 8002560:	0800257d 	.word	0x0800257d
 8002564:	2301      	movs	r3, #1
 8002566:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800256a:	e0ab      	b.n	80026c4 <UART_SetConfig+0x214>
 800256c:	2302      	movs	r3, #2
 800256e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002572:	e0a7      	b.n	80026c4 <UART_SetConfig+0x214>
 8002574:	2304      	movs	r3, #4
 8002576:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800257a:	e0a3      	b.n	80026c4 <UART_SetConfig+0x214>
 800257c:	2308      	movs	r3, #8
 800257e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002582:	e09f      	b.n	80026c4 <UART_SetConfig+0x214>
 8002584:	2310      	movs	r3, #16
 8002586:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800258a:	bf00      	nop
 800258c:	e09a      	b.n	80026c4 <UART_SetConfig+0x214>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a95      	ldr	r2, [pc, #596]	; (80027e8 <UART_SetConfig+0x338>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d138      	bne.n	800260a <UART_SetConfig+0x15a>
 8002598:	4b92      	ldr	r3, [pc, #584]	; (80027e4 <UART_SetConfig+0x334>)
 800259a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800259e:	f003 030c 	and.w	r3, r3, #12
 80025a2:	2b0c      	cmp	r3, #12
 80025a4:	d82c      	bhi.n	8002600 <UART_SetConfig+0x150>
 80025a6:	a201      	add	r2, pc, #4	; (adr r2, 80025ac <UART_SetConfig+0xfc>)
 80025a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025ac:	080025e1 	.word	0x080025e1
 80025b0:	08002601 	.word	0x08002601
 80025b4:	08002601 	.word	0x08002601
 80025b8:	08002601 	.word	0x08002601
 80025bc:	080025f1 	.word	0x080025f1
 80025c0:	08002601 	.word	0x08002601
 80025c4:	08002601 	.word	0x08002601
 80025c8:	08002601 	.word	0x08002601
 80025cc:	080025e9 	.word	0x080025e9
 80025d0:	08002601 	.word	0x08002601
 80025d4:	08002601 	.word	0x08002601
 80025d8:	08002601 	.word	0x08002601
 80025dc:	080025f9 	.word	0x080025f9
 80025e0:	2300      	movs	r3, #0
 80025e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80025e6:	e06d      	b.n	80026c4 <UART_SetConfig+0x214>
 80025e8:	2302      	movs	r3, #2
 80025ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80025ee:	e069      	b.n	80026c4 <UART_SetConfig+0x214>
 80025f0:	2304      	movs	r3, #4
 80025f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80025f6:	e065      	b.n	80026c4 <UART_SetConfig+0x214>
 80025f8:	2308      	movs	r3, #8
 80025fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80025fe:	e061      	b.n	80026c4 <UART_SetConfig+0x214>
 8002600:	2310      	movs	r3, #16
 8002602:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002606:	bf00      	nop
 8002608:	e05c      	b.n	80026c4 <UART_SetConfig+0x214>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a77      	ldr	r2, [pc, #476]	; (80027ec <UART_SetConfig+0x33c>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d125      	bne.n	8002660 <UART_SetConfig+0x1b0>
 8002614:	4b73      	ldr	r3, [pc, #460]	; (80027e4 <UART_SetConfig+0x334>)
 8002616:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800261a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800261e:	2b10      	cmp	r3, #16
 8002620:	d011      	beq.n	8002646 <UART_SetConfig+0x196>
 8002622:	2b10      	cmp	r3, #16
 8002624:	d802      	bhi.n	800262c <UART_SetConfig+0x17c>
 8002626:	2b00      	cmp	r3, #0
 8002628:	d005      	beq.n	8002636 <UART_SetConfig+0x186>
 800262a:	e014      	b.n	8002656 <UART_SetConfig+0x1a6>
 800262c:	2b20      	cmp	r3, #32
 800262e:	d006      	beq.n	800263e <UART_SetConfig+0x18e>
 8002630:	2b30      	cmp	r3, #48	; 0x30
 8002632:	d00c      	beq.n	800264e <UART_SetConfig+0x19e>
 8002634:	e00f      	b.n	8002656 <UART_SetConfig+0x1a6>
 8002636:	2300      	movs	r3, #0
 8002638:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800263c:	e042      	b.n	80026c4 <UART_SetConfig+0x214>
 800263e:	2302      	movs	r3, #2
 8002640:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002644:	e03e      	b.n	80026c4 <UART_SetConfig+0x214>
 8002646:	2304      	movs	r3, #4
 8002648:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800264c:	e03a      	b.n	80026c4 <UART_SetConfig+0x214>
 800264e:	2308      	movs	r3, #8
 8002650:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002654:	e036      	b.n	80026c4 <UART_SetConfig+0x214>
 8002656:	2310      	movs	r3, #16
 8002658:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800265c:	bf00      	nop
 800265e:	e031      	b.n	80026c4 <UART_SetConfig+0x214>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a5d      	ldr	r2, [pc, #372]	; (80027dc <UART_SetConfig+0x32c>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d129      	bne.n	80026be <UART_SetConfig+0x20e>
 800266a:	4b5e      	ldr	r3, [pc, #376]	; (80027e4 <UART_SetConfig+0x334>)
 800266c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002670:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002674:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002678:	d014      	beq.n	80026a4 <UART_SetConfig+0x1f4>
 800267a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800267e:	d802      	bhi.n	8002686 <UART_SetConfig+0x1d6>
 8002680:	2b00      	cmp	r3, #0
 8002682:	d007      	beq.n	8002694 <UART_SetConfig+0x1e4>
 8002684:	e016      	b.n	80026b4 <UART_SetConfig+0x204>
 8002686:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800268a:	d007      	beq.n	800269c <UART_SetConfig+0x1ec>
 800268c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002690:	d00c      	beq.n	80026ac <UART_SetConfig+0x1fc>
 8002692:	e00f      	b.n	80026b4 <UART_SetConfig+0x204>
 8002694:	2300      	movs	r3, #0
 8002696:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800269a:	e013      	b.n	80026c4 <UART_SetConfig+0x214>
 800269c:	2302      	movs	r3, #2
 800269e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80026a2:	e00f      	b.n	80026c4 <UART_SetConfig+0x214>
 80026a4:	2304      	movs	r3, #4
 80026a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80026aa:	e00b      	b.n	80026c4 <UART_SetConfig+0x214>
 80026ac:	2308      	movs	r3, #8
 80026ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80026b2:	e007      	b.n	80026c4 <UART_SetConfig+0x214>
 80026b4:	2310      	movs	r3, #16
 80026b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80026ba:	bf00      	nop
 80026bc:	e002      	b.n	80026c4 <UART_SetConfig+0x214>
 80026be:	2310      	movs	r3, #16
 80026c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a44      	ldr	r2, [pc, #272]	; (80027dc <UART_SetConfig+0x32c>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	f040 80fb 	bne.w	80028c6 <UART_SetConfig+0x416>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80026d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80026d4:	2b08      	cmp	r3, #8
 80026d6:	d824      	bhi.n	8002722 <UART_SetConfig+0x272>
 80026d8:	a201      	add	r2, pc, #4	; (adr r2, 80026e0 <UART_SetConfig+0x230>)
 80026da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026de:	bf00      	nop
 80026e0:	08002705 	.word	0x08002705
 80026e4:	08002723 	.word	0x08002723
 80026e8:	0800270d 	.word	0x0800270d
 80026ec:	08002723 	.word	0x08002723
 80026f0:	08002713 	.word	0x08002713
 80026f4:	08002723 	.word	0x08002723
 80026f8:	08002723 	.word	0x08002723
 80026fc:	08002723 	.word	0x08002723
 8002700:	0800271b 	.word	0x0800271b
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8002704:	f7ff fc6c 	bl	8001fe0 <HAL_RCC_GetPCLK1Freq>
 8002708:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800270a:	e00d      	b.n	8002728 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 800270c:	4b38      	ldr	r3, [pc, #224]	; (80027f0 <UART_SetConfig+0x340>)
 800270e:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002710:	e00a      	b.n	8002728 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8002712:	f7ff fbcf 	bl	8001eb4 <HAL_RCC_GetSysClockFreq>
 8002716:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002718:	e006      	b.n	8002728 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 800271a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800271e:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002720:	e002      	b.n	8002728 <UART_SetConfig+0x278>
      default:
        ret = HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	76fb      	strb	r3, [r7, #27]
        break;
 8002726:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	2b00      	cmp	r3, #0
 800272c:	f000 81c8 	beq.w	8002ac0 <UART_SetConfig+0x610>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	685a      	ldr	r2, [r3, #4]
 8002734:	4613      	mov	r3, r2
 8002736:	005b      	lsls	r3, r3, #1
 8002738:	4413      	add	r3, r2
 800273a:	697a      	ldr	r2, [r7, #20]
 800273c:	429a      	cmp	r2, r3
 800273e:	d305      	bcc.n	800274c <UART_SetConfig+0x29c>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002746:	697a      	ldr	r2, [r7, #20]
 8002748:	429a      	cmp	r2, r3
 800274a:	d902      	bls.n	8002752 <UART_SetConfig+0x2a2>
      {
        ret = HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	76fb      	strb	r3, [r7, #27]
 8002750:	e1b6      	b.n	8002ac0 <UART_SetConfig+0x610>
      }
      else
      {
        switch (clocksource)
 8002752:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002756:	2b08      	cmp	r3, #8
 8002758:	f200 80a2 	bhi.w	80028a0 <UART_SetConfig+0x3f0>
 800275c:	a201      	add	r2, pc, #4	; (adr r2, 8002764 <UART_SetConfig+0x2b4>)
 800275e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002762:	bf00      	nop
 8002764:	08002789 	.word	0x08002789
 8002768:	080028a1 	.word	0x080028a1
 800276c:	080027f5 	.word	0x080027f5
 8002770:	080028a1 	.word	0x080028a1
 8002774:	08002829 	.word	0x08002829
 8002778:	080028a1 	.word	0x080028a1
 800277c:	080028a1 	.word	0x080028a1
 8002780:	080028a1 	.word	0x080028a1
 8002784:	08002877 	.word	0x08002877
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8002788:	f7ff fc2a 	bl	8001fe0 <HAL_RCC_GetPCLK1Freq>
 800278c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	4619      	mov	r1, r3
 8002792:	f04f 0200 	mov.w	r2, #0
 8002796:	f04f 0300 	mov.w	r3, #0
 800279a:	f04f 0400 	mov.w	r4, #0
 800279e:	0214      	lsls	r4, r2, #8
 80027a0:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80027a4:	020b      	lsls	r3, r1, #8
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	6852      	ldr	r2, [r2, #4]
 80027aa:	0852      	lsrs	r2, r2, #1
 80027ac:	4611      	mov	r1, r2
 80027ae:	f04f 0200 	mov.w	r2, #0
 80027b2:	eb13 0b01 	adds.w	fp, r3, r1
 80027b6:	eb44 0c02 	adc.w	ip, r4, r2
 80027ba:	4658      	mov	r0, fp
 80027bc:	4661      	mov	r1, ip
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	f04f 0400 	mov.w	r4, #0
 80027c6:	461a      	mov	r2, r3
 80027c8:	4623      	mov	r3, r4
 80027ca:	f7fd fd51 	bl	8000270 <__aeabi_uldivmod>
 80027ce:	4603      	mov	r3, r0
 80027d0:	460c      	mov	r4, r1
 80027d2:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80027d4:	e067      	b.n	80028a6 <UART_SetConfig+0x3f6>
 80027d6:	bf00      	nop
 80027d8:	efff69f3 	.word	0xefff69f3
 80027dc:	40008000 	.word	0x40008000
 80027e0:	40013800 	.word	0x40013800
 80027e4:	40021000 	.word	0x40021000
 80027e8:	40004400 	.word	0x40004400
 80027ec:	40004800 	.word	0x40004800
 80027f0:	00f42400 	.word	0x00f42400
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	085b      	lsrs	r3, r3, #1
 80027fa:	f04f 0400 	mov.w	r4, #0
 80027fe:	49ae      	ldr	r1, [pc, #696]	; (8002ab8 <UART_SetConfig+0x608>)
 8002800:	f04f 0200 	mov.w	r2, #0
 8002804:	eb13 0b01 	adds.w	fp, r3, r1
 8002808:	eb44 0c02 	adc.w	ip, r4, r2
 800280c:	4658      	mov	r0, fp
 800280e:	4661      	mov	r1, ip
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f04f 0400 	mov.w	r4, #0
 8002818:	461a      	mov	r2, r3
 800281a:	4623      	mov	r3, r4
 800281c:	f7fd fd28 	bl	8000270 <__aeabi_uldivmod>
 8002820:	4603      	mov	r3, r0
 8002822:	460c      	mov	r4, r1
 8002824:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8002826:	e03e      	b.n	80028a6 <UART_SetConfig+0x3f6>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8002828:	f7ff fb44 	bl	8001eb4 <HAL_RCC_GetSysClockFreq>
 800282c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	4619      	mov	r1, r3
 8002832:	f04f 0200 	mov.w	r2, #0
 8002836:	f04f 0300 	mov.w	r3, #0
 800283a:	f04f 0400 	mov.w	r4, #0
 800283e:	0214      	lsls	r4, r2, #8
 8002840:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8002844:	020b      	lsls	r3, r1, #8
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	6852      	ldr	r2, [r2, #4]
 800284a:	0852      	lsrs	r2, r2, #1
 800284c:	4611      	mov	r1, r2
 800284e:	f04f 0200 	mov.w	r2, #0
 8002852:	eb13 0b01 	adds.w	fp, r3, r1
 8002856:	eb44 0c02 	adc.w	ip, r4, r2
 800285a:	4658      	mov	r0, fp
 800285c:	4661      	mov	r1, ip
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	f04f 0400 	mov.w	r4, #0
 8002866:	461a      	mov	r2, r3
 8002868:	4623      	mov	r3, r4
 800286a:	f7fd fd01 	bl	8000270 <__aeabi_uldivmod>
 800286e:	4603      	mov	r3, r0
 8002870:	460c      	mov	r4, r1
 8002872:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8002874:	e017      	b.n	80028a6 <UART_SetConfig+0x3f6>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	085b      	lsrs	r3, r3, #1
 800287c:	f04f 0400 	mov.w	r4, #0
 8002880:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8002884:	f144 0100 	adc.w	r1, r4, #0
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f04f 0400 	mov.w	r4, #0
 8002890:	461a      	mov	r2, r3
 8002892:	4623      	mov	r3, r4
 8002894:	f7fd fcec 	bl	8000270 <__aeabi_uldivmod>
 8002898:	4603      	mov	r3, r0
 800289a:	460c      	mov	r4, r1
 800289c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800289e:	e002      	b.n	80028a6 <UART_SetConfig+0x3f6>
          default:
            ret = HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	76fb      	strb	r3, [r7, #27]
            break;
 80028a4:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80028ac:	d308      	bcc.n	80028c0 <UART_SetConfig+0x410>
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80028b4:	d204      	bcs.n	80028c0 <UART_SetConfig+0x410>
        {
          huart->Instance->BRR = usartdiv;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	69fa      	ldr	r2, [r7, #28]
 80028bc:	60da      	str	r2, [r3, #12]
 80028be:	e0ff      	b.n	8002ac0 <UART_SetConfig+0x610>
        }
        else
        {
          ret = HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	76fb      	strb	r3, [r7, #27]
 80028c4:	e0fc      	b.n	8002ac0 <UART_SetConfig+0x610>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	69db      	ldr	r3, [r3, #28]
 80028ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028ce:	f040 8083 	bne.w	80029d8 <UART_SetConfig+0x528>
  {
    switch (clocksource)
 80028d2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80028d6:	2b08      	cmp	r3, #8
 80028d8:	d85e      	bhi.n	8002998 <UART_SetConfig+0x4e8>
 80028da:	a201      	add	r2, pc, #4	; (adr r2, 80028e0 <UART_SetConfig+0x430>)
 80028dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028e0:	08002905 	.word	0x08002905
 80028e4:	08002925 	.word	0x08002925
 80028e8:	08002945 	.word	0x08002945
 80028ec:	08002999 	.word	0x08002999
 80028f0:	08002961 	.word	0x08002961
 80028f4:	08002999 	.word	0x08002999
 80028f8:	08002999 	.word	0x08002999
 80028fc:	08002999 	.word	0x08002999
 8002900:	08002981 	.word	0x08002981
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002904:	f7ff fb6c 	bl	8001fe0 <HAL_RCC_GetPCLK1Freq>
 8002908:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	005a      	lsls	r2, r3, #1
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	085b      	lsrs	r3, r3, #1
 8002914:	441a      	add	r2, r3
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	fbb2 f3f3 	udiv	r3, r2, r3
 800291e:	b29b      	uxth	r3, r3
 8002920:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002922:	e03c      	b.n	800299e <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002924:	f7ff fb72 	bl	800200c <HAL_RCC_GetPCLK2Freq>
 8002928:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	005a      	lsls	r2, r3, #1
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	085b      	lsrs	r3, r3, #1
 8002934:	441a      	add	r2, r3
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	fbb2 f3f3 	udiv	r3, r2, r3
 800293e:	b29b      	uxth	r3, r3
 8002940:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002942:	e02c      	b.n	800299e <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	085b      	lsrs	r3, r3, #1
 800294a:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800294e:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	6852      	ldr	r2, [r2, #4]
 8002956:	fbb3 f3f2 	udiv	r3, r3, r2
 800295a:	b29b      	uxth	r3, r3
 800295c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800295e:	e01e      	b.n	800299e <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002960:	f7ff faa8 	bl	8001eb4 <HAL_RCC_GetSysClockFreq>
 8002964:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	005a      	lsls	r2, r3, #1
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	085b      	lsrs	r3, r3, #1
 8002970:	441a      	add	r2, r3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	fbb2 f3f3 	udiv	r3, r2, r3
 800297a:	b29b      	uxth	r3, r3
 800297c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800297e:	e00e      	b.n	800299e <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	085b      	lsrs	r3, r3, #1
 8002986:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002992:	b29b      	uxth	r3, r3
 8002994:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002996:	e002      	b.n	800299e <UART_SetConfig+0x4ee>
      default:
        ret = HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	76fb      	strb	r3, [r7, #27]
        break;
 800299c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	2b0f      	cmp	r3, #15
 80029a2:	d916      	bls.n	80029d2 <UART_SetConfig+0x522>
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029aa:	d212      	bcs.n	80029d2 <UART_SetConfig+0x522>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	b29b      	uxth	r3, r3
 80029b0:	f023 030f 	bic.w	r3, r3, #15
 80029b4:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	085b      	lsrs	r3, r3, #1
 80029ba:	b29b      	uxth	r3, r3
 80029bc:	f003 0307 	and.w	r3, r3, #7
 80029c0:	b29a      	uxth	r2, r3
 80029c2:	89fb      	ldrh	r3, [r7, #14]
 80029c4:	4313      	orrs	r3, r2
 80029c6:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	89fa      	ldrh	r2, [r7, #14]
 80029ce:	60da      	str	r2, [r3, #12]
 80029d0:	e076      	b.n	8002ac0 <UART_SetConfig+0x610>
    }
    else
    {
      ret = HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	76fb      	strb	r3, [r7, #27]
 80029d6:	e073      	b.n	8002ac0 <UART_SetConfig+0x610>
    }
  }
  else
  {
    switch (clocksource)
 80029d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80029dc:	2b08      	cmp	r3, #8
 80029de:	d85c      	bhi.n	8002a9a <UART_SetConfig+0x5ea>
 80029e0:	a201      	add	r2, pc, #4	; (adr r2, 80029e8 <UART_SetConfig+0x538>)
 80029e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029e6:	bf00      	nop
 80029e8:	08002a0d 	.word	0x08002a0d
 80029ec:	08002a2b 	.word	0x08002a2b
 80029f0:	08002a49 	.word	0x08002a49
 80029f4:	08002a9b 	.word	0x08002a9b
 80029f8:	08002a65 	.word	0x08002a65
 80029fc:	08002a9b 	.word	0x08002a9b
 8002a00:	08002a9b 	.word	0x08002a9b
 8002a04:	08002a9b 	.word	0x08002a9b
 8002a08:	08002a83 	.word	0x08002a83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a0c:	f7ff fae8 	bl	8001fe0 <HAL_RCC_GetPCLK1Freq>
 8002a10:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	085a      	lsrs	r2, r3, #1
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	441a      	add	r2, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002a28:	e03a      	b.n	8002aa0 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002a2a:	f7ff faef 	bl	800200c <HAL_RCC_GetPCLK2Freq>
 8002a2e:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	085a      	lsrs	r2, r3, #1
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	441a      	add	r2, r3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002a46:	e02b      	b.n	8002aa0 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	085b      	lsrs	r3, r3, #1
 8002a4e:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8002a52:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	6852      	ldr	r2, [r2, #4]
 8002a5a:	fbb3 f3f2 	udiv	r3, r3, r2
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002a62:	e01d      	b.n	8002aa0 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a64:	f7ff fa26 	bl	8001eb4 <HAL_RCC_GetSysClockFreq>
 8002a68:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	085a      	lsrs	r2, r3, #1
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	441a      	add	r2, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a7c:	b29b      	uxth	r3, r3
 8002a7e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002a80:	e00e      	b.n	8002aa0 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	085b      	lsrs	r3, r3, #1
 8002a88:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a94:	b29b      	uxth	r3, r3
 8002a96:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002a98:	e002      	b.n	8002aa0 <UART_SetConfig+0x5f0>
      default:
        ret = HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	76fb      	strb	r3, [r7, #27]
        break;
 8002a9e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	2b0f      	cmp	r3, #15
 8002aa4:	d90a      	bls.n	8002abc <UART_SetConfig+0x60c>
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002aac:	d206      	bcs.n	8002abc <UART_SetConfig+0x60c>
    {
      huart->Instance->BRR = usartdiv;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	69fa      	ldr	r2, [r7, #28]
 8002ab4:	60da      	str	r2, [r3, #12]
 8002ab6:	e003      	b.n	8002ac0 <UART_SetConfig+0x610>
 8002ab8:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8002acc:	7efb      	ldrb	r3, [r7, #27]
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3728      	adds	r7, #40	; 0x28
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08002ad8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae4:	f003 0301 	and.w	r3, r3, #1
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d00a      	beq.n	8002b02 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	430a      	orrs	r2, r1
 8002b00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b06:	f003 0302 	and.w	r3, r3, #2
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d00a      	beq.n	8002b24 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	430a      	orrs	r2, r1
 8002b22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b28:	f003 0304 	and.w	r3, r3, #4
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d00a      	beq.n	8002b46 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	430a      	orrs	r2, r1
 8002b44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4a:	f003 0308 	and.w	r3, r3, #8
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d00a      	beq.n	8002b68 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	430a      	orrs	r2, r1
 8002b66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b6c:	f003 0310 	and.w	r3, r3, #16
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d00a      	beq.n	8002b8a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	430a      	orrs	r2, r1
 8002b88:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8e:	f003 0320 	and.w	r3, r3, #32
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d00a      	beq.n	8002bac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	430a      	orrs	r2, r1
 8002baa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d01a      	beq.n	8002bee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	430a      	orrs	r2, r1
 8002bcc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002bd6:	d10a      	bne.n	8002bee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	430a      	orrs	r2, r1
 8002bec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d00a      	beq.n	8002c10 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	430a      	orrs	r2, r1
 8002c0e:	605a      	str	r2, [r3, #4]
  }
}
 8002c10:	bf00      	nop
 8002c12:	370c      	adds	r7, #12
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr

08002c1c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b086      	sub	sp, #24
 8002c20:	af02      	add	r7, sp, #8
 8002c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2200      	movs	r2, #0
 8002c28:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002c2a:	f7fe fe6b 	bl	8001904 <HAL_GetTick>
 8002c2e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0308 	and.w	r3, r3, #8
 8002c3a:	2b08      	cmp	r3, #8
 8002c3c:	d10e      	bne.n	8002c5c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c3e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002c42:	9300      	str	r3, [sp, #0]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2200      	movs	r2, #0
 8002c48:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f000 f82a 	bl	8002ca6 <UART_WaitOnFlagUntilTimeout>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d001      	beq.n	8002c5c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002c58:	2303      	movs	r3, #3
 8002c5a:	e020      	b.n	8002c9e <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0304 	and.w	r3, r3, #4
 8002c66:	2b04      	cmp	r3, #4
 8002c68:	d10e      	bne.n	8002c88 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c6a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002c6e:	9300      	str	r3, [sp, #0]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2200      	movs	r2, #0
 8002c74:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	f000 f814 	bl	8002ca6 <UART_WaitOnFlagUntilTimeout>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d001      	beq.n	8002c88 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002c84:	2303      	movs	r3, #3
 8002c86:	e00a      	b.n	8002c9e <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2220      	movs	r2, #32
 8002c8c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2220      	movs	r2, #32
 8002c92:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2200      	movs	r2, #0
 8002c98:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8002c9c:	2300      	movs	r3, #0
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3710      	adds	r7, #16
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}

08002ca6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002ca6:	b580      	push	{r7, lr}
 8002ca8:	b084      	sub	sp, #16
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	60f8      	str	r0, [r7, #12]
 8002cae:	60b9      	str	r1, [r7, #8]
 8002cb0:	603b      	str	r3, [r7, #0]
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cb6:	e05d      	b.n	8002d74 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cb8:	69bb      	ldr	r3, [r7, #24]
 8002cba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cbe:	d059      	beq.n	8002d74 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cc0:	f7fe fe20 	bl	8001904 <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	69ba      	ldr	r2, [r7, #24]
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d302      	bcc.n	8002cd6 <UART_WaitOnFlagUntilTimeout+0x30>
 8002cd0:	69bb      	ldr	r3, [r7, #24]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d11b      	bne.n	8002d0e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002ce4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	689a      	ldr	r2, [r3, #8]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f022 0201 	bic.w	r2, r2, #1
 8002cf4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2220      	movs	r2, #32
 8002cfa:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2220      	movs	r2, #32
 8002d00:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2200      	movs	r2, #0
 8002d06:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e042      	b.n	8002d94 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0304 	and.w	r3, r3, #4
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d02b      	beq.n	8002d74 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	69db      	ldr	r3, [r3, #28]
 8002d22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d2a:	d123      	bne.n	8002d74 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d34:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002d44:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	689a      	ldr	r2, [r3, #8]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f022 0201 	bic.w	r2, r2, #1
 8002d54:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2220      	movs	r2, #32
 8002d5a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2220      	movs	r2, #32
 8002d60:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2220      	movs	r2, #32
 8002d66:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8002d70:	2303      	movs	r3, #3
 8002d72:	e00f      	b.n	8002d94 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	69da      	ldr	r2, [r3, #28]
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	68ba      	ldr	r2, [r7, #8]
 8002d80:	429a      	cmp	r2, r3
 8002d82:	bf0c      	ite	eq
 8002d84:	2301      	moveq	r3, #1
 8002d86:	2300      	movne	r3, #0
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	79fb      	ldrb	r3, [r7, #7]
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d092      	beq.n	8002cb8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d92:	2300      	movs	r3, #0
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3710      	adds	r7, #16
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002db2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	689a      	ldr	r2, [r3, #8]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f022 0201 	bic.w	r2, r2, #1
 8002dc2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2220      	movs	r2, #32
 8002dc8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	661a      	str	r2, [r3, #96]	; 0x60
}
 8002dd0:	bf00      	nop
 8002dd2:	370c      	adds	r7, #12
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr

08002ddc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b084      	sub	sp, #16
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2200      	movs	r2, #0
 8002dee:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2200      	movs	r2, #0
 8002df6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002dfa:	68f8      	ldr	r0, [r7, #12]
 8002dfc:	f7ff fb4e 	bl	800249c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002e00:	bf00      	nop
 8002e02:	3710      	adds	r7, #16
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}

08002e08 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e1e:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2220      	movs	r2, #32
 8002e24:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	f7ff fb2b 	bl	8002488 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002e32:	bf00      	nop
 8002e34:	3708      	adds	r7, #8
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}

08002e3a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8002e3a:	b480      	push	{r7}
 8002e3c:	b083      	sub	sp, #12
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8002e42:	bf00      	nop
 8002e44:	370c      	adds	r7, #12
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr

08002e4e <LL_ADC_SetCommonClock>:
{
 8002e4e:	b480      	push	{r7}
 8002e50:	b083      	sub	sp, #12
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	6078      	str	r0, [r7, #4]
 8002e56:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	431a      	orrs	r2, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	609a      	str	r2, [r3, #8]
}
 8002e68:	bf00      	nop
 8002e6a:	370c      	adds	r7, #12
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr

08002e74 <LL_ADC_REG_SetSequencerLength>:
{
 8002e74:	b480      	push	{r7}
 8002e76:	b083      	sub	sp, #12
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e82:	f023 020f 	bic.w	r2, r3, #15
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	431a      	orrs	r2, r3
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002e8e:	bf00      	nop
 8002e90:	370c      	adds	r7, #12
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr

08002e9a <LL_ADC_IsEnabled>:
{
 8002e9a:	b480      	push	{r7}
 8002e9c:	b083      	sub	sp, #12
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	f003 0301 	and.w	r3, r3, #1
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d101      	bne.n	8002eb2 <LL_ADC_IsEnabled+0x18>
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e000      	b.n	8002eb4 <LL_ADC_IsEnabled+0x1a>
 8002eb2:	2300      	movs	r3, #0
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	370c      	adds	r7, #12
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr

08002ec0 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b084      	sub	sp, #16
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 serie, setting of these features is conditioned to   */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0UL)
 8002ece:	480a      	ldr	r0, [pc, #40]	; (8002ef8 <LL_ADC_CommonInit+0x38>)
 8002ed0:	f7ff ffe3 	bl	8002e9a <LL_ADC_IsEnabled>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d106      	bne.n	8002ee8 <LL_ADC_CommonInit+0x28>
                 ADC_CommonInitStruct->CommonClock
                 | LL_ADC_MULTI_INDEPENDENT
                );
    }
#else
    LL_ADC_SetCommonClock(ADCxy_COMMON, ADC_CommonInitStruct->CommonClock);
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4619      	mov	r1, r3
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	f7ff ffb4 	bl	8002e4e <LL_ADC_SetCommonClock>
 8002ee6:	e001      	b.n	8002eec <LL_ADC_CommonInit+0x2c>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8002eec:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3710      	adds	r7, #16
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	50040000 	.word	0x50040000

08002efc <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b084      	sub	sp, #16
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8002f06:	2300      	movs	r3, #0
 8002f08:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_LOW_POWER(ADC_InitStruct->LowPowerMode));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f7ff ffc5 	bl	8002e9a <LL_ADC_IsEnabled>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d111      	bne.n	8002f3a <LL_ADC_Init+0x3e>
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR,
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	68db      	ldr	r3, [r3, #12]
 8002f1a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f1e:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8002f22:	683a      	ldr	r2, [r7, #0]
 8002f24:	6811      	ldr	r1, [r2, #0]
 8002f26:	683a      	ldr	r2, [r7, #0]
 8002f28:	6852      	ldr	r2, [r2, #4]
 8002f2a:	4311      	orrs	r1, r2
 8002f2c:	683a      	ldr	r2, [r7, #0]
 8002f2e:	6892      	ldr	r2, [r2, #8]
 8002f30:	430a      	orrs	r2, r1
 8002f32:	431a      	orrs	r2, r3
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	60da      	str	r2, [r3, #12]
 8002f38:	e001      	b.n	8002f3e <LL_ADC_Init+0x42>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8002f3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3710      	adds	r7, #16
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}

08002f48 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b084      	sub	sp, #16
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8002f52:	2300      	movs	r3, #0
 8002f54:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(ADC_REG_InitStruct->DMATransfer));
  assert_param(IS_LL_ADC_REG_OVR_DATA_BEHAVIOR(ADC_REG_InitStruct->Overrun));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f7ff ff9f 	bl	8002e9a <LL_ADC_IsEnabled>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d132      	bne.n	8002fc8 <LL_ADC_REG_Init+0x80>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 serie, ADC trigger edge is set to value 0x0 by     */
    /*       setting of trigger source to SW start.                           */
    if (ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d015      	beq.n	8002f96 <LL_ADC_REG_Init+0x4e>
    {
      MODIFY_REG(ADCx->CFGR,
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	68da      	ldr	r2, [r3, #12]
 8002f6e:	4b1a      	ldr	r3, [pc, #104]	; (8002fd8 <LL_ADC_REG_Init+0x90>)
 8002f70:	4013      	ands	r3, r2
 8002f72:	683a      	ldr	r2, [r7, #0]
 8002f74:	6811      	ldr	r1, [r2, #0]
 8002f76:	683a      	ldr	r2, [r7, #0]
 8002f78:	6892      	ldr	r2, [r2, #8]
 8002f7a:	4311      	orrs	r1, r2
 8002f7c:	683a      	ldr	r2, [r7, #0]
 8002f7e:	68d2      	ldr	r2, [r2, #12]
 8002f80:	4311      	orrs	r1, r2
 8002f82:	683a      	ldr	r2, [r7, #0]
 8002f84:	6912      	ldr	r2, [r2, #16]
 8002f86:	4311      	orrs	r1, r2
 8002f88:	683a      	ldr	r2, [r7, #0]
 8002f8a:	6952      	ldr	r2, [r2, #20]
 8002f8c:	430a      	orrs	r2, r1
 8002f8e:	431a      	orrs	r2, r3
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	60da      	str	r2, [r3, #12]
 8002f94:	e011      	b.n	8002fba <LL_ADC_REG_Init+0x72>
                 | ADC_REG_InitStruct->Overrun
                );
    }
    else
    {
      MODIFY_REG(ADCx->CFGR,
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	68da      	ldr	r2, [r3, #12]
 8002f9a:	4b0f      	ldr	r3, [pc, #60]	; (8002fd8 <LL_ADC_REG_Init+0x90>)
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	683a      	ldr	r2, [r7, #0]
 8002fa0:	6811      	ldr	r1, [r2, #0]
 8002fa2:	683a      	ldr	r2, [r7, #0]
 8002fa4:	68d2      	ldr	r2, [r2, #12]
 8002fa6:	4311      	orrs	r1, r2
 8002fa8:	683a      	ldr	r2, [r7, #0]
 8002faa:	6912      	ldr	r2, [r2, #16]
 8002fac:	4311      	orrs	r1, r2
 8002fae:	683a      	ldr	r2, [r7, #0]
 8002fb0:	6952      	ldr	r2, [r2, #20]
 8002fb2:	430a      	orrs	r2, r1
 8002fb4:	431a      	orrs	r2, r3
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	60da      	str	r2, [r3, #12]
                 | ADC_REG_InitStruct->Overrun
                );
    }

    /* Set ADC group regular sequencer length and scan direction */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	4619      	mov	r1, r3
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	f7ff ff57 	bl	8002e74 <LL_ADC_REG_SetSequencerLength>
 8002fc6:	e001      	b.n	8002fcc <LL_ADC_REG_Init+0x84>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8002fcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3710      	adds	r7, #16
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	fff0c03c 	.word	0xfff0c03c

08002fdc <LL_GPIO_SetPinMode>:
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b089      	sub	sp, #36	; 0x24
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	60f8      	str	r0, [r7, #12]
 8002fe4:	60b9      	str	r1, [r7, #8]
 8002fe6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	fa93 f3a3 	rbit	r3, r3
 8002ff6:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	fab3 f383 	clz	r3, r3
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	005b      	lsls	r3, r3, #1
 8003002:	2103      	movs	r1, #3
 8003004:	fa01 f303 	lsl.w	r3, r1, r3
 8003008:	43db      	mvns	r3, r3
 800300a:	401a      	ands	r2, r3
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	fa93 f3a3 	rbit	r3, r3
 8003016:	61bb      	str	r3, [r7, #24]
  return result;
 8003018:	69bb      	ldr	r3, [r7, #24]
 800301a:	fab3 f383 	clz	r3, r3
 800301e:	b2db      	uxtb	r3, r3
 8003020:	005b      	lsls	r3, r3, #1
 8003022:	6879      	ldr	r1, [r7, #4]
 8003024:	fa01 f303 	lsl.w	r3, r1, r3
 8003028:	431a      	orrs	r2, r3
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	601a      	str	r2, [r3, #0]
}
 800302e:	bf00      	nop
 8003030:	3724      	adds	r7, #36	; 0x24
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr

0800303a <LL_GPIO_SetPinOutputType>:
{
 800303a:	b480      	push	{r7}
 800303c:	b085      	sub	sp, #20
 800303e:	af00      	add	r7, sp, #0
 8003040:	60f8      	str	r0, [r7, #12]
 8003042:	60b9      	str	r1, [r7, #8]
 8003044:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	685a      	ldr	r2, [r3, #4]
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	43db      	mvns	r3, r3
 800304e:	401a      	ands	r2, r3
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	6879      	ldr	r1, [r7, #4]
 8003054:	fb01 f303 	mul.w	r3, r1, r3
 8003058:	431a      	orrs	r2, r3
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	605a      	str	r2, [r3, #4]
}
 800305e:	bf00      	nop
 8003060:	3714      	adds	r7, #20
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr

0800306a <LL_GPIO_SetPinSpeed>:
{
 800306a:	b480      	push	{r7}
 800306c:	b089      	sub	sp, #36	; 0x24
 800306e:	af00      	add	r7, sp, #0
 8003070:	60f8      	str	r0, [r7, #12]
 8003072:	60b9      	str	r1, [r7, #8]
 8003074:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	689a      	ldr	r2, [r3, #8]
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	fa93 f3a3 	rbit	r3, r3
 8003084:	613b      	str	r3, [r7, #16]
  return result;
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	fab3 f383 	clz	r3, r3
 800308c:	b2db      	uxtb	r3, r3
 800308e:	005b      	lsls	r3, r3, #1
 8003090:	2103      	movs	r1, #3
 8003092:	fa01 f303 	lsl.w	r3, r1, r3
 8003096:	43db      	mvns	r3, r3
 8003098:	401a      	ands	r2, r3
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	fa93 f3a3 	rbit	r3, r3
 80030a4:	61bb      	str	r3, [r7, #24]
  return result;
 80030a6:	69bb      	ldr	r3, [r7, #24]
 80030a8:	fab3 f383 	clz	r3, r3
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	005b      	lsls	r3, r3, #1
 80030b0:	6879      	ldr	r1, [r7, #4]
 80030b2:	fa01 f303 	lsl.w	r3, r1, r3
 80030b6:	431a      	orrs	r2, r3
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	609a      	str	r2, [r3, #8]
}
 80030bc:	bf00      	nop
 80030be:	3724      	adds	r7, #36	; 0x24
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr

080030c8 <LL_GPIO_SetPinPull>:
{
 80030c8:	b480      	push	{r7}
 80030ca:	b089      	sub	sp, #36	; 0x24
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	60f8      	str	r0, [r7, #12]
 80030d0:	60b9      	str	r1, [r7, #8]
 80030d2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	68da      	ldr	r2, [r3, #12]
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	fa93 f3a3 	rbit	r3, r3
 80030e2:	613b      	str	r3, [r7, #16]
  return result;
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	fab3 f383 	clz	r3, r3
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	005b      	lsls	r3, r3, #1
 80030ee:	2103      	movs	r1, #3
 80030f0:	fa01 f303 	lsl.w	r3, r1, r3
 80030f4:	43db      	mvns	r3, r3
 80030f6:	401a      	ands	r2, r3
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	fa93 f3a3 	rbit	r3, r3
 8003102:	61bb      	str	r3, [r7, #24]
  return result;
 8003104:	69bb      	ldr	r3, [r7, #24]
 8003106:	fab3 f383 	clz	r3, r3
 800310a:	b2db      	uxtb	r3, r3
 800310c:	005b      	lsls	r3, r3, #1
 800310e:	6879      	ldr	r1, [r7, #4]
 8003110:	fa01 f303 	lsl.w	r3, r1, r3
 8003114:	431a      	orrs	r2, r3
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	60da      	str	r2, [r3, #12]
}
 800311a:	bf00      	nop
 800311c:	3724      	adds	r7, #36	; 0x24
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr

08003126 <LL_GPIO_SetAFPin_0_7>:
{
 8003126:	b480      	push	{r7}
 8003128:	b089      	sub	sp, #36	; 0x24
 800312a:	af00      	add	r7, sp, #0
 800312c:	60f8      	str	r0, [r7, #12]
 800312e:	60b9      	str	r1, [r7, #8]
 8003130:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	6a1a      	ldr	r2, [r3, #32]
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	fa93 f3a3 	rbit	r3, r3
 8003140:	613b      	str	r3, [r7, #16]
  return result;
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	fab3 f383 	clz	r3, r3
 8003148:	b2db      	uxtb	r3, r3
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	210f      	movs	r1, #15
 800314e:	fa01 f303 	lsl.w	r3, r1, r3
 8003152:	43db      	mvns	r3, r3
 8003154:	401a      	ands	r2, r3
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	fa93 f3a3 	rbit	r3, r3
 8003160:	61bb      	str	r3, [r7, #24]
  return result;
 8003162:	69bb      	ldr	r3, [r7, #24]
 8003164:	fab3 f383 	clz	r3, r3
 8003168:	b2db      	uxtb	r3, r3
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	6879      	ldr	r1, [r7, #4]
 800316e:	fa01 f303 	lsl.w	r3, r1, r3
 8003172:	431a      	orrs	r2, r3
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	621a      	str	r2, [r3, #32]
}
 8003178:	bf00      	nop
 800317a:	3724      	adds	r7, #36	; 0x24
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr

08003184 <LL_GPIO_SetAFPin_8_15>:
{
 8003184:	b480      	push	{r7}
 8003186:	b089      	sub	sp, #36	; 0x24
 8003188:	af00      	add	r7, sp, #0
 800318a:	60f8      	str	r0, [r7, #12]
 800318c:	60b9      	str	r1, [r7, #8]
 800318e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	0a1b      	lsrs	r3, r3, #8
 8003198:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	fa93 f3a3 	rbit	r3, r3
 80031a0:	613b      	str	r3, [r7, #16]
  return result;
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	fab3 f383 	clz	r3, r3
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	210f      	movs	r1, #15
 80031ae:	fa01 f303 	lsl.w	r3, r1, r3
 80031b2:	43db      	mvns	r3, r3
 80031b4:	401a      	ands	r2, r3
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	0a1b      	lsrs	r3, r3, #8
 80031ba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031bc:	69fb      	ldr	r3, [r7, #28]
 80031be:	fa93 f3a3 	rbit	r3, r3
 80031c2:	61bb      	str	r3, [r7, #24]
  return result;
 80031c4:	69bb      	ldr	r3, [r7, #24]
 80031c6:	fab3 f383 	clz	r3, r3
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	6879      	ldr	r1, [r7, #4]
 80031d0:	fa01 f303 	lsl.w	r3, r1, r3
 80031d4:	431a      	orrs	r2, r3
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	625a      	str	r2, [r3, #36]	; 0x24
}
 80031da:	bf00      	nop
 80031dc:	3724      	adds	r7, #36	; 0x24
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr

080031e6 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80031e6:	b580      	push	{r7, lr}
 80031e8:	b086      	sub	sp, #24
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	6078      	str	r0, [r7, #4]
 80031ee:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	fa93 f3a3 	rbit	r3, r3
 80031fc:	60bb      	str	r3, [r7, #8]
  return result;
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	fab3 f383 	clz	r3, r3
 8003204:	b2db      	uxtb	r3, r3
 8003206:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8003208:	e040      	b.n	800328c <LL_GPIO_Init+0xa6>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	2101      	movs	r1, #1
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	fa01 f303 	lsl.w	r3, r1, r3
 8003216:	4013      	ands	r3, r2
 8003218:	613b      	str	r3, [r7, #16]

    if (currentpin != 0x00u)
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d032      	beq.n	8003286 <LL_GPIO_Init+0xa0>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	461a      	mov	r2, r3
 8003226:	6939      	ldr	r1, [r7, #16]
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	f7ff fed7 	bl	8002fdc <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	2b01      	cmp	r3, #1
 8003234:	d003      	beq.n	800323e <LL_GPIO_Init+0x58>
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	2b02      	cmp	r3, #2
 800323c:	d106      	bne.n	800324c <LL_GPIO_Init+0x66>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	461a      	mov	r2, r3
 8003244:	6939      	ldr	r1, [r7, #16]
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f7ff ff0f 	bl	800306a <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	691b      	ldr	r3, [r3, #16]
 8003250:	461a      	mov	r2, r3
 8003252:	6939      	ldr	r1, [r7, #16]
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f7ff ff37 	bl	80030c8 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	2b02      	cmp	r3, #2
 8003260:	d111      	bne.n	8003286 <LL_GPIO_Init+0xa0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	2bff      	cmp	r3, #255	; 0xff
 8003266:	d807      	bhi.n	8003278 <LL_GPIO_Init+0x92>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	695b      	ldr	r3, [r3, #20]
 800326c:	461a      	mov	r2, r3
 800326e:	6939      	ldr	r1, [r7, #16]
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f7ff ff58 	bl	8003126 <LL_GPIO_SetAFPin_0_7>
 8003276:	e006      	b.n	8003286 <LL_GPIO_Init+0xa0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	695b      	ldr	r3, [r3, #20]
 800327c:	461a      	mov	r2, r3
 800327e:	6939      	ldr	r1, [r7, #16]
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	f7ff ff7f 	bl	8003184 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	3301      	adds	r3, #1
 800328a:	617b      	str	r3, [r7, #20]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	fa22 f303 	lsr.w	r3, r2, r3
 8003296:	2b00      	cmp	r3, #0
 8003298:	d1b7      	bne.n	800320a <LL_GPIO_Init+0x24>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d003      	beq.n	80032aa <LL_GPIO_Init+0xc4>
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d107      	bne.n	80032ba <LL_GPIO_Init+0xd4>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	6819      	ldr	r1, [r3, #0]
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	68db      	ldr	r3, [r3, #12]
 80032b2:	461a      	mov	r2, r3
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f7ff fec0 	bl	800303a <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 80032ba:	2300      	movs	r3, #0
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3718      	adds	r7, #24
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}

080032c4 <LL_SPI_IsEnabled>:
{
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032d4:	2b40      	cmp	r3, #64	; 0x40
 80032d6:	d101      	bne.n	80032dc <LL_SPI_IsEnabled+0x18>
 80032d8:	2301      	movs	r3, #1
 80032da:	e000      	b.n	80032de <LL_SPI_IsEnabled+0x1a>
 80032dc:	2300      	movs	r3, #0
}
 80032de:	4618      	mov	r0, r3
 80032e0:	370c      	adds	r7, #12
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr

080032ea <LL_SPI_SetCRCPolynomial>:
{
 80032ea:	b480      	push	{r7}
 80032ec:	b083      	sub	sp, #12
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	6078      	str	r0, [r7, #4]
 80032f2:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	461a      	mov	r2, r3
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	611a      	str	r2, [r3, #16]
}
 80032fe:	bf00      	nop
 8003300:	370c      	adds	r7, #12
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr

0800330a <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 800330a:	b580      	push	{r7, lr}
 800330c:	b084      	sub	sp, #16
 800330e:	af00      	add	r7, sp, #0
 8003310:	6078      	str	r0, [r7, #4]
 8003312:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f7ff ffd3 	bl	80032c4 <LL_SPI_IsEnabled>
 800331e:	4603      	mov	r3, r0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d13b      	bne.n	800339c <LL_SPI_Init+0x92>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800332c:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 8003330:	683a      	ldr	r2, [r7, #0]
 8003332:	6811      	ldr	r1, [r2, #0]
 8003334:	683a      	ldr	r2, [r7, #0]
 8003336:	6852      	ldr	r2, [r2, #4]
 8003338:	4311      	orrs	r1, r2
 800333a:	683a      	ldr	r2, [r7, #0]
 800333c:	68d2      	ldr	r2, [r2, #12]
 800333e:	4311      	orrs	r1, r2
 8003340:	683a      	ldr	r2, [r7, #0]
 8003342:	6912      	ldr	r2, [r2, #16]
 8003344:	4311      	orrs	r1, r2
 8003346:	683a      	ldr	r2, [r7, #0]
 8003348:	6952      	ldr	r2, [r2, #20]
 800334a:	4311      	orrs	r1, r2
 800334c:	683a      	ldr	r2, [r7, #0]
 800334e:	6992      	ldr	r2, [r2, #24]
 8003350:	4311      	orrs	r1, r2
 8003352:	683a      	ldr	r2, [r7, #0]
 8003354:	69d2      	ldr	r2, [r2, #28]
 8003356:	4311      	orrs	r1, r2
 8003358:	683a      	ldr	r2, [r7, #0]
 800335a:	6a12      	ldr	r2, [r2, #32]
 800335c:	430a      	orrs	r2, r1
 800335e:	431a      	orrs	r2, r3
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	601a      	str	r2, [r3, #0]
    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - DataWidth:          DS[3:0] bits
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2,
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800336c:	f023 0304 	bic.w	r3, r3, #4
 8003370:	683a      	ldr	r2, [r7, #0]
 8003372:	6891      	ldr	r1, [r2, #8]
 8003374:	683a      	ldr	r2, [r7, #0]
 8003376:	6952      	ldr	r2, [r2, #20]
 8003378:	0c12      	lsrs	r2, r2, #16
 800337a:	430a      	orrs	r2, r1
 800337c:	431a      	orrs	r2, r3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	6a1b      	ldr	r3, [r3, #32]
 8003386:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800338a:	d105      	bne.n	8003398 <LL_SPI_Init+0x8e>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003390:	4619      	mov	r1, r3
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f7ff ffa9 	bl	80032ea <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8003398:	2300      	movs	r3, #0
 800339a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800339c:	7bfb      	ldrb	r3, [r7, #15]
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3710      	adds	r7, #16
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}

080033a6 <LL_TIM_SetPrescaler>:
{
 80033a6:	b480      	push	{r7}
 80033a8:	b083      	sub	sp, #12
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	6078      	str	r0, [r7, #4]
 80033ae:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	683a      	ldr	r2, [r7, #0]
 80033b4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80033b6:	bf00      	nop
 80033b8:	370c      	adds	r7, #12
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr

080033c2 <LL_TIM_SetAutoReload>:
{
 80033c2:	b480      	push	{r7}
 80033c4:	b083      	sub	sp, #12
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	6078      	str	r0, [r7, #4]
 80033ca:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	683a      	ldr	r2, [r7, #0]
 80033d0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80033d2:	bf00      	nop
 80033d4:	370c      	adds	r7, #12
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr

080033de <LL_TIM_SetRepetitionCounter>:
{
 80033de:	b480      	push	{r7}
 80033e0:	b083      	sub	sp, #12
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	6078      	str	r0, [r7, #4]
 80033e6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	683a      	ldr	r2, [r7, #0]
 80033ec:	631a      	str	r2, [r3, #48]	; 0x30
}
 80033ee:	bf00      	nop
 80033f0:	370c      	adds	r7, #12
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr

080033fa <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80033fa:	b480      	push	{r7}
 80033fc:	b083      	sub	sp, #12
 80033fe:	af00      	add	r7, sp, #0
 8003400:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	695b      	ldr	r3, [r3, #20]
 8003406:	f043 0201 	orr.w	r2, r3, #1
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	615a      	str	r2, [r3, #20]
}
 800340e:	bf00      	nop
 8003410:	370c      	adds	r7, #12
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr
	...

0800341c <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b084      	sub	sp, #16
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	4a27      	ldr	r2, [pc, #156]	; (80034cc <LL_TIM_Init+0xb0>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d003      	beq.n	800343c <LL_TIM_Init+0x20>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800343a:	d106      	bne.n	800344a <LL_TIM_Init+0x2e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	4313      	orrs	r3, r2
 8003448:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4a1f      	ldr	r2, [pc, #124]	; (80034cc <LL_TIM_Init+0xb0>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d00b      	beq.n	800346a <LL_TIM_Init+0x4e>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003458:	d007      	beq.n	800346a <LL_TIM_Init+0x4e>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4a1c      	ldr	r2, [pc, #112]	; (80034d0 <LL_TIM_Init+0xb4>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d003      	beq.n	800346a <LL_TIM_Init+0x4e>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	4a1b      	ldr	r2, [pc, #108]	; (80034d4 <LL_TIM_Init+0xb8>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d106      	bne.n	8003478 <LL_TIM_Init+0x5c>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	4313      	orrs	r3, r2
 8003476:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	68fa      	ldr	r2, [r7, #12]
 800347c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	4619      	mov	r1, r3
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f7ff ff9c 	bl	80033c2 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	881b      	ldrh	r3, [r3, #0]
 800348e:	4619      	mov	r1, r3
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f7ff ff88 	bl	80033a6 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4a0c      	ldr	r2, [pc, #48]	; (80034cc <LL_TIM_Init+0xb0>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d007      	beq.n	80034ae <LL_TIM_Init+0x92>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4a0b      	ldr	r2, [pc, #44]	; (80034d0 <LL_TIM_Init+0xb4>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d003      	beq.n	80034ae <LL_TIM_Init+0x92>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4a0a      	ldr	r2, [pc, #40]	; (80034d4 <LL_TIM_Init+0xb8>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d105      	bne.n	80034ba <LL_TIM_Init+0x9e>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	7c1b      	ldrb	r3, [r3, #16]
 80034b2:	4619      	mov	r1, r3
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f7ff ff92 	bl	80033de <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f7ff ff9d 	bl	80033fa <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 80034c0:	2300      	movs	r3, #0
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3710      	adds	r7, #16
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	40012c00 	.word	0x40012c00
 80034d0:	40014000 	.word	0x40014000
 80034d4:	40014400 	.word	0x40014400

080034d8 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80034e0:	4a04      	ldr	r2, [pc, #16]	; (80034f4 <LL_SetSystemCoreClock+0x1c>)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6013      	str	r3, [r2, #0]
}
 80034e6:	bf00      	nop
 80034e8:	370c      	adds	r7, #12
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr
 80034f2:	bf00      	nop
 80034f4:	20000000 	.word	0x20000000

080034f8 <__errno>:
 80034f8:	4b01      	ldr	r3, [pc, #4]	; (8003500 <__errno+0x8>)
 80034fa:	6818      	ldr	r0, [r3, #0]
 80034fc:	4770      	bx	lr
 80034fe:	bf00      	nop
 8003500:	2000000c 	.word	0x2000000c

08003504 <__libc_init_array>:
 8003504:	b570      	push	{r4, r5, r6, lr}
 8003506:	4e0d      	ldr	r6, [pc, #52]	; (800353c <__libc_init_array+0x38>)
 8003508:	4c0d      	ldr	r4, [pc, #52]	; (8003540 <__libc_init_array+0x3c>)
 800350a:	1ba4      	subs	r4, r4, r6
 800350c:	10a4      	asrs	r4, r4, #2
 800350e:	2500      	movs	r5, #0
 8003510:	42a5      	cmp	r5, r4
 8003512:	d109      	bne.n	8003528 <__libc_init_array+0x24>
 8003514:	4e0b      	ldr	r6, [pc, #44]	; (8003544 <__libc_init_array+0x40>)
 8003516:	4c0c      	ldr	r4, [pc, #48]	; (8003548 <__libc_init_array+0x44>)
 8003518:	f000 ff46 	bl	80043a8 <_init>
 800351c:	1ba4      	subs	r4, r4, r6
 800351e:	10a4      	asrs	r4, r4, #2
 8003520:	2500      	movs	r5, #0
 8003522:	42a5      	cmp	r5, r4
 8003524:	d105      	bne.n	8003532 <__libc_init_array+0x2e>
 8003526:	bd70      	pop	{r4, r5, r6, pc}
 8003528:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800352c:	4798      	blx	r3
 800352e:	3501      	adds	r5, #1
 8003530:	e7ee      	b.n	8003510 <__libc_init_array+0xc>
 8003532:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003536:	4798      	blx	r3
 8003538:	3501      	adds	r5, #1
 800353a:	e7f2      	b.n	8003522 <__libc_init_array+0x1e>
 800353c:	080044c8 	.word	0x080044c8
 8003540:	080044c8 	.word	0x080044c8
 8003544:	080044c8 	.word	0x080044c8
 8003548:	080044cc 	.word	0x080044cc

0800354c <memset>:
 800354c:	4402      	add	r2, r0
 800354e:	4603      	mov	r3, r0
 8003550:	4293      	cmp	r3, r2
 8003552:	d100      	bne.n	8003556 <memset+0xa>
 8003554:	4770      	bx	lr
 8003556:	f803 1b01 	strb.w	r1, [r3], #1
 800355a:	e7f9      	b.n	8003550 <memset+0x4>

0800355c <_free_r>:
 800355c:	b538      	push	{r3, r4, r5, lr}
 800355e:	4605      	mov	r5, r0
 8003560:	2900      	cmp	r1, #0
 8003562:	d045      	beq.n	80035f0 <_free_r+0x94>
 8003564:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003568:	1f0c      	subs	r4, r1, #4
 800356a:	2b00      	cmp	r3, #0
 800356c:	bfb8      	it	lt
 800356e:	18e4      	addlt	r4, r4, r3
 8003570:	f000 f996 	bl	80038a0 <__malloc_lock>
 8003574:	4a1f      	ldr	r2, [pc, #124]	; (80035f4 <_free_r+0x98>)
 8003576:	6813      	ldr	r3, [r2, #0]
 8003578:	4610      	mov	r0, r2
 800357a:	b933      	cbnz	r3, 800358a <_free_r+0x2e>
 800357c:	6063      	str	r3, [r4, #4]
 800357e:	6014      	str	r4, [r2, #0]
 8003580:	4628      	mov	r0, r5
 8003582:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003586:	f000 b98c 	b.w	80038a2 <__malloc_unlock>
 800358a:	42a3      	cmp	r3, r4
 800358c:	d90c      	bls.n	80035a8 <_free_r+0x4c>
 800358e:	6821      	ldr	r1, [r4, #0]
 8003590:	1862      	adds	r2, r4, r1
 8003592:	4293      	cmp	r3, r2
 8003594:	bf04      	itt	eq
 8003596:	681a      	ldreq	r2, [r3, #0]
 8003598:	685b      	ldreq	r3, [r3, #4]
 800359a:	6063      	str	r3, [r4, #4]
 800359c:	bf04      	itt	eq
 800359e:	1852      	addeq	r2, r2, r1
 80035a0:	6022      	streq	r2, [r4, #0]
 80035a2:	6004      	str	r4, [r0, #0]
 80035a4:	e7ec      	b.n	8003580 <_free_r+0x24>
 80035a6:	4613      	mov	r3, r2
 80035a8:	685a      	ldr	r2, [r3, #4]
 80035aa:	b10a      	cbz	r2, 80035b0 <_free_r+0x54>
 80035ac:	42a2      	cmp	r2, r4
 80035ae:	d9fa      	bls.n	80035a6 <_free_r+0x4a>
 80035b0:	6819      	ldr	r1, [r3, #0]
 80035b2:	1858      	adds	r0, r3, r1
 80035b4:	42a0      	cmp	r0, r4
 80035b6:	d10b      	bne.n	80035d0 <_free_r+0x74>
 80035b8:	6820      	ldr	r0, [r4, #0]
 80035ba:	4401      	add	r1, r0
 80035bc:	1858      	adds	r0, r3, r1
 80035be:	4282      	cmp	r2, r0
 80035c0:	6019      	str	r1, [r3, #0]
 80035c2:	d1dd      	bne.n	8003580 <_free_r+0x24>
 80035c4:	6810      	ldr	r0, [r2, #0]
 80035c6:	6852      	ldr	r2, [r2, #4]
 80035c8:	605a      	str	r2, [r3, #4]
 80035ca:	4401      	add	r1, r0
 80035cc:	6019      	str	r1, [r3, #0]
 80035ce:	e7d7      	b.n	8003580 <_free_r+0x24>
 80035d0:	d902      	bls.n	80035d8 <_free_r+0x7c>
 80035d2:	230c      	movs	r3, #12
 80035d4:	602b      	str	r3, [r5, #0]
 80035d6:	e7d3      	b.n	8003580 <_free_r+0x24>
 80035d8:	6820      	ldr	r0, [r4, #0]
 80035da:	1821      	adds	r1, r4, r0
 80035dc:	428a      	cmp	r2, r1
 80035de:	bf04      	itt	eq
 80035e0:	6811      	ldreq	r1, [r2, #0]
 80035e2:	6852      	ldreq	r2, [r2, #4]
 80035e4:	6062      	str	r2, [r4, #4]
 80035e6:	bf04      	itt	eq
 80035e8:	1809      	addeq	r1, r1, r0
 80035ea:	6021      	streq	r1, [r4, #0]
 80035ec:	605c      	str	r4, [r3, #4]
 80035ee:	e7c7      	b.n	8003580 <_free_r+0x24>
 80035f0:	bd38      	pop	{r3, r4, r5, pc}
 80035f2:	bf00      	nop
 80035f4:	200000a0 	.word	0x200000a0

080035f8 <_malloc_r>:
 80035f8:	b570      	push	{r4, r5, r6, lr}
 80035fa:	1ccd      	adds	r5, r1, #3
 80035fc:	f025 0503 	bic.w	r5, r5, #3
 8003600:	3508      	adds	r5, #8
 8003602:	2d0c      	cmp	r5, #12
 8003604:	bf38      	it	cc
 8003606:	250c      	movcc	r5, #12
 8003608:	2d00      	cmp	r5, #0
 800360a:	4606      	mov	r6, r0
 800360c:	db01      	blt.n	8003612 <_malloc_r+0x1a>
 800360e:	42a9      	cmp	r1, r5
 8003610:	d903      	bls.n	800361a <_malloc_r+0x22>
 8003612:	230c      	movs	r3, #12
 8003614:	6033      	str	r3, [r6, #0]
 8003616:	2000      	movs	r0, #0
 8003618:	bd70      	pop	{r4, r5, r6, pc}
 800361a:	f000 f941 	bl	80038a0 <__malloc_lock>
 800361e:	4a21      	ldr	r2, [pc, #132]	; (80036a4 <_malloc_r+0xac>)
 8003620:	6814      	ldr	r4, [r2, #0]
 8003622:	4621      	mov	r1, r4
 8003624:	b991      	cbnz	r1, 800364c <_malloc_r+0x54>
 8003626:	4c20      	ldr	r4, [pc, #128]	; (80036a8 <_malloc_r+0xb0>)
 8003628:	6823      	ldr	r3, [r4, #0]
 800362a:	b91b      	cbnz	r3, 8003634 <_malloc_r+0x3c>
 800362c:	4630      	mov	r0, r6
 800362e:	f000 f85d 	bl	80036ec <_sbrk_r>
 8003632:	6020      	str	r0, [r4, #0]
 8003634:	4629      	mov	r1, r5
 8003636:	4630      	mov	r0, r6
 8003638:	f000 f858 	bl	80036ec <_sbrk_r>
 800363c:	1c43      	adds	r3, r0, #1
 800363e:	d124      	bne.n	800368a <_malloc_r+0x92>
 8003640:	230c      	movs	r3, #12
 8003642:	6033      	str	r3, [r6, #0]
 8003644:	4630      	mov	r0, r6
 8003646:	f000 f92c 	bl	80038a2 <__malloc_unlock>
 800364a:	e7e4      	b.n	8003616 <_malloc_r+0x1e>
 800364c:	680b      	ldr	r3, [r1, #0]
 800364e:	1b5b      	subs	r3, r3, r5
 8003650:	d418      	bmi.n	8003684 <_malloc_r+0x8c>
 8003652:	2b0b      	cmp	r3, #11
 8003654:	d90f      	bls.n	8003676 <_malloc_r+0x7e>
 8003656:	600b      	str	r3, [r1, #0]
 8003658:	50cd      	str	r5, [r1, r3]
 800365a:	18cc      	adds	r4, r1, r3
 800365c:	4630      	mov	r0, r6
 800365e:	f000 f920 	bl	80038a2 <__malloc_unlock>
 8003662:	f104 000b 	add.w	r0, r4, #11
 8003666:	1d23      	adds	r3, r4, #4
 8003668:	f020 0007 	bic.w	r0, r0, #7
 800366c:	1ac3      	subs	r3, r0, r3
 800366e:	d0d3      	beq.n	8003618 <_malloc_r+0x20>
 8003670:	425a      	negs	r2, r3
 8003672:	50e2      	str	r2, [r4, r3]
 8003674:	e7d0      	b.n	8003618 <_malloc_r+0x20>
 8003676:	428c      	cmp	r4, r1
 8003678:	684b      	ldr	r3, [r1, #4]
 800367a:	bf16      	itet	ne
 800367c:	6063      	strne	r3, [r4, #4]
 800367e:	6013      	streq	r3, [r2, #0]
 8003680:	460c      	movne	r4, r1
 8003682:	e7eb      	b.n	800365c <_malloc_r+0x64>
 8003684:	460c      	mov	r4, r1
 8003686:	6849      	ldr	r1, [r1, #4]
 8003688:	e7cc      	b.n	8003624 <_malloc_r+0x2c>
 800368a:	1cc4      	adds	r4, r0, #3
 800368c:	f024 0403 	bic.w	r4, r4, #3
 8003690:	42a0      	cmp	r0, r4
 8003692:	d005      	beq.n	80036a0 <_malloc_r+0xa8>
 8003694:	1a21      	subs	r1, r4, r0
 8003696:	4630      	mov	r0, r6
 8003698:	f000 f828 	bl	80036ec <_sbrk_r>
 800369c:	3001      	adds	r0, #1
 800369e:	d0cf      	beq.n	8003640 <_malloc_r+0x48>
 80036a0:	6025      	str	r5, [r4, #0]
 80036a2:	e7db      	b.n	800365c <_malloc_r+0x64>
 80036a4:	200000a0 	.word	0x200000a0
 80036a8:	200000a4 	.word	0x200000a4

080036ac <iprintf>:
 80036ac:	b40f      	push	{r0, r1, r2, r3}
 80036ae:	4b0a      	ldr	r3, [pc, #40]	; (80036d8 <iprintf+0x2c>)
 80036b0:	b513      	push	{r0, r1, r4, lr}
 80036b2:	681c      	ldr	r4, [r3, #0]
 80036b4:	b124      	cbz	r4, 80036c0 <iprintf+0x14>
 80036b6:	69a3      	ldr	r3, [r4, #24]
 80036b8:	b913      	cbnz	r3, 80036c0 <iprintf+0x14>
 80036ba:	4620      	mov	r0, r4
 80036bc:	f000 f866 	bl	800378c <__sinit>
 80036c0:	ab05      	add	r3, sp, #20
 80036c2:	9a04      	ldr	r2, [sp, #16]
 80036c4:	68a1      	ldr	r1, [r4, #8]
 80036c6:	9301      	str	r3, [sp, #4]
 80036c8:	4620      	mov	r0, r4
 80036ca:	f000 f93b 	bl	8003944 <_vfiprintf_r>
 80036ce:	b002      	add	sp, #8
 80036d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80036d4:	b004      	add	sp, #16
 80036d6:	4770      	bx	lr
 80036d8:	2000000c 	.word	0x2000000c

080036dc <realloc>:
 80036dc:	4b02      	ldr	r3, [pc, #8]	; (80036e8 <realloc+0xc>)
 80036de:	460a      	mov	r2, r1
 80036e0:	4601      	mov	r1, r0
 80036e2:	6818      	ldr	r0, [r3, #0]
 80036e4:	f000 b8de 	b.w	80038a4 <_realloc_r>
 80036e8:	2000000c 	.word	0x2000000c

080036ec <_sbrk_r>:
 80036ec:	b538      	push	{r3, r4, r5, lr}
 80036ee:	4c06      	ldr	r4, [pc, #24]	; (8003708 <_sbrk_r+0x1c>)
 80036f0:	2300      	movs	r3, #0
 80036f2:	4605      	mov	r5, r0
 80036f4:	4608      	mov	r0, r1
 80036f6:	6023      	str	r3, [r4, #0]
 80036f8:	f7fe f814 	bl	8001724 <_sbrk>
 80036fc:	1c43      	adds	r3, r0, #1
 80036fe:	d102      	bne.n	8003706 <_sbrk_r+0x1a>
 8003700:	6823      	ldr	r3, [r4, #0]
 8003702:	b103      	cbz	r3, 8003706 <_sbrk_r+0x1a>
 8003704:	602b      	str	r3, [r5, #0]
 8003706:	bd38      	pop	{r3, r4, r5, pc}
 8003708:	20000138 	.word	0x20000138

0800370c <std>:
 800370c:	2300      	movs	r3, #0
 800370e:	b510      	push	{r4, lr}
 8003710:	4604      	mov	r4, r0
 8003712:	e9c0 3300 	strd	r3, r3, [r0]
 8003716:	6083      	str	r3, [r0, #8]
 8003718:	8181      	strh	r1, [r0, #12]
 800371a:	6643      	str	r3, [r0, #100]	; 0x64
 800371c:	81c2      	strh	r2, [r0, #14]
 800371e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003722:	6183      	str	r3, [r0, #24]
 8003724:	4619      	mov	r1, r3
 8003726:	2208      	movs	r2, #8
 8003728:	305c      	adds	r0, #92	; 0x5c
 800372a:	f7ff ff0f 	bl	800354c <memset>
 800372e:	4b05      	ldr	r3, [pc, #20]	; (8003744 <std+0x38>)
 8003730:	6263      	str	r3, [r4, #36]	; 0x24
 8003732:	4b05      	ldr	r3, [pc, #20]	; (8003748 <std+0x3c>)
 8003734:	62a3      	str	r3, [r4, #40]	; 0x28
 8003736:	4b05      	ldr	r3, [pc, #20]	; (800374c <std+0x40>)
 8003738:	62e3      	str	r3, [r4, #44]	; 0x2c
 800373a:	4b05      	ldr	r3, [pc, #20]	; (8003750 <std+0x44>)
 800373c:	6224      	str	r4, [r4, #32]
 800373e:	6323      	str	r3, [r4, #48]	; 0x30
 8003740:	bd10      	pop	{r4, pc}
 8003742:	bf00      	nop
 8003744:	08003e81 	.word	0x08003e81
 8003748:	08003ea3 	.word	0x08003ea3
 800374c:	08003edb 	.word	0x08003edb
 8003750:	08003eff 	.word	0x08003eff

08003754 <_cleanup_r>:
 8003754:	4901      	ldr	r1, [pc, #4]	; (800375c <_cleanup_r+0x8>)
 8003756:	f000 b885 	b.w	8003864 <_fwalk_reent>
 800375a:	bf00      	nop
 800375c:	080041d9 	.word	0x080041d9

08003760 <__sfmoreglue>:
 8003760:	b570      	push	{r4, r5, r6, lr}
 8003762:	1e4a      	subs	r2, r1, #1
 8003764:	2568      	movs	r5, #104	; 0x68
 8003766:	4355      	muls	r5, r2
 8003768:	460e      	mov	r6, r1
 800376a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800376e:	f7ff ff43 	bl	80035f8 <_malloc_r>
 8003772:	4604      	mov	r4, r0
 8003774:	b140      	cbz	r0, 8003788 <__sfmoreglue+0x28>
 8003776:	2100      	movs	r1, #0
 8003778:	e9c0 1600 	strd	r1, r6, [r0]
 800377c:	300c      	adds	r0, #12
 800377e:	60a0      	str	r0, [r4, #8]
 8003780:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003784:	f7ff fee2 	bl	800354c <memset>
 8003788:	4620      	mov	r0, r4
 800378a:	bd70      	pop	{r4, r5, r6, pc}

0800378c <__sinit>:
 800378c:	6983      	ldr	r3, [r0, #24]
 800378e:	b510      	push	{r4, lr}
 8003790:	4604      	mov	r4, r0
 8003792:	bb33      	cbnz	r3, 80037e2 <__sinit+0x56>
 8003794:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8003798:	6503      	str	r3, [r0, #80]	; 0x50
 800379a:	4b12      	ldr	r3, [pc, #72]	; (80037e4 <__sinit+0x58>)
 800379c:	4a12      	ldr	r2, [pc, #72]	; (80037e8 <__sinit+0x5c>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	6282      	str	r2, [r0, #40]	; 0x28
 80037a2:	4298      	cmp	r0, r3
 80037a4:	bf04      	itt	eq
 80037a6:	2301      	moveq	r3, #1
 80037a8:	6183      	streq	r3, [r0, #24]
 80037aa:	f000 f81f 	bl	80037ec <__sfp>
 80037ae:	6060      	str	r0, [r4, #4]
 80037b0:	4620      	mov	r0, r4
 80037b2:	f000 f81b 	bl	80037ec <__sfp>
 80037b6:	60a0      	str	r0, [r4, #8]
 80037b8:	4620      	mov	r0, r4
 80037ba:	f000 f817 	bl	80037ec <__sfp>
 80037be:	2200      	movs	r2, #0
 80037c0:	60e0      	str	r0, [r4, #12]
 80037c2:	2104      	movs	r1, #4
 80037c4:	6860      	ldr	r0, [r4, #4]
 80037c6:	f7ff ffa1 	bl	800370c <std>
 80037ca:	2201      	movs	r2, #1
 80037cc:	2109      	movs	r1, #9
 80037ce:	68a0      	ldr	r0, [r4, #8]
 80037d0:	f7ff ff9c 	bl	800370c <std>
 80037d4:	2202      	movs	r2, #2
 80037d6:	2112      	movs	r1, #18
 80037d8:	68e0      	ldr	r0, [r4, #12]
 80037da:	f7ff ff97 	bl	800370c <std>
 80037de:	2301      	movs	r3, #1
 80037e0:	61a3      	str	r3, [r4, #24]
 80037e2:	bd10      	pop	{r4, pc}
 80037e4:	08004428 	.word	0x08004428
 80037e8:	08003755 	.word	0x08003755

080037ec <__sfp>:
 80037ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037ee:	4b1b      	ldr	r3, [pc, #108]	; (800385c <__sfp+0x70>)
 80037f0:	681e      	ldr	r6, [r3, #0]
 80037f2:	69b3      	ldr	r3, [r6, #24]
 80037f4:	4607      	mov	r7, r0
 80037f6:	b913      	cbnz	r3, 80037fe <__sfp+0x12>
 80037f8:	4630      	mov	r0, r6
 80037fa:	f7ff ffc7 	bl	800378c <__sinit>
 80037fe:	3648      	adds	r6, #72	; 0x48
 8003800:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003804:	3b01      	subs	r3, #1
 8003806:	d503      	bpl.n	8003810 <__sfp+0x24>
 8003808:	6833      	ldr	r3, [r6, #0]
 800380a:	b133      	cbz	r3, 800381a <__sfp+0x2e>
 800380c:	6836      	ldr	r6, [r6, #0]
 800380e:	e7f7      	b.n	8003800 <__sfp+0x14>
 8003810:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003814:	b16d      	cbz	r5, 8003832 <__sfp+0x46>
 8003816:	3468      	adds	r4, #104	; 0x68
 8003818:	e7f4      	b.n	8003804 <__sfp+0x18>
 800381a:	2104      	movs	r1, #4
 800381c:	4638      	mov	r0, r7
 800381e:	f7ff ff9f 	bl	8003760 <__sfmoreglue>
 8003822:	6030      	str	r0, [r6, #0]
 8003824:	2800      	cmp	r0, #0
 8003826:	d1f1      	bne.n	800380c <__sfp+0x20>
 8003828:	230c      	movs	r3, #12
 800382a:	603b      	str	r3, [r7, #0]
 800382c:	4604      	mov	r4, r0
 800382e:	4620      	mov	r0, r4
 8003830:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003832:	4b0b      	ldr	r3, [pc, #44]	; (8003860 <__sfp+0x74>)
 8003834:	6665      	str	r5, [r4, #100]	; 0x64
 8003836:	e9c4 5500 	strd	r5, r5, [r4]
 800383a:	60a5      	str	r5, [r4, #8]
 800383c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8003840:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8003844:	2208      	movs	r2, #8
 8003846:	4629      	mov	r1, r5
 8003848:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800384c:	f7ff fe7e 	bl	800354c <memset>
 8003850:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003854:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003858:	e7e9      	b.n	800382e <__sfp+0x42>
 800385a:	bf00      	nop
 800385c:	08004428 	.word	0x08004428
 8003860:	ffff0001 	.word	0xffff0001

08003864 <_fwalk_reent>:
 8003864:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003868:	4680      	mov	r8, r0
 800386a:	4689      	mov	r9, r1
 800386c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003870:	2600      	movs	r6, #0
 8003872:	b914      	cbnz	r4, 800387a <_fwalk_reent+0x16>
 8003874:	4630      	mov	r0, r6
 8003876:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800387a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800387e:	3f01      	subs	r7, #1
 8003880:	d501      	bpl.n	8003886 <_fwalk_reent+0x22>
 8003882:	6824      	ldr	r4, [r4, #0]
 8003884:	e7f5      	b.n	8003872 <_fwalk_reent+0xe>
 8003886:	89ab      	ldrh	r3, [r5, #12]
 8003888:	2b01      	cmp	r3, #1
 800388a:	d907      	bls.n	800389c <_fwalk_reent+0x38>
 800388c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003890:	3301      	adds	r3, #1
 8003892:	d003      	beq.n	800389c <_fwalk_reent+0x38>
 8003894:	4629      	mov	r1, r5
 8003896:	4640      	mov	r0, r8
 8003898:	47c8      	blx	r9
 800389a:	4306      	orrs	r6, r0
 800389c:	3568      	adds	r5, #104	; 0x68
 800389e:	e7ee      	b.n	800387e <_fwalk_reent+0x1a>

080038a0 <__malloc_lock>:
 80038a0:	4770      	bx	lr

080038a2 <__malloc_unlock>:
 80038a2:	4770      	bx	lr

080038a4 <_realloc_r>:
 80038a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038a6:	4607      	mov	r7, r0
 80038a8:	4614      	mov	r4, r2
 80038aa:	460e      	mov	r6, r1
 80038ac:	b921      	cbnz	r1, 80038b8 <_realloc_r+0x14>
 80038ae:	4611      	mov	r1, r2
 80038b0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80038b4:	f7ff bea0 	b.w	80035f8 <_malloc_r>
 80038b8:	b922      	cbnz	r2, 80038c4 <_realloc_r+0x20>
 80038ba:	f7ff fe4f 	bl	800355c <_free_r>
 80038be:	4625      	mov	r5, r4
 80038c0:	4628      	mov	r0, r5
 80038c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80038c4:	f000 fd33 	bl	800432e <_malloc_usable_size_r>
 80038c8:	42a0      	cmp	r0, r4
 80038ca:	d20f      	bcs.n	80038ec <_realloc_r+0x48>
 80038cc:	4621      	mov	r1, r4
 80038ce:	4638      	mov	r0, r7
 80038d0:	f7ff fe92 	bl	80035f8 <_malloc_r>
 80038d4:	4605      	mov	r5, r0
 80038d6:	2800      	cmp	r0, #0
 80038d8:	d0f2      	beq.n	80038c0 <_realloc_r+0x1c>
 80038da:	4631      	mov	r1, r6
 80038dc:	4622      	mov	r2, r4
 80038de:	f000 fd1b 	bl	8004318 <memcpy>
 80038e2:	4631      	mov	r1, r6
 80038e4:	4638      	mov	r0, r7
 80038e6:	f7ff fe39 	bl	800355c <_free_r>
 80038ea:	e7e9      	b.n	80038c0 <_realloc_r+0x1c>
 80038ec:	4635      	mov	r5, r6
 80038ee:	e7e7      	b.n	80038c0 <_realloc_r+0x1c>

080038f0 <__sfputc_r>:
 80038f0:	6893      	ldr	r3, [r2, #8]
 80038f2:	3b01      	subs	r3, #1
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	b410      	push	{r4}
 80038f8:	6093      	str	r3, [r2, #8]
 80038fa:	da08      	bge.n	800390e <__sfputc_r+0x1e>
 80038fc:	6994      	ldr	r4, [r2, #24]
 80038fe:	42a3      	cmp	r3, r4
 8003900:	db01      	blt.n	8003906 <__sfputc_r+0x16>
 8003902:	290a      	cmp	r1, #10
 8003904:	d103      	bne.n	800390e <__sfputc_r+0x1e>
 8003906:	f85d 4b04 	ldr.w	r4, [sp], #4
 800390a:	f000 bafd 	b.w	8003f08 <__swbuf_r>
 800390e:	6813      	ldr	r3, [r2, #0]
 8003910:	1c58      	adds	r0, r3, #1
 8003912:	6010      	str	r0, [r2, #0]
 8003914:	7019      	strb	r1, [r3, #0]
 8003916:	4608      	mov	r0, r1
 8003918:	f85d 4b04 	ldr.w	r4, [sp], #4
 800391c:	4770      	bx	lr

0800391e <__sfputs_r>:
 800391e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003920:	4606      	mov	r6, r0
 8003922:	460f      	mov	r7, r1
 8003924:	4614      	mov	r4, r2
 8003926:	18d5      	adds	r5, r2, r3
 8003928:	42ac      	cmp	r4, r5
 800392a:	d101      	bne.n	8003930 <__sfputs_r+0x12>
 800392c:	2000      	movs	r0, #0
 800392e:	e007      	b.n	8003940 <__sfputs_r+0x22>
 8003930:	463a      	mov	r2, r7
 8003932:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003936:	4630      	mov	r0, r6
 8003938:	f7ff ffda 	bl	80038f0 <__sfputc_r>
 800393c:	1c43      	adds	r3, r0, #1
 800393e:	d1f3      	bne.n	8003928 <__sfputs_r+0xa>
 8003940:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003944 <_vfiprintf_r>:
 8003944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003948:	460c      	mov	r4, r1
 800394a:	b09d      	sub	sp, #116	; 0x74
 800394c:	4617      	mov	r7, r2
 800394e:	461d      	mov	r5, r3
 8003950:	4606      	mov	r6, r0
 8003952:	b118      	cbz	r0, 800395c <_vfiprintf_r+0x18>
 8003954:	6983      	ldr	r3, [r0, #24]
 8003956:	b90b      	cbnz	r3, 800395c <_vfiprintf_r+0x18>
 8003958:	f7ff ff18 	bl	800378c <__sinit>
 800395c:	4b7c      	ldr	r3, [pc, #496]	; (8003b50 <_vfiprintf_r+0x20c>)
 800395e:	429c      	cmp	r4, r3
 8003960:	d158      	bne.n	8003a14 <_vfiprintf_r+0xd0>
 8003962:	6874      	ldr	r4, [r6, #4]
 8003964:	89a3      	ldrh	r3, [r4, #12]
 8003966:	0718      	lsls	r0, r3, #28
 8003968:	d55e      	bpl.n	8003a28 <_vfiprintf_r+0xe4>
 800396a:	6923      	ldr	r3, [r4, #16]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d05b      	beq.n	8003a28 <_vfiprintf_r+0xe4>
 8003970:	2300      	movs	r3, #0
 8003972:	9309      	str	r3, [sp, #36]	; 0x24
 8003974:	2320      	movs	r3, #32
 8003976:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800397a:	2330      	movs	r3, #48	; 0x30
 800397c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003980:	9503      	str	r5, [sp, #12]
 8003982:	f04f 0b01 	mov.w	fp, #1
 8003986:	46b8      	mov	r8, r7
 8003988:	4645      	mov	r5, r8
 800398a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800398e:	b10b      	cbz	r3, 8003994 <_vfiprintf_r+0x50>
 8003990:	2b25      	cmp	r3, #37	; 0x25
 8003992:	d154      	bne.n	8003a3e <_vfiprintf_r+0xfa>
 8003994:	ebb8 0a07 	subs.w	sl, r8, r7
 8003998:	d00b      	beq.n	80039b2 <_vfiprintf_r+0x6e>
 800399a:	4653      	mov	r3, sl
 800399c:	463a      	mov	r2, r7
 800399e:	4621      	mov	r1, r4
 80039a0:	4630      	mov	r0, r6
 80039a2:	f7ff ffbc 	bl	800391e <__sfputs_r>
 80039a6:	3001      	adds	r0, #1
 80039a8:	f000 80c2 	beq.w	8003b30 <_vfiprintf_r+0x1ec>
 80039ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80039ae:	4453      	add	r3, sl
 80039b0:	9309      	str	r3, [sp, #36]	; 0x24
 80039b2:	f898 3000 	ldrb.w	r3, [r8]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	f000 80ba 	beq.w	8003b30 <_vfiprintf_r+0x1ec>
 80039bc:	2300      	movs	r3, #0
 80039be:	f04f 32ff 	mov.w	r2, #4294967295
 80039c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80039c6:	9304      	str	r3, [sp, #16]
 80039c8:	9307      	str	r3, [sp, #28]
 80039ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80039ce:	931a      	str	r3, [sp, #104]	; 0x68
 80039d0:	46a8      	mov	r8, r5
 80039d2:	2205      	movs	r2, #5
 80039d4:	f818 1b01 	ldrb.w	r1, [r8], #1
 80039d8:	485e      	ldr	r0, [pc, #376]	; (8003b54 <_vfiprintf_r+0x210>)
 80039da:	f7fc fbf9 	bl	80001d0 <memchr>
 80039de:	9b04      	ldr	r3, [sp, #16]
 80039e0:	bb78      	cbnz	r0, 8003a42 <_vfiprintf_r+0xfe>
 80039e2:	06d9      	lsls	r1, r3, #27
 80039e4:	bf44      	itt	mi
 80039e6:	2220      	movmi	r2, #32
 80039e8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80039ec:	071a      	lsls	r2, r3, #28
 80039ee:	bf44      	itt	mi
 80039f0:	222b      	movmi	r2, #43	; 0x2b
 80039f2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80039f6:	782a      	ldrb	r2, [r5, #0]
 80039f8:	2a2a      	cmp	r2, #42	; 0x2a
 80039fa:	d02a      	beq.n	8003a52 <_vfiprintf_r+0x10e>
 80039fc:	9a07      	ldr	r2, [sp, #28]
 80039fe:	46a8      	mov	r8, r5
 8003a00:	2000      	movs	r0, #0
 8003a02:	250a      	movs	r5, #10
 8003a04:	4641      	mov	r1, r8
 8003a06:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003a0a:	3b30      	subs	r3, #48	; 0x30
 8003a0c:	2b09      	cmp	r3, #9
 8003a0e:	d969      	bls.n	8003ae4 <_vfiprintf_r+0x1a0>
 8003a10:	b360      	cbz	r0, 8003a6c <_vfiprintf_r+0x128>
 8003a12:	e024      	b.n	8003a5e <_vfiprintf_r+0x11a>
 8003a14:	4b50      	ldr	r3, [pc, #320]	; (8003b58 <_vfiprintf_r+0x214>)
 8003a16:	429c      	cmp	r4, r3
 8003a18:	d101      	bne.n	8003a1e <_vfiprintf_r+0xda>
 8003a1a:	68b4      	ldr	r4, [r6, #8]
 8003a1c:	e7a2      	b.n	8003964 <_vfiprintf_r+0x20>
 8003a1e:	4b4f      	ldr	r3, [pc, #316]	; (8003b5c <_vfiprintf_r+0x218>)
 8003a20:	429c      	cmp	r4, r3
 8003a22:	bf08      	it	eq
 8003a24:	68f4      	ldreq	r4, [r6, #12]
 8003a26:	e79d      	b.n	8003964 <_vfiprintf_r+0x20>
 8003a28:	4621      	mov	r1, r4
 8003a2a:	4630      	mov	r0, r6
 8003a2c:	f000 fad0 	bl	8003fd0 <__swsetup_r>
 8003a30:	2800      	cmp	r0, #0
 8003a32:	d09d      	beq.n	8003970 <_vfiprintf_r+0x2c>
 8003a34:	f04f 30ff 	mov.w	r0, #4294967295
 8003a38:	b01d      	add	sp, #116	; 0x74
 8003a3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a3e:	46a8      	mov	r8, r5
 8003a40:	e7a2      	b.n	8003988 <_vfiprintf_r+0x44>
 8003a42:	4a44      	ldr	r2, [pc, #272]	; (8003b54 <_vfiprintf_r+0x210>)
 8003a44:	1a80      	subs	r0, r0, r2
 8003a46:	fa0b f000 	lsl.w	r0, fp, r0
 8003a4a:	4318      	orrs	r0, r3
 8003a4c:	9004      	str	r0, [sp, #16]
 8003a4e:	4645      	mov	r5, r8
 8003a50:	e7be      	b.n	80039d0 <_vfiprintf_r+0x8c>
 8003a52:	9a03      	ldr	r2, [sp, #12]
 8003a54:	1d11      	adds	r1, r2, #4
 8003a56:	6812      	ldr	r2, [r2, #0]
 8003a58:	9103      	str	r1, [sp, #12]
 8003a5a:	2a00      	cmp	r2, #0
 8003a5c:	db01      	blt.n	8003a62 <_vfiprintf_r+0x11e>
 8003a5e:	9207      	str	r2, [sp, #28]
 8003a60:	e004      	b.n	8003a6c <_vfiprintf_r+0x128>
 8003a62:	4252      	negs	r2, r2
 8003a64:	f043 0302 	orr.w	r3, r3, #2
 8003a68:	9207      	str	r2, [sp, #28]
 8003a6a:	9304      	str	r3, [sp, #16]
 8003a6c:	f898 3000 	ldrb.w	r3, [r8]
 8003a70:	2b2e      	cmp	r3, #46	; 0x2e
 8003a72:	d10e      	bne.n	8003a92 <_vfiprintf_r+0x14e>
 8003a74:	f898 3001 	ldrb.w	r3, [r8, #1]
 8003a78:	2b2a      	cmp	r3, #42	; 0x2a
 8003a7a:	d138      	bne.n	8003aee <_vfiprintf_r+0x1aa>
 8003a7c:	9b03      	ldr	r3, [sp, #12]
 8003a7e:	1d1a      	adds	r2, r3, #4
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	9203      	str	r2, [sp, #12]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	bfb8      	it	lt
 8003a88:	f04f 33ff 	movlt.w	r3, #4294967295
 8003a8c:	f108 0802 	add.w	r8, r8, #2
 8003a90:	9305      	str	r3, [sp, #20]
 8003a92:	4d33      	ldr	r5, [pc, #204]	; (8003b60 <_vfiprintf_r+0x21c>)
 8003a94:	f898 1000 	ldrb.w	r1, [r8]
 8003a98:	2203      	movs	r2, #3
 8003a9a:	4628      	mov	r0, r5
 8003a9c:	f7fc fb98 	bl	80001d0 <memchr>
 8003aa0:	b140      	cbz	r0, 8003ab4 <_vfiprintf_r+0x170>
 8003aa2:	2340      	movs	r3, #64	; 0x40
 8003aa4:	1b40      	subs	r0, r0, r5
 8003aa6:	fa03 f000 	lsl.w	r0, r3, r0
 8003aaa:	9b04      	ldr	r3, [sp, #16]
 8003aac:	4303      	orrs	r3, r0
 8003aae:	f108 0801 	add.w	r8, r8, #1
 8003ab2:	9304      	str	r3, [sp, #16]
 8003ab4:	f898 1000 	ldrb.w	r1, [r8]
 8003ab8:	482a      	ldr	r0, [pc, #168]	; (8003b64 <_vfiprintf_r+0x220>)
 8003aba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003abe:	2206      	movs	r2, #6
 8003ac0:	f108 0701 	add.w	r7, r8, #1
 8003ac4:	f7fc fb84 	bl	80001d0 <memchr>
 8003ac8:	2800      	cmp	r0, #0
 8003aca:	d037      	beq.n	8003b3c <_vfiprintf_r+0x1f8>
 8003acc:	4b26      	ldr	r3, [pc, #152]	; (8003b68 <_vfiprintf_r+0x224>)
 8003ace:	bb1b      	cbnz	r3, 8003b18 <_vfiprintf_r+0x1d4>
 8003ad0:	9b03      	ldr	r3, [sp, #12]
 8003ad2:	3307      	adds	r3, #7
 8003ad4:	f023 0307 	bic.w	r3, r3, #7
 8003ad8:	3308      	adds	r3, #8
 8003ada:	9303      	str	r3, [sp, #12]
 8003adc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ade:	444b      	add	r3, r9
 8003ae0:	9309      	str	r3, [sp, #36]	; 0x24
 8003ae2:	e750      	b.n	8003986 <_vfiprintf_r+0x42>
 8003ae4:	fb05 3202 	mla	r2, r5, r2, r3
 8003ae8:	2001      	movs	r0, #1
 8003aea:	4688      	mov	r8, r1
 8003aec:	e78a      	b.n	8003a04 <_vfiprintf_r+0xc0>
 8003aee:	2300      	movs	r3, #0
 8003af0:	f108 0801 	add.w	r8, r8, #1
 8003af4:	9305      	str	r3, [sp, #20]
 8003af6:	4619      	mov	r1, r3
 8003af8:	250a      	movs	r5, #10
 8003afa:	4640      	mov	r0, r8
 8003afc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003b00:	3a30      	subs	r2, #48	; 0x30
 8003b02:	2a09      	cmp	r2, #9
 8003b04:	d903      	bls.n	8003b0e <_vfiprintf_r+0x1ca>
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d0c3      	beq.n	8003a92 <_vfiprintf_r+0x14e>
 8003b0a:	9105      	str	r1, [sp, #20]
 8003b0c:	e7c1      	b.n	8003a92 <_vfiprintf_r+0x14e>
 8003b0e:	fb05 2101 	mla	r1, r5, r1, r2
 8003b12:	2301      	movs	r3, #1
 8003b14:	4680      	mov	r8, r0
 8003b16:	e7f0      	b.n	8003afa <_vfiprintf_r+0x1b6>
 8003b18:	ab03      	add	r3, sp, #12
 8003b1a:	9300      	str	r3, [sp, #0]
 8003b1c:	4622      	mov	r2, r4
 8003b1e:	4b13      	ldr	r3, [pc, #76]	; (8003b6c <_vfiprintf_r+0x228>)
 8003b20:	a904      	add	r1, sp, #16
 8003b22:	4630      	mov	r0, r6
 8003b24:	f3af 8000 	nop.w
 8003b28:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003b2c:	4681      	mov	r9, r0
 8003b2e:	d1d5      	bne.n	8003adc <_vfiprintf_r+0x198>
 8003b30:	89a3      	ldrh	r3, [r4, #12]
 8003b32:	065b      	lsls	r3, r3, #25
 8003b34:	f53f af7e 	bmi.w	8003a34 <_vfiprintf_r+0xf0>
 8003b38:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003b3a:	e77d      	b.n	8003a38 <_vfiprintf_r+0xf4>
 8003b3c:	ab03      	add	r3, sp, #12
 8003b3e:	9300      	str	r3, [sp, #0]
 8003b40:	4622      	mov	r2, r4
 8003b42:	4b0a      	ldr	r3, [pc, #40]	; (8003b6c <_vfiprintf_r+0x228>)
 8003b44:	a904      	add	r1, sp, #16
 8003b46:	4630      	mov	r0, r6
 8003b48:	f000 f888 	bl	8003c5c <_printf_i>
 8003b4c:	e7ec      	b.n	8003b28 <_vfiprintf_r+0x1e4>
 8003b4e:	bf00      	nop
 8003b50:	0800444c 	.word	0x0800444c
 8003b54:	0800448c 	.word	0x0800448c
 8003b58:	0800446c 	.word	0x0800446c
 8003b5c:	0800442c 	.word	0x0800442c
 8003b60:	08004492 	.word	0x08004492
 8003b64:	08004496 	.word	0x08004496
 8003b68:	00000000 	.word	0x00000000
 8003b6c:	0800391f 	.word	0x0800391f

08003b70 <_printf_common>:
 8003b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b74:	4691      	mov	r9, r2
 8003b76:	461f      	mov	r7, r3
 8003b78:	688a      	ldr	r2, [r1, #8]
 8003b7a:	690b      	ldr	r3, [r1, #16]
 8003b7c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003b80:	4293      	cmp	r3, r2
 8003b82:	bfb8      	it	lt
 8003b84:	4613      	movlt	r3, r2
 8003b86:	f8c9 3000 	str.w	r3, [r9]
 8003b8a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003b8e:	4606      	mov	r6, r0
 8003b90:	460c      	mov	r4, r1
 8003b92:	b112      	cbz	r2, 8003b9a <_printf_common+0x2a>
 8003b94:	3301      	adds	r3, #1
 8003b96:	f8c9 3000 	str.w	r3, [r9]
 8003b9a:	6823      	ldr	r3, [r4, #0]
 8003b9c:	0699      	lsls	r1, r3, #26
 8003b9e:	bf42      	ittt	mi
 8003ba0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003ba4:	3302      	addmi	r3, #2
 8003ba6:	f8c9 3000 	strmi.w	r3, [r9]
 8003baa:	6825      	ldr	r5, [r4, #0]
 8003bac:	f015 0506 	ands.w	r5, r5, #6
 8003bb0:	d107      	bne.n	8003bc2 <_printf_common+0x52>
 8003bb2:	f104 0a19 	add.w	sl, r4, #25
 8003bb6:	68e3      	ldr	r3, [r4, #12]
 8003bb8:	f8d9 2000 	ldr.w	r2, [r9]
 8003bbc:	1a9b      	subs	r3, r3, r2
 8003bbe:	42ab      	cmp	r3, r5
 8003bc0:	dc28      	bgt.n	8003c14 <_printf_common+0xa4>
 8003bc2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003bc6:	6822      	ldr	r2, [r4, #0]
 8003bc8:	3300      	adds	r3, #0
 8003bca:	bf18      	it	ne
 8003bcc:	2301      	movne	r3, #1
 8003bce:	0692      	lsls	r2, r2, #26
 8003bd0:	d42d      	bmi.n	8003c2e <_printf_common+0xbe>
 8003bd2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003bd6:	4639      	mov	r1, r7
 8003bd8:	4630      	mov	r0, r6
 8003bda:	47c0      	blx	r8
 8003bdc:	3001      	adds	r0, #1
 8003bde:	d020      	beq.n	8003c22 <_printf_common+0xb2>
 8003be0:	6823      	ldr	r3, [r4, #0]
 8003be2:	68e5      	ldr	r5, [r4, #12]
 8003be4:	f8d9 2000 	ldr.w	r2, [r9]
 8003be8:	f003 0306 	and.w	r3, r3, #6
 8003bec:	2b04      	cmp	r3, #4
 8003bee:	bf08      	it	eq
 8003bf0:	1aad      	subeq	r5, r5, r2
 8003bf2:	68a3      	ldr	r3, [r4, #8]
 8003bf4:	6922      	ldr	r2, [r4, #16]
 8003bf6:	bf0c      	ite	eq
 8003bf8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003bfc:	2500      	movne	r5, #0
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	bfc4      	itt	gt
 8003c02:	1a9b      	subgt	r3, r3, r2
 8003c04:	18ed      	addgt	r5, r5, r3
 8003c06:	f04f 0900 	mov.w	r9, #0
 8003c0a:	341a      	adds	r4, #26
 8003c0c:	454d      	cmp	r5, r9
 8003c0e:	d11a      	bne.n	8003c46 <_printf_common+0xd6>
 8003c10:	2000      	movs	r0, #0
 8003c12:	e008      	b.n	8003c26 <_printf_common+0xb6>
 8003c14:	2301      	movs	r3, #1
 8003c16:	4652      	mov	r2, sl
 8003c18:	4639      	mov	r1, r7
 8003c1a:	4630      	mov	r0, r6
 8003c1c:	47c0      	blx	r8
 8003c1e:	3001      	adds	r0, #1
 8003c20:	d103      	bne.n	8003c2a <_printf_common+0xba>
 8003c22:	f04f 30ff 	mov.w	r0, #4294967295
 8003c26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c2a:	3501      	adds	r5, #1
 8003c2c:	e7c3      	b.n	8003bb6 <_printf_common+0x46>
 8003c2e:	18e1      	adds	r1, r4, r3
 8003c30:	1c5a      	adds	r2, r3, #1
 8003c32:	2030      	movs	r0, #48	; 0x30
 8003c34:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003c38:	4422      	add	r2, r4
 8003c3a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003c3e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003c42:	3302      	adds	r3, #2
 8003c44:	e7c5      	b.n	8003bd2 <_printf_common+0x62>
 8003c46:	2301      	movs	r3, #1
 8003c48:	4622      	mov	r2, r4
 8003c4a:	4639      	mov	r1, r7
 8003c4c:	4630      	mov	r0, r6
 8003c4e:	47c0      	blx	r8
 8003c50:	3001      	adds	r0, #1
 8003c52:	d0e6      	beq.n	8003c22 <_printf_common+0xb2>
 8003c54:	f109 0901 	add.w	r9, r9, #1
 8003c58:	e7d8      	b.n	8003c0c <_printf_common+0x9c>
	...

08003c5c <_printf_i>:
 8003c5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003c60:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003c64:	460c      	mov	r4, r1
 8003c66:	7e09      	ldrb	r1, [r1, #24]
 8003c68:	b085      	sub	sp, #20
 8003c6a:	296e      	cmp	r1, #110	; 0x6e
 8003c6c:	4617      	mov	r7, r2
 8003c6e:	4606      	mov	r6, r0
 8003c70:	4698      	mov	r8, r3
 8003c72:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003c74:	f000 80b3 	beq.w	8003dde <_printf_i+0x182>
 8003c78:	d822      	bhi.n	8003cc0 <_printf_i+0x64>
 8003c7a:	2963      	cmp	r1, #99	; 0x63
 8003c7c:	d036      	beq.n	8003cec <_printf_i+0x90>
 8003c7e:	d80a      	bhi.n	8003c96 <_printf_i+0x3a>
 8003c80:	2900      	cmp	r1, #0
 8003c82:	f000 80b9 	beq.w	8003df8 <_printf_i+0x19c>
 8003c86:	2958      	cmp	r1, #88	; 0x58
 8003c88:	f000 8083 	beq.w	8003d92 <_printf_i+0x136>
 8003c8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c90:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003c94:	e032      	b.n	8003cfc <_printf_i+0xa0>
 8003c96:	2964      	cmp	r1, #100	; 0x64
 8003c98:	d001      	beq.n	8003c9e <_printf_i+0x42>
 8003c9a:	2969      	cmp	r1, #105	; 0x69
 8003c9c:	d1f6      	bne.n	8003c8c <_printf_i+0x30>
 8003c9e:	6820      	ldr	r0, [r4, #0]
 8003ca0:	6813      	ldr	r3, [r2, #0]
 8003ca2:	0605      	lsls	r5, r0, #24
 8003ca4:	f103 0104 	add.w	r1, r3, #4
 8003ca8:	d52a      	bpl.n	8003d00 <_printf_i+0xa4>
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	6011      	str	r1, [r2, #0]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	da03      	bge.n	8003cba <_printf_i+0x5e>
 8003cb2:	222d      	movs	r2, #45	; 0x2d
 8003cb4:	425b      	negs	r3, r3
 8003cb6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003cba:	486f      	ldr	r0, [pc, #444]	; (8003e78 <_printf_i+0x21c>)
 8003cbc:	220a      	movs	r2, #10
 8003cbe:	e039      	b.n	8003d34 <_printf_i+0xd8>
 8003cc0:	2973      	cmp	r1, #115	; 0x73
 8003cc2:	f000 809d 	beq.w	8003e00 <_printf_i+0x1a4>
 8003cc6:	d808      	bhi.n	8003cda <_printf_i+0x7e>
 8003cc8:	296f      	cmp	r1, #111	; 0x6f
 8003cca:	d020      	beq.n	8003d0e <_printf_i+0xb2>
 8003ccc:	2970      	cmp	r1, #112	; 0x70
 8003cce:	d1dd      	bne.n	8003c8c <_printf_i+0x30>
 8003cd0:	6823      	ldr	r3, [r4, #0]
 8003cd2:	f043 0320 	orr.w	r3, r3, #32
 8003cd6:	6023      	str	r3, [r4, #0]
 8003cd8:	e003      	b.n	8003ce2 <_printf_i+0x86>
 8003cda:	2975      	cmp	r1, #117	; 0x75
 8003cdc:	d017      	beq.n	8003d0e <_printf_i+0xb2>
 8003cde:	2978      	cmp	r1, #120	; 0x78
 8003ce0:	d1d4      	bne.n	8003c8c <_printf_i+0x30>
 8003ce2:	2378      	movs	r3, #120	; 0x78
 8003ce4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003ce8:	4864      	ldr	r0, [pc, #400]	; (8003e7c <_printf_i+0x220>)
 8003cea:	e055      	b.n	8003d98 <_printf_i+0x13c>
 8003cec:	6813      	ldr	r3, [r2, #0]
 8003cee:	1d19      	adds	r1, r3, #4
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	6011      	str	r1, [r2, #0]
 8003cf4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003cf8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e08c      	b.n	8003e1a <_printf_i+0x1be>
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	6011      	str	r1, [r2, #0]
 8003d04:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003d08:	bf18      	it	ne
 8003d0a:	b21b      	sxthne	r3, r3
 8003d0c:	e7cf      	b.n	8003cae <_printf_i+0x52>
 8003d0e:	6813      	ldr	r3, [r2, #0]
 8003d10:	6825      	ldr	r5, [r4, #0]
 8003d12:	1d18      	adds	r0, r3, #4
 8003d14:	6010      	str	r0, [r2, #0]
 8003d16:	0628      	lsls	r0, r5, #24
 8003d18:	d501      	bpl.n	8003d1e <_printf_i+0xc2>
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	e002      	b.n	8003d24 <_printf_i+0xc8>
 8003d1e:	0668      	lsls	r0, r5, #25
 8003d20:	d5fb      	bpl.n	8003d1a <_printf_i+0xbe>
 8003d22:	881b      	ldrh	r3, [r3, #0]
 8003d24:	4854      	ldr	r0, [pc, #336]	; (8003e78 <_printf_i+0x21c>)
 8003d26:	296f      	cmp	r1, #111	; 0x6f
 8003d28:	bf14      	ite	ne
 8003d2a:	220a      	movne	r2, #10
 8003d2c:	2208      	moveq	r2, #8
 8003d2e:	2100      	movs	r1, #0
 8003d30:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003d34:	6865      	ldr	r5, [r4, #4]
 8003d36:	60a5      	str	r5, [r4, #8]
 8003d38:	2d00      	cmp	r5, #0
 8003d3a:	f2c0 8095 	blt.w	8003e68 <_printf_i+0x20c>
 8003d3e:	6821      	ldr	r1, [r4, #0]
 8003d40:	f021 0104 	bic.w	r1, r1, #4
 8003d44:	6021      	str	r1, [r4, #0]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d13d      	bne.n	8003dc6 <_printf_i+0x16a>
 8003d4a:	2d00      	cmp	r5, #0
 8003d4c:	f040 808e 	bne.w	8003e6c <_printf_i+0x210>
 8003d50:	4665      	mov	r5, ip
 8003d52:	2a08      	cmp	r2, #8
 8003d54:	d10b      	bne.n	8003d6e <_printf_i+0x112>
 8003d56:	6823      	ldr	r3, [r4, #0]
 8003d58:	07db      	lsls	r3, r3, #31
 8003d5a:	d508      	bpl.n	8003d6e <_printf_i+0x112>
 8003d5c:	6923      	ldr	r3, [r4, #16]
 8003d5e:	6862      	ldr	r2, [r4, #4]
 8003d60:	429a      	cmp	r2, r3
 8003d62:	bfde      	ittt	le
 8003d64:	2330      	movle	r3, #48	; 0x30
 8003d66:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003d6a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003d6e:	ebac 0305 	sub.w	r3, ip, r5
 8003d72:	6123      	str	r3, [r4, #16]
 8003d74:	f8cd 8000 	str.w	r8, [sp]
 8003d78:	463b      	mov	r3, r7
 8003d7a:	aa03      	add	r2, sp, #12
 8003d7c:	4621      	mov	r1, r4
 8003d7e:	4630      	mov	r0, r6
 8003d80:	f7ff fef6 	bl	8003b70 <_printf_common>
 8003d84:	3001      	adds	r0, #1
 8003d86:	d14d      	bne.n	8003e24 <_printf_i+0x1c8>
 8003d88:	f04f 30ff 	mov.w	r0, #4294967295
 8003d8c:	b005      	add	sp, #20
 8003d8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003d92:	4839      	ldr	r0, [pc, #228]	; (8003e78 <_printf_i+0x21c>)
 8003d94:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003d98:	6813      	ldr	r3, [r2, #0]
 8003d9a:	6821      	ldr	r1, [r4, #0]
 8003d9c:	1d1d      	adds	r5, r3, #4
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	6015      	str	r5, [r2, #0]
 8003da2:	060a      	lsls	r2, r1, #24
 8003da4:	d50b      	bpl.n	8003dbe <_printf_i+0x162>
 8003da6:	07ca      	lsls	r2, r1, #31
 8003da8:	bf44      	itt	mi
 8003daa:	f041 0120 	orrmi.w	r1, r1, #32
 8003dae:	6021      	strmi	r1, [r4, #0]
 8003db0:	b91b      	cbnz	r3, 8003dba <_printf_i+0x15e>
 8003db2:	6822      	ldr	r2, [r4, #0]
 8003db4:	f022 0220 	bic.w	r2, r2, #32
 8003db8:	6022      	str	r2, [r4, #0]
 8003dba:	2210      	movs	r2, #16
 8003dbc:	e7b7      	b.n	8003d2e <_printf_i+0xd2>
 8003dbe:	064d      	lsls	r5, r1, #25
 8003dc0:	bf48      	it	mi
 8003dc2:	b29b      	uxthmi	r3, r3
 8003dc4:	e7ef      	b.n	8003da6 <_printf_i+0x14a>
 8003dc6:	4665      	mov	r5, ip
 8003dc8:	fbb3 f1f2 	udiv	r1, r3, r2
 8003dcc:	fb02 3311 	mls	r3, r2, r1, r3
 8003dd0:	5cc3      	ldrb	r3, [r0, r3]
 8003dd2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003dd6:	460b      	mov	r3, r1
 8003dd8:	2900      	cmp	r1, #0
 8003dda:	d1f5      	bne.n	8003dc8 <_printf_i+0x16c>
 8003ddc:	e7b9      	b.n	8003d52 <_printf_i+0xf6>
 8003dde:	6813      	ldr	r3, [r2, #0]
 8003de0:	6825      	ldr	r5, [r4, #0]
 8003de2:	6961      	ldr	r1, [r4, #20]
 8003de4:	1d18      	adds	r0, r3, #4
 8003de6:	6010      	str	r0, [r2, #0]
 8003de8:	0628      	lsls	r0, r5, #24
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	d501      	bpl.n	8003df2 <_printf_i+0x196>
 8003dee:	6019      	str	r1, [r3, #0]
 8003df0:	e002      	b.n	8003df8 <_printf_i+0x19c>
 8003df2:	066a      	lsls	r2, r5, #25
 8003df4:	d5fb      	bpl.n	8003dee <_printf_i+0x192>
 8003df6:	8019      	strh	r1, [r3, #0]
 8003df8:	2300      	movs	r3, #0
 8003dfa:	6123      	str	r3, [r4, #16]
 8003dfc:	4665      	mov	r5, ip
 8003dfe:	e7b9      	b.n	8003d74 <_printf_i+0x118>
 8003e00:	6813      	ldr	r3, [r2, #0]
 8003e02:	1d19      	adds	r1, r3, #4
 8003e04:	6011      	str	r1, [r2, #0]
 8003e06:	681d      	ldr	r5, [r3, #0]
 8003e08:	6862      	ldr	r2, [r4, #4]
 8003e0a:	2100      	movs	r1, #0
 8003e0c:	4628      	mov	r0, r5
 8003e0e:	f7fc f9df 	bl	80001d0 <memchr>
 8003e12:	b108      	cbz	r0, 8003e18 <_printf_i+0x1bc>
 8003e14:	1b40      	subs	r0, r0, r5
 8003e16:	6060      	str	r0, [r4, #4]
 8003e18:	6863      	ldr	r3, [r4, #4]
 8003e1a:	6123      	str	r3, [r4, #16]
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e22:	e7a7      	b.n	8003d74 <_printf_i+0x118>
 8003e24:	6923      	ldr	r3, [r4, #16]
 8003e26:	462a      	mov	r2, r5
 8003e28:	4639      	mov	r1, r7
 8003e2a:	4630      	mov	r0, r6
 8003e2c:	47c0      	blx	r8
 8003e2e:	3001      	adds	r0, #1
 8003e30:	d0aa      	beq.n	8003d88 <_printf_i+0x12c>
 8003e32:	6823      	ldr	r3, [r4, #0]
 8003e34:	079b      	lsls	r3, r3, #30
 8003e36:	d413      	bmi.n	8003e60 <_printf_i+0x204>
 8003e38:	68e0      	ldr	r0, [r4, #12]
 8003e3a:	9b03      	ldr	r3, [sp, #12]
 8003e3c:	4298      	cmp	r0, r3
 8003e3e:	bfb8      	it	lt
 8003e40:	4618      	movlt	r0, r3
 8003e42:	e7a3      	b.n	8003d8c <_printf_i+0x130>
 8003e44:	2301      	movs	r3, #1
 8003e46:	464a      	mov	r2, r9
 8003e48:	4639      	mov	r1, r7
 8003e4a:	4630      	mov	r0, r6
 8003e4c:	47c0      	blx	r8
 8003e4e:	3001      	adds	r0, #1
 8003e50:	d09a      	beq.n	8003d88 <_printf_i+0x12c>
 8003e52:	3501      	adds	r5, #1
 8003e54:	68e3      	ldr	r3, [r4, #12]
 8003e56:	9a03      	ldr	r2, [sp, #12]
 8003e58:	1a9b      	subs	r3, r3, r2
 8003e5a:	42ab      	cmp	r3, r5
 8003e5c:	dcf2      	bgt.n	8003e44 <_printf_i+0x1e8>
 8003e5e:	e7eb      	b.n	8003e38 <_printf_i+0x1dc>
 8003e60:	2500      	movs	r5, #0
 8003e62:	f104 0919 	add.w	r9, r4, #25
 8003e66:	e7f5      	b.n	8003e54 <_printf_i+0x1f8>
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d1ac      	bne.n	8003dc6 <_printf_i+0x16a>
 8003e6c:	7803      	ldrb	r3, [r0, #0]
 8003e6e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003e72:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e76:	e76c      	b.n	8003d52 <_printf_i+0xf6>
 8003e78:	0800449d 	.word	0x0800449d
 8003e7c:	080044ae 	.word	0x080044ae

08003e80 <__sread>:
 8003e80:	b510      	push	{r4, lr}
 8003e82:	460c      	mov	r4, r1
 8003e84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e88:	f000 fa5a 	bl	8004340 <_read_r>
 8003e8c:	2800      	cmp	r0, #0
 8003e8e:	bfab      	itete	ge
 8003e90:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003e92:	89a3      	ldrhlt	r3, [r4, #12]
 8003e94:	181b      	addge	r3, r3, r0
 8003e96:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003e9a:	bfac      	ite	ge
 8003e9c:	6563      	strge	r3, [r4, #84]	; 0x54
 8003e9e:	81a3      	strhlt	r3, [r4, #12]
 8003ea0:	bd10      	pop	{r4, pc}

08003ea2 <__swrite>:
 8003ea2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ea6:	461f      	mov	r7, r3
 8003ea8:	898b      	ldrh	r3, [r1, #12]
 8003eaa:	05db      	lsls	r3, r3, #23
 8003eac:	4605      	mov	r5, r0
 8003eae:	460c      	mov	r4, r1
 8003eb0:	4616      	mov	r6, r2
 8003eb2:	d505      	bpl.n	8003ec0 <__swrite+0x1e>
 8003eb4:	2302      	movs	r3, #2
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ebc:	f000 f9b6 	bl	800422c <_lseek_r>
 8003ec0:	89a3      	ldrh	r3, [r4, #12]
 8003ec2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003ec6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003eca:	81a3      	strh	r3, [r4, #12]
 8003ecc:	4632      	mov	r2, r6
 8003ece:	463b      	mov	r3, r7
 8003ed0:	4628      	mov	r0, r5
 8003ed2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003ed6:	f000 b869 	b.w	8003fac <_write_r>

08003eda <__sseek>:
 8003eda:	b510      	push	{r4, lr}
 8003edc:	460c      	mov	r4, r1
 8003ede:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ee2:	f000 f9a3 	bl	800422c <_lseek_r>
 8003ee6:	1c43      	adds	r3, r0, #1
 8003ee8:	89a3      	ldrh	r3, [r4, #12]
 8003eea:	bf15      	itete	ne
 8003eec:	6560      	strne	r0, [r4, #84]	; 0x54
 8003eee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003ef2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003ef6:	81a3      	strheq	r3, [r4, #12]
 8003ef8:	bf18      	it	ne
 8003efa:	81a3      	strhne	r3, [r4, #12]
 8003efc:	bd10      	pop	{r4, pc}

08003efe <__sclose>:
 8003efe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f02:	f000 b8d3 	b.w	80040ac <_close_r>
	...

08003f08 <__swbuf_r>:
 8003f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f0a:	460e      	mov	r6, r1
 8003f0c:	4614      	mov	r4, r2
 8003f0e:	4605      	mov	r5, r0
 8003f10:	b118      	cbz	r0, 8003f1a <__swbuf_r+0x12>
 8003f12:	6983      	ldr	r3, [r0, #24]
 8003f14:	b90b      	cbnz	r3, 8003f1a <__swbuf_r+0x12>
 8003f16:	f7ff fc39 	bl	800378c <__sinit>
 8003f1a:	4b21      	ldr	r3, [pc, #132]	; (8003fa0 <__swbuf_r+0x98>)
 8003f1c:	429c      	cmp	r4, r3
 8003f1e:	d12a      	bne.n	8003f76 <__swbuf_r+0x6e>
 8003f20:	686c      	ldr	r4, [r5, #4]
 8003f22:	69a3      	ldr	r3, [r4, #24]
 8003f24:	60a3      	str	r3, [r4, #8]
 8003f26:	89a3      	ldrh	r3, [r4, #12]
 8003f28:	071a      	lsls	r2, r3, #28
 8003f2a:	d52e      	bpl.n	8003f8a <__swbuf_r+0x82>
 8003f2c:	6923      	ldr	r3, [r4, #16]
 8003f2e:	b363      	cbz	r3, 8003f8a <__swbuf_r+0x82>
 8003f30:	6923      	ldr	r3, [r4, #16]
 8003f32:	6820      	ldr	r0, [r4, #0]
 8003f34:	1ac0      	subs	r0, r0, r3
 8003f36:	6963      	ldr	r3, [r4, #20]
 8003f38:	b2f6      	uxtb	r6, r6
 8003f3a:	4283      	cmp	r3, r0
 8003f3c:	4637      	mov	r7, r6
 8003f3e:	dc04      	bgt.n	8003f4a <__swbuf_r+0x42>
 8003f40:	4621      	mov	r1, r4
 8003f42:	4628      	mov	r0, r5
 8003f44:	f000 f948 	bl	80041d8 <_fflush_r>
 8003f48:	bb28      	cbnz	r0, 8003f96 <__swbuf_r+0x8e>
 8003f4a:	68a3      	ldr	r3, [r4, #8]
 8003f4c:	3b01      	subs	r3, #1
 8003f4e:	60a3      	str	r3, [r4, #8]
 8003f50:	6823      	ldr	r3, [r4, #0]
 8003f52:	1c5a      	adds	r2, r3, #1
 8003f54:	6022      	str	r2, [r4, #0]
 8003f56:	701e      	strb	r6, [r3, #0]
 8003f58:	6963      	ldr	r3, [r4, #20]
 8003f5a:	3001      	adds	r0, #1
 8003f5c:	4283      	cmp	r3, r0
 8003f5e:	d004      	beq.n	8003f6a <__swbuf_r+0x62>
 8003f60:	89a3      	ldrh	r3, [r4, #12]
 8003f62:	07db      	lsls	r3, r3, #31
 8003f64:	d519      	bpl.n	8003f9a <__swbuf_r+0x92>
 8003f66:	2e0a      	cmp	r6, #10
 8003f68:	d117      	bne.n	8003f9a <__swbuf_r+0x92>
 8003f6a:	4621      	mov	r1, r4
 8003f6c:	4628      	mov	r0, r5
 8003f6e:	f000 f933 	bl	80041d8 <_fflush_r>
 8003f72:	b190      	cbz	r0, 8003f9a <__swbuf_r+0x92>
 8003f74:	e00f      	b.n	8003f96 <__swbuf_r+0x8e>
 8003f76:	4b0b      	ldr	r3, [pc, #44]	; (8003fa4 <__swbuf_r+0x9c>)
 8003f78:	429c      	cmp	r4, r3
 8003f7a:	d101      	bne.n	8003f80 <__swbuf_r+0x78>
 8003f7c:	68ac      	ldr	r4, [r5, #8]
 8003f7e:	e7d0      	b.n	8003f22 <__swbuf_r+0x1a>
 8003f80:	4b09      	ldr	r3, [pc, #36]	; (8003fa8 <__swbuf_r+0xa0>)
 8003f82:	429c      	cmp	r4, r3
 8003f84:	bf08      	it	eq
 8003f86:	68ec      	ldreq	r4, [r5, #12]
 8003f88:	e7cb      	b.n	8003f22 <__swbuf_r+0x1a>
 8003f8a:	4621      	mov	r1, r4
 8003f8c:	4628      	mov	r0, r5
 8003f8e:	f000 f81f 	bl	8003fd0 <__swsetup_r>
 8003f92:	2800      	cmp	r0, #0
 8003f94:	d0cc      	beq.n	8003f30 <__swbuf_r+0x28>
 8003f96:	f04f 37ff 	mov.w	r7, #4294967295
 8003f9a:	4638      	mov	r0, r7
 8003f9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	0800444c 	.word	0x0800444c
 8003fa4:	0800446c 	.word	0x0800446c
 8003fa8:	0800442c 	.word	0x0800442c

08003fac <_write_r>:
 8003fac:	b538      	push	{r3, r4, r5, lr}
 8003fae:	4c07      	ldr	r4, [pc, #28]	; (8003fcc <_write_r+0x20>)
 8003fb0:	4605      	mov	r5, r0
 8003fb2:	4608      	mov	r0, r1
 8003fb4:	4611      	mov	r1, r2
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	6022      	str	r2, [r4, #0]
 8003fba:	461a      	mov	r2, r3
 8003fbc:	f7fc ffba 	bl	8000f34 <_write>
 8003fc0:	1c43      	adds	r3, r0, #1
 8003fc2:	d102      	bne.n	8003fca <_write_r+0x1e>
 8003fc4:	6823      	ldr	r3, [r4, #0]
 8003fc6:	b103      	cbz	r3, 8003fca <_write_r+0x1e>
 8003fc8:	602b      	str	r3, [r5, #0]
 8003fca:	bd38      	pop	{r3, r4, r5, pc}
 8003fcc:	20000138 	.word	0x20000138

08003fd0 <__swsetup_r>:
 8003fd0:	4b32      	ldr	r3, [pc, #200]	; (800409c <__swsetup_r+0xcc>)
 8003fd2:	b570      	push	{r4, r5, r6, lr}
 8003fd4:	681d      	ldr	r5, [r3, #0]
 8003fd6:	4606      	mov	r6, r0
 8003fd8:	460c      	mov	r4, r1
 8003fda:	b125      	cbz	r5, 8003fe6 <__swsetup_r+0x16>
 8003fdc:	69ab      	ldr	r3, [r5, #24]
 8003fde:	b913      	cbnz	r3, 8003fe6 <__swsetup_r+0x16>
 8003fe0:	4628      	mov	r0, r5
 8003fe2:	f7ff fbd3 	bl	800378c <__sinit>
 8003fe6:	4b2e      	ldr	r3, [pc, #184]	; (80040a0 <__swsetup_r+0xd0>)
 8003fe8:	429c      	cmp	r4, r3
 8003fea:	d10f      	bne.n	800400c <__swsetup_r+0x3c>
 8003fec:	686c      	ldr	r4, [r5, #4]
 8003fee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ff2:	b29a      	uxth	r2, r3
 8003ff4:	0715      	lsls	r5, r2, #28
 8003ff6:	d42c      	bmi.n	8004052 <__swsetup_r+0x82>
 8003ff8:	06d0      	lsls	r0, r2, #27
 8003ffa:	d411      	bmi.n	8004020 <__swsetup_r+0x50>
 8003ffc:	2209      	movs	r2, #9
 8003ffe:	6032      	str	r2, [r6, #0]
 8004000:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004004:	81a3      	strh	r3, [r4, #12]
 8004006:	f04f 30ff 	mov.w	r0, #4294967295
 800400a:	e03e      	b.n	800408a <__swsetup_r+0xba>
 800400c:	4b25      	ldr	r3, [pc, #148]	; (80040a4 <__swsetup_r+0xd4>)
 800400e:	429c      	cmp	r4, r3
 8004010:	d101      	bne.n	8004016 <__swsetup_r+0x46>
 8004012:	68ac      	ldr	r4, [r5, #8]
 8004014:	e7eb      	b.n	8003fee <__swsetup_r+0x1e>
 8004016:	4b24      	ldr	r3, [pc, #144]	; (80040a8 <__swsetup_r+0xd8>)
 8004018:	429c      	cmp	r4, r3
 800401a:	bf08      	it	eq
 800401c:	68ec      	ldreq	r4, [r5, #12]
 800401e:	e7e6      	b.n	8003fee <__swsetup_r+0x1e>
 8004020:	0751      	lsls	r1, r2, #29
 8004022:	d512      	bpl.n	800404a <__swsetup_r+0x7a>
 8004024:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004026:	b141      	cbz	r1, 800403a <__swsetup_r+0x6a>
 8004028:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800402c:	4299      	cmp	r1, r3
 800402e:	d002      	beq.n	8004036 <__swsetup_r+0x66>
 8004030:	4630      	mov	r0, r6
 8004032:	f7ff fa93 	bl	800355c <_free_r>
 8004036:	2300      	movs	r3, #0
 8004038:	6363      	str	r3, [r4, #52]	; 0x34
 800403a:	89a3      	ldrh	r3, [r4, #12]
 800403c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004040:	81a3      	strh	r3, [r4, #12]
 8004042:	2300      	movs	r3, #0
 8004044:	6063      	str	r3, [r4, #4]
 8004046:	6923      	ldr	r3, [r4, #16]
 8004048:	6023      	str	r3, [r4, #0]
 800404a:	89a3      	ldrh	r3, [r4, #12]
 800404c:	f043 0308 	orr.w	r3, r3, #8
 8004050:	81a3      	strh	r3, [r4, #12]
 8004052:	6923      	ldr	r3, [r4, #16]
 8004054:	b94b      	cbnz	r3, 800406a <__swsetup_r+0x9a>
 8004056:	89a3      	ldrh	r3, [r4, #12]
 8004058:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800405c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004060:	d003      	beq.n	800406a <__swsetup_r+0x9a>
 8004062:	4621      	mov	r1, r4
 8004064:	4630      	mov	r0, r6
 8004066:	f000 f917 	bl	8004298 <__smakebuf_r>
 800406a:	89a2      	ldrh	r2, [r4, #12]
 800406c:	f012 0301 	ands.w	r3, r2, #1
 8004070:	d00c      	beq.n	800408c <__swsetup_r+0xbc>
 8004072:	2300      	movs	r3, #0
 8004074:	60a3      	str	r3, [r4, #8]
 8004076:	6963      	ldr	r3, [r4, #20]
 8004078:	425b      	negs	r3, r3
 800407a:	61a3      	str	r3, [r4, #24]
 800407c:	6923      	ldr	r3, [r4, #16]
 800407e:	b953      	cbnz	r3, 8004096 <__swsetup_r+0xc6>
 8004080:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004084:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004088:	d1ba      	bne.n	8004000 <__swsetup_r+0x30>
 800408a:	bd70      	pop	{r4, r5, r6, pc}
 800408c:	0792      	lsls	r2, r2, #30
 800408e:	bf58      	it	pl
 8004090:	6963      	ldrpl	r3, [r4, #20]
 8004092:	60a3      	str	r3, [r4, #8]
 8004094:	e7f2      	b.n	800407c <__swsetup_r+0xac>
 8004096:	2000      	movs	r0, #0
 8004098:	e7f7      	b.n	800408a <__swsetup_r+0xba>
 800409a:	bf00      	nop
 800409c:	2000000c 	.word	0x2000000c
 80040a0:	0800444c 	.word	0x0800444c
 80040a4:	0800446c 	.word	0x0800446c
 80040a8:	0800442c 	.word	0x0800442c

080040ac <_close_r>:
 80040ac:	b538      	push	{r3, r4, r5, lr}
 80040ae:	4c06      	ldr	r4, [pc, #24]	; (80040c8 <_close_r+0x1c>)
 80040b0:	2300      	movs	r3, #0
 80040b2:	4605      	mov	r5, r0
 80040b4:	4608      	mov	r0, r1
 80040b6:	6023      	str	r3, [r4, #0]
 80040b8:	f7fd faff 	bl	80016ba <_close>
 80040bc:	1c43      	adds	r3, r0, #1
 80040be:	d102      	bne.n	80040c6 <_close_r+0x1a>
 80040c0:	6823      	ldr	r3, [r4, #0]
 80040c2:	b103      	cbz	r3, 80040c6 <_close_r+0x1a>
 80040c4:	602b      	str	r3, [r5, #0]
 80040c6:	bd38      	pop	{r3, r4, r5, pc}
 80040c8:	20000138 	.word	0x20000138

080040cc <__sflush_r>:
 80040cc:	898a      	ldrh	r2, [r1, #12]
 80040ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040d2:	4605      	mov	r5, r0
 80040d4:	0710      	lsls	r0, r2, #28
 80040d6:	460c      	mov	r4, r1
 80040d8:	d458      	bmi.n	800418c <__sflush_r+0xc0>
 80040da:	684b      	ldr	r3, [r1, #4]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	dc05      	bgt.n	80040ec <__sflush_r+0x20>
 80040e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	dc02      	bgt.n	80040ec <__sflush_r+0x20>
 80040e6:	2000      	movs	r0, #0
 80040e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80040ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80040ee:	2e00      	cmp	r6, #0
 80040f0:	d0f9      	beq.n	80040e6 <__sflush_r+0x1a>
 80040f2:	2300      	movs	r3, #0
 80040f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80040f8:	682f      	ldr	r7, [r5, #0]
 80040fa:	6a21      	ldr	r1, [r4, #32]
 80040fc:	602b      	str	r3, [r5, #0]
 80040fe:	d032      	beq.n	8004166 <__sflush_r+0x9a>
 8004100:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004102:	89a3      	ldrh	r3, [r4, #12]
 8004104:	075a      	lsls	r2, r3, #29
 8004106:	d505      	bpl.n	8004114 <__sflush_r+0x48>
 8004108:	6863      	ldr	r3, [r4, #4]
 800410a:	1ac0      	subs	r0, r0, r3
 800410c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800410e:	b10b      	cbz	r3, 8004114 <__sflush_r+0x48>
 8004110:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004112:	1ac0      	subs	r0, r0, r3
 8004114:	2300      	movs	r3, #0
 8004116:	4602      	mov	r2, r0
 8004118:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800411a:	6a21      	ldr	r1, [r4, #32]
 800411c:	4628      	mov	r0, r5
 800411e:	47b0      	blx	r6
 8004120:	1c43      	adds	r3, r0, #1
 8004122:	89a3      	ldrh	r3, [r4, #12]
 8004124:	d106      	bne.n	8004134 <__sflush_r+0x68>
 8004126:	6829      	ldr	r1, [r5, #0]
 8004128:	291d      	cmp	r1, #29
 800412a:	d848      	bhi.n	80041be <__sflush_r+0xf2>
 800412c:	4a29      	ldr	r2, [pc, #164]	; (80041d4 <__sflush_r+0x108>)
 800412e:	40ca      	lsrs	r2, r1
 8004130:	07d6      	lsls	r6, r2, #31
 8004132:	d544      	bpl.n	80041be <__sflush_r+0xf2>
 8004134:	2200      	movs	r2, #0
 8004136:	6062      	str	r2, [r4, #4]
 8004138:	04d9      	lsls	r1, r3, #19
 800413a:	6922      	ldr	r2, [r4, #16]
 800413c:	6022      	str	r2, [r4, #0]
 800413e:	d504      	bpl.n	800414a <__sflush_r+0x7e>
 8004140:	1c42      	adds	r2, r0, #1
 8004142:	d101      	bne.n	8004148 <__sflush_r+0x7c>
 8004144:	682b      	ldr	r3, [r5, #0]
 8004146:	b903      	cbnz	r3, 800414a <__sflush_r+0x7e>
 8004148:	6560      	str	r0, [r4, #84]	; 0x54
 800414a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800414c:	602f      	str	r7, [r5, #0]
 800414e:	2900      	cmp	r1, #0
 8004150:	d0c9      	beq.n	80040e6 <__sflush_r+0x1a>
 8004152:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004156:	4299      	cmp	r1, r3
 8004158:	d002      	beq.n	8004160 <__sflush_r+0x94>
 800415a:	4628      	mov	r0, r5
 800415c:	f7ff f9fe 	bl	800355c <_free_r>
 8004160:	2000      	movs	r0, #0
 8004162:	6360      	str	r0, [r4, #52]	; 0x34
 8004164:	e7c0      	b.n	80040e8 <__sflush_r+0x1c>
 8004166:	2301      	movs	r3, #1
 8004168:	4628      	mov	r0, r5
 800416a:	47b0      	blx	r6
 800416c:	1c41      	adds	r1, r0, #1
 800416e:	d1c8      	bne.n	8004102 <__sflush_r+0x36>
 8004170:	682b      	ldr	r3, [r5, #0]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d0c5      	beq.n	8004102 <__sflush_r+0x36>
 8004176:	2b1d      	cmp	r3, #29
 8004178:	d001      	beq.n	800417e <__sflush_r+0xb2>
 800417a:	2b16      	cmp	r3, #22
 800417c:	d101      	bne.n	8004182 <__sflush_r+0xb6>
 800417e:	602f      	str	r7, [r5, #0]
 8004180:	e7b1      	b.n	80040e6 <__sflush_r+0x1a>
 8004182:	89a3      	ldrh	r3, [r4, #12]
 8004184:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004188:	81a3      	strh	r3, [r4, #12]
 800418a:	e7ad      	b.n	80040e8 <__sflush_r+0x1c>
 800418c:	690f      	ldr	r7, [r1, #16]
 800418e:	2f00      	cmp	r7, #0
 8004190:	d0a9      	beq.n	80040e6 <__sflush_r+0x1a>
 8004192:	0793      	lsls	r3, r2, #30
 8004194:	680e      	ldr	r6, [r1, #0]
 8004196:	bf08      	it	eq
 8004198:	694b      	ldreq	r3, [r1, #20]
 800419a:	600f      	str	r7, [r1, #0]
 800419c:	bf18      	it	ne
 800419e:	2300      	movne	r3, #0
 80041a0:	eba6 0807 	sub.w	r8, r6, r7
 80041a4:	608b      	str	r3, [r1, #8]
 80041a6:	f1b8 0f00 	cmp.w	r8, #0
 80041aa:	dd9c      	ble.n	80040e6 <__sflush_r+0x1a>
 80041ac:	4643      	mov	r3, r8
 80041ae:	463a      	mov	r2, r7
 80041b0:	6a21      	ldr	r1, [r4, #32]
 80041b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80041b4:	4628      	mov	r0, r5
 80041b6:	47b0      	blx	r6
 80041b8:	2800      	cmp	r0, #0
 80041ba:	dc06      	bgt.n	80041ca <__sflush_r+0xfe>
 80041bc:	89a3      	ldrh	r3, [r4, #12]
 80041be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041c2:	81a3      	strh	r3, [r4, #12]
 80041c4:	f04f 30ff 	mov.w	r0, #4294967295
 80041c8:	e78e      	b.n	80040e8 <__sflush_r+0x1c>
 80041ca:	4407      	add	r7, r0
 80041cc:	eba8 0800 	sub.w	r8, r8, r0
 80041d0:	e7e9      	b.n	80041a6 <__sflush_r+0xda>
 80041d2:	bf00      	nop
 80041d4:	20400001 	.word	0x20400001

080041d8 <_fflush_r>:
 80041d8:	b538      	push	{r3, r4, r5, lr}
 80041da:	690b      	ldr	r3, [r1, #16]
 80041dc:	4605      	mov	r5, r0
 80041de:	460c      	mov	r4, r1
 80041e0:	b1db      	cbz	r3, 800421a <_fflush_r+0x42>
 80041e2:	b118      	cbz	r0, 80041ec <_fflush_r+0x14>
 80041e4:	6983      	ldr	r3, [r0, #24]
 80041e6:	b90b      	cbnz	r3, 80041ec <_fflush_r+0x14>
 80041e8:	f7ff fad0 	bl	800378c <__sinit>
 80041ec:	4b0c      	ldr	r3, [pc, #48]	; (8004220 <_fflush_r+0x48>)
 80041ee:	429c      	cmp	r4, r3
 80041f0:	d109      	bne.n	8004206 <_fflush_r+0x2e>
 80041f2:	686c      	ldr	r4, [r5, #4]
 80041f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80041f8:	b17b      	cbz	r3, 800421a <_fflush_r+0x42>
 80041fa:	4621      	mov	r1, r4
 80041fc:	4628      	mov	r0, r5
 80041fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004202:	f7ff bf63 	b.w	80040cc <__sflush_r>
 8004206:	4b07      	ldr	r3, [pc, #28]	; (8004224 <_fflush_r+0x4c>)
 8004208:	429c      	cmp	r4, r3
 800420a:	d101      	bne.n	8004210 <_fflush_r+0x38>
 800420c:	68ac      	ldr	r4, [r5, #8]
 800420e:	e7f1      	b.n	80041f4 <_fflush_r+0x1c>
 8004210:	4b05      	ldr	r3, [pc, #20]	; (8004228 <_fflush_r+0x50>)
 8004212:	429c      	cmp	r4, r3
 8004214:	bf08      	it	eq
 8004216:	68ec      	ldreq	r4, [r5, #12]
 8004218:	e7ec      	b.n	80041f4 <_fflush_r+0x1c>
 800421a:	2000      	movs	r0, #0
 800421c:	bd38      	pop	{r3, r4, r5, pc}
 800421e:	bf00      	nop
 8004220:	0800444c 	.word	0x0800444c
 8004224:	0800446c 	.word	0x0800446c
 8004228:	0800442c 	.word	0x0800442c

0800422c <_lseek_r>:
 800422c:	b538      	push	{r3, r4, r5, lr}
 800422e:	4c07      	ldr	r4, [pc, #28]	; (800424c <_lseek_r+0x20>)
 8004230:	4605      	mov	r5, r0
 8004232:	4608      	mov	r0, r1
 8004234:	4611      	mov	r1, r2
 8004236:	2200      	movs	r2, #0
 8004238:	6022      	str	r2, [r4, #0]
 800423a:	461a      	mov	r2, r3
 800423c:	f7fd fa64 	bl	8001708 <_lseek>
 8004240:	1c43      	adds	r3, r0, #1
 8004242:	d102      	bne.n	800424a <_lseek_r+0x1e>
 8004244:	6823      	ldr	r3, [r4, #0]
 8004246:	b103      	cbz	r3, 800424a <_lseek_r+0x1e>
 8004248:	602b      	str	r3, [r5, #0]
 800424a:	bd38      	pop	{r3, r4, r5, pc}
 800424c:	20000138 	.word	0x20000138

08004250 <__swhatbuf_r>:
 8004250:	b570      	push	{r4, r5, r6, lr}
 8004252:	460e      	mov	r6, r1
 8004254:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004258:	2900      	cmp	r1, #0
 800425a:	b096      	sub	sp, #88	; 0x58
 800425c:	4614      	mov	r4, r2
 800425e:	461d      	mov	r5, r3
 8004260:	da07      	bge.n	8004272 <__swhatbuf_r+0x22>
 8004262:	2300      	movs	r3, #0
 8004264:	602b      	str	r3, [r5, #0]
 8004266:	89b3      	ldrh	r3, [r6, #12]
 8004268:	061a      	lsls	r2, r3, #24
 800426a:	d410      	bmi.n	800428e <__swhatbuf_r+0x3e>
 800426c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004270:	e00e      	b.n	8004290 <__swhatbuf_r+0x40>
 8004272:	466a      	mov	r2, sp
 8004274:	f000 f876 	bl	8004364 <_fstat_r>
 8004278:	2800      	cmp	r0, #0
 800427a:	dbf2      	blt.n	8004262 <__swhatbuf_r+0x12>
 800427c:	9a01      	ldr	r2, [sp, #4]
 800427e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004282:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004286:	425a      	negs	r2, r3
 8004288:	415a      	adcs	r2, r3
 800428a:	602a      	str	r2, [r5, #0]
 800428c:	e7ee      	b.n	800426c <__swhatbuf_r+0x1c>
 800428e:	2340      	movs	r3, #64	; 0x40
 8004290:	2000      	movs	r0, #0
 8004292:	6023      	str	r3, [r4, #0]
 8004294:	b016      	add	sp, #88	; 0x58
 8004296:	bd70      	pop	{r4, r5, r6, pc}

08004298 <__smakebuf_r>:
 8004298:	898b      	ldrh	r3, [r1, #12]
 800429a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800429c:	079d      	lsls	r5, r3, #30
 800429e:	4606      	mov	r6, r0
 80042a0:	460c      	mov	r4, r1
 80042a2:	d507      	bpl.n	80042b4 <__smakebuf_r+0x1c>
 80042a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80042a8:	6023      	str	r3, [r4, #0]
 80042aa:	6123      	str	r3, [r4, #16]
 80042ac:	2301      	movs	r3, #1
 80042ae:	6163      	str	r3, [r4, #20]
 80042b0:	b002      	add	sp, #8
 80042b2:	bd70      	pop	{r4, r5, r6, pc}
 80042b4:	ab01      	add	r3, sp, #4
 80042b6:	466a      	mov	r2, sp
 80042b8:	f7ff ffca 	bl	8004250 <__swhatbuf_r>
 80042bc:	9900      	ldr	r1, [sp, #0]
 80042be:	4605      	mov	r5, r0
 80042c0:	4630      	mov	r0, r6
 80042c2:	f7ff f999 	bl	80035f8 <_malloc_r>
 80042c6:	b948      	cbnz	r0, 80042dc <__smakebuf_r+0x44>
 80042c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80042cc:	059a      	lsls	r2, r3, #22
 80042ce:	d4ef      	bmi.n	80042b0 <__smakebuf_r+0x18>
 80042d0:	f023 0303 	bic.w	r3, r3, #3
 80042d4:	f043 0302 	orr.w	r3, r3, #2
 80042d8:	81a3      	strh	r3, [r4, #12]
 80042da:	e7e3      	b.n	80042a4 <__smakebuf_r+0xc>
 80042dc:	4b0d      	ldr	r3, [pc, #52]	; (8004314 <__smakebuf_r+0x7c>)
 80042de:	62b3      	str	r3, [r6, #40]	; 0x28
 80042e0:	89a3      	ldrh	r3, [r4, #12]
 80042e2:	6020      	str	r0, [r4, #0]
 80042e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042e8:	81a3      	strh	r3, [r4, #12]
 80042ea:	9b00      	ldr	r3, [sp, #0]
 80042ec:	6163      	str	r3, [r4, #20]
 80042ee:	9b01      	ldr	r3, [sp, #4]
 80042f0:	6120      	str	r0, [r4, #16]
 80042f2:	b15b      	cbz	r3, 800430c <__smakebuf_r+0x74>
 80042f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80042f8:	4630      	mov	r0, r6
 80042fa:	f000 f845 	bl	8004388 <_isatty_r>
 80042fe:	b128      	cbz	r0, 800430c <__smakebuf_r+0x74>
 8004300:	89a3      	ldrh	r3, [r4, #12]
 8004302:	f023 0303 	bic.w	r3, r3, #3
 8004306:	f043 0301 	orr.w	r3, r3, #1
 800430a:	81a3      	strh	r3, [r4, #12]
 800430c:	89a3      	ldrh	r3, [r4, #12]
 800430e:	431d      	orrs	r5, r3
 8004310:	81a5      	strh	r5, [r4, #12]
 8004312:	e7cd      	b.n	80042b0 <__smakebuf_r+0x18>
 8004314:	08003755 	.word	0x08003755

08004318 <memcpy>:
 8004318:	b510      	push	{r4, lr}
 800431a:	1e43      	subs	r3, r0, #1
 800431c:	440a      	add	r2, r1
 800431e:	4291      	cmp	r1, r2
 8004320:	d100      	bne.n	8004324 <memcpy+0xc>
 8004322:	bd10      	pop	{r4, pc}
 8004324:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004328:	f803 4f01 	strb.w	r4, [r3, #1]!
 800432c:	e7f7      	b.n	800431e <memcpy+0x6>

0800432e <_malloc_usable_size_r>:
 800432e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004332:	1f18      	subs	r0, r3, #4
 8004334:	2b00      	cmp	r3, #0
 8004336:	bfbc      	itt	lt
 8004338:	580b      	ldrlt	r3, [r1, r0]
 800433a:	18c0      	addlt	r0, r0, r3
 800433c:	4770      	bx	lr
	...

08004340 <_read_r>:
 8004340:	b538      	push	{r3, r4, r5, lr}
 8004342:	4c07      	ldr	r4, [pc, #28]	; (8004360 <_read_r+0x20>)
 8004344:	4605      	mov	r5, r0
 8004346:	4608      	mov	r0, r1
 8004348:	4611      	mov	r1, r2
 800434a:	2200      	movs	r2, #0
 800434c:	6022      	str	r2, [r4, #0]
 800434e:	461a      	mov	r2, r3
 8004350:	f7fd f996 	bl	8001680 <_read>
 8004354:	1c43      	adds	r3, r0, #1
 8004356:	d102      	bne.n	800435e <_read_r+0x1e>
 8004358:	6823      	ldr	r3, [r4, #0]
 800435a:	b103      	cbz	r3, 800435e <_read_r+0x1e>
 800435c:	602b      	str	r3, [r5, #0]
 800435e:	bd38      	pop	{r3, r4, r5, pc}
 8004360:	20000138 	.word	0x20000138

08004364 <_fstat_r>:
 8004364:	b538      	push	{r3, r4, r5, lr}
 8004366:	4c07      	ldr	r4, [pc, #28]	; (8004384 <_fstat_r+0x20>)
 8004368:	2300      	movs	r3, #0
 800436a:	4605      	mov	r5, r0
 800436c:	4608      	mov	r0, r1
 800436e:	4611      	mov	r1, r2
 8004370:	6023      	str	r3, [r4, #0]
 8004372:	f7fd f9ae 	bl	80016d2 <_fstat>
 8004376:	1c43      	adds	r3, r0, #1
 8004378:	d102      	bne.n	8004380 <_fstat_r+0x1c>
 800437a:	6823      	ldr	r3, [r4, #0]
 800437c:	b103      	cbz	r3, 8004380 <_fstat_r+0x1c>
 800437e:	602b      	str	r3, [r5, #0]
 8004380:	bd38      	pop	{r3, r4, r5, pc}
 8004382:	bf00      	nop
 8004384:	20000138 	.word	0x20000138

08004388 <_isatty_r>:
 8004388:	b538      	push	{r3, r4, r5, lr}
 800438a:	4c06      	ldr	r4, [pc, #24]	; (80043a4 <_isatty_r+0x1c>)
 800438c:	2300      	movs	r3, #0
 800438e:	4605      	mov	r5, r0
 8004390:	4608      	mov	r0, r1
 8004392:	6023      	str	r3, [r4, #0]
 8004394:	f7fd f9ad 	bl	80016f2 <_isatty>
 8004398:	1c43      	adds	r3, r0, #1
 800439a:	d102      	bne.n	80043a2 <_isatty_r+0x1a>
 800439c:	6823      	ldr	r3, [r4, #0]
 800439e:	b103      	cbz	r3, 80043a2 <_isatty_r+0x1a>
 80043a0:	602b      	str	r3, [r5, #0]
 80043a2:	bd38      	pop	{r3, r4, r5, pc}
 80043a4:	20000138 	.word	0x20000138

080043a8 <_init>:
 80043a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043aa:	bf00      	nop
 80043ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043ae:	bc08      	pop	{r3}
 80043b0:	469e      	mov	lr, r3
 80043b2:	4770      	bx	lr

080043b4 <_fini>:
 80043b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043b6:	bf00      	nop
 80043b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043ba:	bc08      	pop	{r3}
 80043bc:	469e      	mov	lr, r3
 80043be:	4770      	bx	lr
